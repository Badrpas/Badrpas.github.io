{
  "version": 3,
  "sources": ["../build/_snowpack/pkg/common/_commonjsHelpers-8c19dec8.js", "../build/_snowpack/pkg/eaciest.js", "../build/utils/alloc.js", "../build/utils/micro-time.js", "../build/utils/perf-measurer.js", "../build/ld-engine.js", "../build/_snowpack/pkg/three.js", "../build/systems/core/scene-object.js", "../build/proto/sprite.js", "../build/utils/random.js", "../build/game/stars.js", "../build/game/unit-phase.js", "../build/systems/game/death.js", "../build/utils/selectors.js", "../build/_snowpack/pkg/matter-js.js", "../build/systems/physics/matter.js", "../build/systems/physics/collision-dispatching.js", "../build/systems/game/received-damage.js", "../build/utils/color.js", "../build/utils/entity.js", "../build/proto/audio.js", "../build/proto/bullet.js", "../build/proto/player.js", "../build/systems/game/caster-ai.js", "../build/proto/caster.js", "../build/systems/core/input.js", "../build/systems/game/wasd-controller.js", "../build/levels/lvl1.js", "../build/_snowpack/pkg/howler.js", "../build/systems/core/audio.js", "../build/systems/game/dir-to-flip.js", "../build/systems/core/perf.js", "../build/systems/game/max-hp.js", "../build/systems/game/magic.js", "../build/systems/game/phase-switch.js", "../build/systems/game/hp-render.js", "../build/systems/core/init.js", "../build/systems/core/target-pos.js", "../build/systems/physics/collision-cleanup.js", "../build/systems/core/lifetime.js", "../build/systems/core/input-cursor-translation.js", "../build/systems/core/move.js", "../build/systems/core/render.js", "../build/setup-systems.js", "../build/utils/update-loop.js", "../build/utils/debug.js", "../build/main.js"],
  "sourcesContent": ["var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, basedir, module) {\n\treturn module = {\n\t\tpath: basedir,\n\t\texports: {},\n\t\trequire: function (path, base) {\n\t\t\treturn commonjsRequire(path, (base === undefined || base === null) ? module.path : base);\n\t\t}\n\t}, fn(module, module.exports), module.exports;\n}\n\nfunction commonjsRequire () {\n\tthrow new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');\n}\n\nexport { commonjsGlobal as a, createCommonjsModule as c, getDefaultExportFromCjs as g };\n", "import { c as createCommonjsModule } from './common/_commonjsHelpers-8c19dec8.js';\n\nvar entity = createCommonjsModule(function (module, exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ENTITY_ID = Symbol.for('Entity ID');\nexports.ENGINE = Symbol.for('Engine');\nexports.PROXY = Symbol.for('Entity Proxy');\nexports.DELETED_PROPS = Symbol.for('Contains removed components (properties)');\nconst IGNORED_SYMBOLS = [exports.ENGINE, exports.PROXY];\nexports.EntityProxyHandler = {\n    set(entity, prop, value) {\n        const engine = entity[exports.ENGINE];\n        const voidToDelete = engine === null || engine === void 0 ? void 0 : engine.options.deleteVoidProps;\n        const needDelete = voidToDelete && typeof value === 'undefined';\n        if (needDelete) {\n            // @ts-ignore\n            return this.deleteProperty(entity, prop);\n        }\n        // We should trigger update when new property added\n        const isIgnoredSymbol = typeof prop === 'symbol' && IGNORED_SYMBOLS.some(x => x === prop);\n        const needUpdate = !isIgnoredSymbol && ((engine === null || engine === void 0 ? void 0 : engine.isWatchedProperty(prop)) || !(prop in entity));\n        Reflect.set(entity, prop, value);\n        if (needUpdate) {\n            engine === null || engine === void 0 ? void 0 : engine._markEntityChanged(entity);\n        }\n        return true;\n    },\n    deleteProperty(entity, prop) {\n        var _a;\n        // @ts-ignore\n        entity[exports.DELETED_PROPS].set(prop, entity[prop]);\n        // @ts-ignore\n        delete entity[prop];\n        (_a = entity[exports.ENGINE]) === null || _a === void 0 ? void 0 : _a._markEntityChanged(entity);\n        return true;\n    }\n};\n/**\n * Ensures that entity is proxified\n */\nexports.getEntity = (candidate) => {\n    if (exports.isEntity(candidate)) {\n        return candidate;\n    }\n    else if (exports.isEntityProjection(candidate)) {\n        return candidate[exports.PROXY];\n    }\n    // const entity: IEntity = { ...candidate } as IEntity;\n    const entity = candidate;\n    const proxy = new Proxy(entity, exports.EntityProxyHandler);\n    entity[exports.PROXY] = proxy;\n    entity[exports.DELETED_PROPS] = new Map();\n    return proxy;\n};\nexports.isEntityProjection = (entity) => {\n    if (!entity)\n        return false;\n    return exports.PROXY in entity && (entity[exports.PROXY] !== entity);\n};\nexports.isEntity = (entity) => {\n    if (!entity) {\n        return false;\n    }\n    return exports.PROXY in entity && (entity[exports.PROXY] === entity);\n};\n\n});\n\nvar auxiliary = createCommonjsModule(function (module, exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.logger = {\n    info(...args) {\n        console.log(...args);\n    },\n    warn(...args) {\n        console.warn(...args);\n    },\n    error(...args) {\n        console.error(...args);\n    },\n    verbose(...args) {\n        console.log(...args);\n    },\n};\n\n});\n\nvar system = createCommonjsModule(function (module, exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\n\n\nclass System {\n    constructor(requirements = null, ...tail) {\n        this.enabled = true;\n        this.priority = 5;\n        this._requirements = null;\n        this._entitiesInitialized = false;\n        this._testFunctionCache = new Map();\n        if (tail.length) {\n            auxiliary.logger.warn(`System doesn't expect multiple arguments. For multi-component query - group components in array.\\nextra args:`, tail);\n        }\n        if (requirements) {\n            this.setRequirements(requirements);\n        }\n    }\n    /**\n     * Defines list(s) of entities with required components.\n     * For example:\n     * ```js\n     * [ 'componentName1', 'componentName2' ]\n     * ```\n     *\n     * results in array of entities which\n     * have componentName1 and componentName2 components in them\n     *\n     * ```js\n     * {\n     *   entityList1: [ 'componentName1', 'componentName2' ],\n     *   entityList2: [ 'componentName3' ]\n     * }\n     * ```\n     *\n     * Such requirement will produce an object with\n     * two independent lists:\n     * ```js\n     * {\n     *   entityList1: [entity1, entity2, ...]\n     *   entityList2: [...]\n     * }\n     * ```\n     *\n     * You can also pass a `function` instead of `string`/`symbol`\n     * to add custom selector logic.\n     * Be aware: runtime checks are performed only if entity was marked as changed.\n     *\n     * Passing a single value will wrap it into an array.\n     * For example:\n     * ```js\n     * 'componentName1'\n     * ```\n     * Transforms into\n     * ```js\n     * ['componentName`]\n     * ```\n     */\n    get requirements() {\n        return this._requirements;\n    }\n    set requirements(value) {\n        this.setRequirements(value);\n    }\n    setRequirements(value) {\n        if (!value) {\n            this._requirements = null;\n            return;\n        }\n        if (typeof value === 'string' || typeof value === 'symbol' || typeof value === 'function') {\n            this._requirements = [value];\n            return;\n        }\n        if (value instanceof Array) {\n            this._requirements = value;\n            return;\n        }\n        value = value;\n        for (const [key, constr] of Object.entries(value)) {\n            if (typeof constr === 'string' || typeof constr === 'symbol' || typeof constr === 'function') {\n                value[key] = [constr];\n            }\n        }\n        this._requirements = value;\n    }\n    _initEntityProxy() {\n        if (System.EntitiesIsList(this._requirements, this._entityStore)) {\n            // @ts-ignore\n            this._entityProxy = null;\n            return;\n        } //else {\n        if (!this._entityStore) {\n            return;\n        }\n        this._entityProxy = new Proxy(this._entityStore, {\n            get: (target, p, receiver) => {\n                return this.getEntities(p);\n            }\n        });\n        return this._entityProxy;\n    }\n    get entities() {\n        if (System.RequirementsIsList(this._requirements)) {\n            return this.getEntities();\n        }\n        if (!this._entityProxy) {\n            this._initEntityProxy();\n        }\n        if (this._entityProxy) {\n            return this._entityProxy;\n        }\n        return [];\n    }\n    /**\n     * Called from `Engine.prototype.addSystem` method\n     */\n    initialize() {\n        this._initEntities();\n    }\n    _initEntities() {\n        if (this._entitiesInitialized) {\n            return;\n        }\n        this._entitiesInitialized = true;\n        if (this._requirements === null) {\n            return;\n        }\n        if (!System.RequirementsIsList(this._requirements)) {\n            this._entityStore = {};\n            for (const key of Object.keys(this._requirements)) {\n                this._entityStore[key] = new Set();\n            }\n        }\n        else {\n            this._entityStore = new Set();\n        }\n    }\n    setEngine(engine) {\n        this._engine = engine;\n    }\n    getEngine() {\n        return this._engine;\n    }\n    update(dt) { }\n    ;\n    _getTestFunction(requirementList = []) {\n        const cacheEntry = this._testFunctionCache.get(requirementList);\n        if (cacheEntry) {\n            return cacheEntry;\n        }\n        const tests = requirementList.map(predicate => {\n            if (typeof predicate === 'string' || typeof predicate === 'symbol') {\n                return (entity) => predicate in entity;\n            }\n            else if (typeof predicate === 'function') {\n                return predicate;\n            }\n        }).filter((x) => !!x);\n        const testFn = (entity) => {\n            return tests.every(test => test(entity));\n        };\n        this._testFunctionCache.set(requirementList, testFn);\n        return testFn;\n    }\n    /**\n     * Checks entity for eligibility for the system\n     * Adds or removes it from system's entity list.\n     * @param entity\n     */\n    refreshEntityStatus(entity) {\n        const { _requirements } = this;\n        if (_requirements === null) {\n            return;\n        }\n        // Single collection\n        if (System.RequirementsIsList(_requirements) && System.EntitiesIsList(_requirements, this._entityStore)) {\n            if (this.isEntityMeetsRequirementList(entity, _requirements)) {\n                this.addEntity(entity);\n            }\n            else {\n                this.removeEntity(entity);\n            }\n        }\n        else if (typeof _requirements === 'object') { // Collections map\n            for (const [collectionName, requirement] of Object.entries(_requirements)) {\n                if (!System.RequirementsIsList(requirement)) {\n                    auxiliary.logger.warn(`Wrong requirement \"${collectionName}\":`, requirement, 'in', this);\n                    continue;\n                }\n                if (this.isEntityMeetsRequirementList(entity, requirement)) {\n                    this.addEntity(entity, collectionName);\n                }\n                else {\n                    this.removeEntity(entity, collectionName);\n                }\n            }\n        }\n        else {\n            throw new Error(`Incorrect requirements type. Expected Array or Object got ${typeof _requirements}`);\n        }\n    }\n    ;\n    isEntityMeetsRequirementList(entity, requirementList) {\n        const testFunction = this._getTestFunction(requirementList);\n        return testFunction === null || testFunction === void 0 ? void 0 : testFunction(entity);\n    }\n    static EntitiesIsList(requirements, entities) {\n        return this.RequirementsIsList(requirements);\n    }\n    entitiesIsList(entities) {\n        return System.EntitiesIsList(this.requirements, entities);\n    }\n    static RequirementsIsList(requirements) {\n        return requirements instanceof Array;\n    }\n    addEntity(entity, collectionName) {\n        if (!System.EntitiesIsList(this._requirements, this._entityStore)) {\n            if (typeof collectionName === 'string') {\n                const collection = this._entityStore[collectionName];\n                if (!collection.has(entity)) {\n                    collection.add(entity);\n                    this.onEntityAdded(entity, collectionName);\n                }\n            }\n            else {\n                throw new Error('Collection name is not specified.');\n            }\n        }\n        else {\n            const collection = this._entityStore;\n            if (!collection.has(entity)) {\n                collection.add(entity);\n                this.onEntityAdded(entity);\n            }\n        }\n    }\n    onEntityAdded(entity, collectionName) { }\n    getEntities(collectionName) {\n        if (!this._requirements && this._engine) {\n            return this._engine.entities.values();\n        }\n        if (typeof collectionName === 'string') {\n            if (!System.EntitiesIsList(this._requirements, this._entityStore)) {\n                return this._entityStore[collectionName];\n            }\n            throw new Error(`System has a single collection.`);\n        }\n        return this._entityStore;\n    }\n    /**\n     * Convenience method for retrieving a single (first) entity\n     */\n    getEntity(collectionName) {\n        var _a, _b;\n        const entities = this.getEntities(collectionName);\n        if (entities) {\n            const iterator = (_a = entities[Symbol.iterator]) === null || _a === void 0 ? void 0 : _a.call(entities);\n            return (_b = iterator === null || iterator === void 0 ? void 0 : iterator.next()) === null || _b === void 0 ? void 0 : _b.value;\n        }\n    }\n    /**\n     * Used for iteration through all collections\n     */\n    *getAllEntityCollections() {\n        if (!this._entityStore) {\n            return;\n        }\n        if (System.EntitiesIsList(this._requirements, this._entityStore)) {\n            yield this._entityStore;\n        }\n        else { // collection map\n            yield* Object.values(this._entityStore);\n        }\n    }\n    /**\n     * Used to determine if the system should be update by Engine next tick\n     */\n    isQualifiedForUpdate() {\n        if (!this._entityStore) {\n            return true; // Systems without requirements are `global`\n        }\n        if (System.EntitiesIsList(this._requirements, this._entityStore)) {\n            return !!this._entityStore.size;\n        }\n        else { // collection map\n            for (const list of Object.values(this._entityStore)) {\n                if (list.size) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n    removeEntity(entity$1, collectionName) {\n        if (!this._entityStore) {\n            return false;\n        }\n        // Remove from a specific collection\n        if (typeof collectionName === 'string') {\n            if (!System.EntitiesIsList(this._requirements, this._entityStore)) {\n                const store = this._entityStore[collectionName];\n                if (store.has(entity$1)) {\n                    store.delete(entity$1);\n                    this.onEntityRemoved(entity$1, entity$1[entity.DELETED_PROPS], collectionName);\n                    return true;\n                }\n                return false;\n            }\n            throw new Error('Tried to access entity list with a key but its a single collection');\n        }\n        // Remove from all collections otherwise\n        if (System.EntitiesIsList(this.requirements, this._entityStore)) {\n            if (!this._entityStore.has(entity$1))\n                return false;\n            this._entityStore.delete(entity$1);\n            this.onEntityRemoved(entity$1, entity$1[entity.DELETED_PROPS]);\n            return true;\n        }\n        let wasInSystem = false;\n        for (const [collectionName, collection] of Object.entries(this._entityStore)) {\n            if (!collection.has(entity$1))\n                continue;\n            collection.delete(entity$1);\n            wasInSystem = true;\n            this.onEntityRemoved(entity$1, entity$1[entity.DELETED_PROPS], collectionName);\n        }\n        return wasInSystem;\n    }\n    /**\n     * In case complete entity removal (i.e.: entity removed from Engine) collectionName is not passed\n     */\n    onEntityRemoved(entity, deletedComponents, collectionName) {\n    }\n    getComponentFrom(entity$1, key) {\n        // @ts-ignore\n        return entity$1[key] || entity$1[entity.DELETED_PROPS].get(key);\n    }\n}\nexports.System = System;\nexports.isSystem = (system) => {\n    return system instanceof System;\n};\n\n});\n\nvar simplifiedSystem = createCommonjsModule(function (module, exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\n\nexports.dummyUpdateMethod = (dt) => {\n};\n/**\n * Used for simplified handler declaration via engine.add()\n */\nclass SimplifiedSystem extends system.System {\n    constructor(update, requirements = null) {\n        super(requirements);\n        this._updateHandler = exports.dummyUpdateMethod;\n        this.update = (dt) => {\n            this._updateHandler(dt);\n        };\n        this._updateHandler = update;\n        this.requirements = requirements;\n    }\n}\nexports.SimplifiedSystem = SimplifiedSystem;\n\n});\n\nvar engine = createCommonjsModule(function (module, exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\n\n\n\nclass Engine {\n    constructor(options = {}) {\n        this._systems = [];\n        this._entitiesStore = new Set();\n        this._dt = 0;\n        this._entitiesRefreshQueue = new Set();\n        this._entitiesToAddQueue = new Set();\n        this._watchedProperties = new Set();\n        this.entityIdCounter = 1;\n        this.options = {\n            lazyEntityRefresh: true,\n            lazyEntityAdd: false,\n            deleteVoidProps: false,\n            ...options\n        };\n        this.add = this.add.bind(this);\n    }\n    get entities() {\n        return this._entitiesStore;\n    }\n    get dt() {\n        return this._dt;\n    }\n    getNextEntityID() { return this.entityIdCounter++; }\n    /**\n     * Runs all registered systems with provided time delta value\n     */\n    update(dt) {\n        this._dt = dt;\n        this.processAddQueue();\n        this.processChangedQueue();\n        for (const system of this._systems) {\n            this.updateSystem(system);\n        }\n    }\n    ;\n    updateSystem(system) {\n        if (!system.enabled || !system.isQualifiedForUpdate())\n            return;\n        try {\n            system.update(this._dt);\n        }\n        catch (err) {\n            console.error(err);\n            system.enabled = false;\n        }\n    }\n    add(obj = {}, ...args) {\n        if (obj instanceof Array) {\n            return obj.map(x => this.add(x));\n        }\n        if (obj instanceof Promise) {\n            // @ts-ignore\n            return obj.then(x => this.add(x));\n        }\n        if (obj instanceof system.System) {\n            return this.addSystem(obj);\n        }\n        else if (typeof obj === 'function') {\n            if (Engine.isSystemConstructor(obj)) {\n                return this.addSystemClass(obj, ...args);\n            }\n            else { // handler function\n                const [requirements] = args;\n                return this.addHandler(obj, requirements);\n            }\n        }\n        else {\n            return this.addEntity(obj);\n        }\n    }\n    addEntity(candidate) {\n        if (!candidate) {\n            candidate = {};\n        }\n        const entity$1 = entity.getEntity(candidate);\n        if (this._entitiesStore.has(entity$1) || this._entitiesToAddQueue.has(entity$1)) {\n            return entity$1;\n        }\n        const preAssignedEngine = entity$1[entity.ENGINE];\n        if (preAssignedEngine && preAssignedEngine !== this) {\n            preAssignedEngine.removeEntity(entity$1);\n        }\n        entity$1[entity.ENGINE] = this;\n        entity$1[entity.ENTITY_ID] = this.getNextEntityID();\n        if (this.options.lazyEntityAdd) {\n            this._entitiesToAddQueue.add(entity$1);\n        }\n        else {\n            this._entitiesStore.add(entity$1);\n            this._markEntityChanged(entity$1);\n        }\n        return entity$1;\n    }\n    addHandler(updateFn, requirements) {\n        const system = new simplifiedSystem.SimplifiedSystem(updateFn, requirements);\n        return this.addSystem(system);\n    }\n    addSystemClass(Class, ...args) {\n        return this.addSystem(new Class(...args));\n    }\n    addSystem(system) {\n        system.setEngine(this);\n        system.initialize();\n        this._systems.push(system);\n        for (const entity of this._entitiesStore) {\n            system.refreshEntityStatus(entity);\n        }\n        this._systems.sort((a, b) => {\n            return a.priority - b.priority;\n        });\n        return system;\n    }\n    processAddQueue() {\n        for (const entity of this._entitiesToAddQueue) {\n            this.entities.add(entity);\n            this._markEntityChanged(entity);\n        }\n        this._entitiesToAddQueue.clear();\n    }\n    /**\n     * Marks entity for affiliation state refresh.\n     * Performs refresh immediately or postponed when options.lazyEntityRefresh === true\n     */\n    _markEntityChanged(entity$1, lazy = this.options.lazyEntityRefresh) {\n        entity$1 = entity.getEntity(entity$1);\n        if (lazy) {\n            this._entitiesRefreshQueue.add(entity$1);\n        }\n        else {\n            this.refreshEntity(entity$1);\n        }\n    }\n    processChangedQueue() {\n        for (const entity of this._entitiesRefreshQueue) {\n            this.refreshEntity(entity);\n        }\n    }\n    /**\n     * Watched property will trigger _markEntityChanged() on it's value set.\n     * Warn: setting the same value also triggers the behavior\n     */\n    addWatchedProperty(prop) {\n        this._watchedProperties.add(prop);\n    }\n    removeWatchedProperty(prop) {\n        this._watchedProperties.delete(prop);\n    }\n    isWatchedProperty(prop) {\n        return this._watchedProperties.has(prop);\n    }\n    /**\n     * Recalculates entity affiliation to systems\n     */\n    refreshEntity(entity$1) {\n        var _a, _b;\n        entity$1 = entity.getEntity(entity$1);\n        this._entitiesRefreshQueue.delete(entity$1);\n        for (const system of this._systems) {\n            system.refreshEntityStatus(entity$1);\n        }\n        if ((_a = entity$1[entity.DELETED_PROPS]) === null || _a === void 0 ? void 0 : _a.size) {\n            (_b = entity$1[entity.DELETED_PROPS]) === null || _b === void 0 ? void 0 : _b.clear();\n        }\n    }\n    removeEntity(entity$1) {\n        entity$1 = entity.getEntity(entity$1);\n        this._entitiesStore.delete(entity$1);\n        this._entitiesRefreshQueue.delete(entity$1);\n        this._entitiesToAddQueue.delete(entity$1);\n        delete entity$1[entity.ENGINE];\n        for (const system of this._systems) {\n            system.removeEntity(entity$1);\n        }\n    }\n    removeSystem(system) {\n        const index = this._systems.indexOf(system);\n        this._systems.splice(index, 1);\n    }\n    static isSystemConstructor(fn) {\n        return fn.prototype instanceof system.System;\n    }\n}\nexports.Engine = Engine;\n\n});\n\nvar lib = createCommonjsModule(function (module, exports) {\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(engine);\n__export(system);\n__export(entity);\n__export(simplifiedSystem);\n\n});\n\nvar ENGINE = lib.ENGINE;\nvar Engine = lib.Engine;\nvar System = lib.System;\nexport { ENGINE, Engine, System };\n", "\nexport const allocObj = () => ({});\nexport const allocArray = () => [];\n\n/**\n * Used to reduce allocations\n * @param keyObj {object|Array}\n * @param storage {Map|WeakMap}\n * @param ctor {function}\n */\nexport const get_alloc_bucket = (keyObj, storage, ctor = allocObj) => {\n  if (!storage.has(keyObj)) {\n    storage.set(keyObj, ctor(keyObj));\n  }\n  return storage.get(keyObj);\n};\n", "export const get_seconds_precise = () => {\n  return (window.performance.now() / 1000);\n}\n", "import { allocArray, allocObj, get_alloc_bucket } from './alloc.js';\nimport { get_seconds_precise } from './micro-time.js';\n\n\nexport class PerfMeasurer {\n\n  constructor (slot_count = 120) {\n    this.slot_count = slot_count;\n  }\n\n  idx = 0;\n  items = new Map;\n  starts = new Map;\n\n  getSlot (key) {\n    if (!this.items.has(key)) {\n      const slot = this._createSlot();\n      this.items.set(key, slot);\n      return slot;\n    }\n\n    return this.items.get(key);\n  }\n\n  _createSlot () {\n    return new Array(this.slot_count).fill(0);\n  }\n\n  start (key) {\n    this.starts.set(key, get_seconds_precise());\n  }\n\n  end (key) {\n    this.markPerf(key, get_seconds_precise() - this.starts.get(key));\n  }\n\n  markPerf (key, val) {\n    this.getSlot(key)[this.idx] = val;\n  }\n\n  markCycle () {\n    this.idx = (this.idx + 1) % this.slot_count;\n  }\n\n  _cache = new WeakMap;\n  _sum = (sum, x) => sum + x;\n\n  collect () {\n    const arr = get_alloc_bucket(this, this._cache, allocArray);\n\n    for (const [name, slot] of this.items.entries()) {\n      const info = get_alloc_bucket(slot, this._cache, allocObj);\n      info.name = name;\n      info.sum = slot.reduce(this._sum, 0);\n      info.avg = info.sum / slot.length;\n\n      if (!arr.includes(info)) arr.push(info);\n    }\n\n    arr.sort((a, b) => b.avg - a.avg);\n\n    return arr;\n  }\n\n}\n\n\n", "import { Engine, System } from './_snowpack/pkg/eaciest.js';\nimport { PerfMeasurer } from './utils/perf-measurer.js';\n\n\nconst LastSystemCallUpdate = Symbol('Last system update');\n\nexport class LDEngine extends Engine {\n  persistentQuery (query) {\n    const system = super.addSystem(new System(query));\n    return system.entities;\n  }\n\n  query (query, cb) {\n    const system = super.addSystem(new System(query));\n    if (typeof cb === 'function') {\n      cb(system.entities);\n    }\n    super.removeSystem(system);\n    return system.entities;\n  }\n\n  hook (query) {\n    const system = new System(query);\n\n    return {\n      /**\n       * @param event {string}\n       * @param handler {function}\n       */\n      on (event, handler) {\n        system[event] = handler;\n        return this;\n      },\n\n      execute: () => {\n        this.addSystem(system);\n      },\n\n      cleanup: () => {\n        this.removeSystem(system);\n      },\n\n      system,\n    };\n  }\n\n  perf = new PerfMeasurer();\n\n  updateSystem (system) {\n    const key = system.constructor?.name || system;\n\n    if (system.interval) {\n      if (!system[LastSystemCallUpdate] || this.time - system[LastSystemCallUpdate] >= system.interval * 1000) {\n        system[LastSystemCallUpdate] = this.time;\n      } else {\n        this.perf.markPerf(key, 0);\n        return;\n      }\n    }\n\n    this.perf.start(key);\n    super.updateSystem(system);\n    this.perf.end(key);\n  }\n\n}\n", "/**\n * @license\n * Copyright 2010-2021 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\nconst REVISION = '133';\nconst CullFaceNone = 0;\nconst CullFaceBack = 1;\nconst CullFaceFront = 2;\nconst PCFShadowMap = 1;\nconst PCFSoftShadowMap = 2;\nconst VSMShadowMap = 3;\nconst FrontSide = 0;\nconst BackSide = 1;\nconst DoubleSide = 2;\nconst FlatShading = 1;\nconst NoBlending = 0;\nconst NormalBlending = 1;\nconst AdditiveBlending = 2;\nconst SubtractiveBlending = 3;\nconst MultiplyBlending = 4;\nconst CustomBlending = 5;\nconst AddEquation = 100;\nconst SubtractEquation = 101;\nconst ReverseSubtractEquation = 102;\nconst MinEquation = 103;\nconst MaxEquation = 104;\nconst ZeroFactor = 200;\nconst OneFactor = 201;\nconst SrcColorFactor = 202;\nconst OneMinusSrcColorFactor = 203;\nconst SrcAlphaFactor = 204;\nconst OneMinusSrcAlphaFactor = 205;\nconst DstAlphaFactor = 206;\nconst OneMinusDstAlphaFactor = 207;\nconst DstColorFactor = 208;\nconst OneMinusDstColorFactor = 209;\nconst SrcAlphaSaturateFactor = 210;\nconst NeverDepth = 0;\nconst AlwaysDepth = 1;\nconst LessDepth = 2;\nconst LessEqualDepth = 3;\nconst EqualDepth = 4;\nconst GreaterEqualDepth = 5;\nconst GreaterDepth = 6;\nconst NotEqualDepth = 7;\nconst MultiplyOperation = 0;\nconst MixOperation = 1;\nconst AddOperation = 2;\nconst NoToneMapping = 0;\nconst LinearToneMapping = 1;\nconst ReinhardToneMapping = 2;\nconst CineonToneMapping = 3;\nconst ACESFilmicToneMapping = 4;\nconst CustomToneMapping = 5;\n\nconst UVMapping = 300;\nconst CubeReflectionMapping = 301;\nconst CubeRefractionMapping = 302;\nconst EquirectangularReflectionMapping = 303;\nconst EquirectangularRefractionMapping = 304;\nconst CubeUVReflectionMapping = 306;\nconst CubeUVRefractionMapping = 307;\nconst RepeatWrapping = 1000;\nconst ClampToEdgeWrapping = 1001;\nconst MirroredRepeatWrapping = 1002;\nconst NearestFilter = 1003;\nconst NearestMipmapNearestFilter = 1004;\nconst NearestMipmapLinearFilter = 1005;\nconst LinearFilter = 1006;\nconst LinearMipmapNearestFilter = 1007;\nconst LinearMipmapLinearFilter = 1008;\nconst UnsignedByteType = 1009;\nconst ByteType = 1010;\nconst ShortType = 1011;\nconst UnsignedShortType = 1012;\nconst IntType = 1013;\nconst UnsignedIntType = 1014;\nconst FloatType = 1015;\nconst HalfFloatType = 1016;\nconst UnsignedShort4444Type = 1017;\nconst UnsignedShort5551Type = 1018;\nconst UnsignedShort565Type = 1019;\nconst UnsignedInt248Type = 1020;\nconst AlphaFormat = 1021;\nconst RGBFormat = 1022;\nconst RGBAFormat = 1023;\nconst LuminanceFormat = 1024;\nconst LuminanceAlphaFormat = 1025;\nconst RGBEFormat = RGBAFormat;\nconst DepthFormat = 1026;\nconst DepthStencilFormat = 1027;\nconst RedFormat = 1028;\nconst RedIntegerFormat = 1029;\nconst RGFormat = 1030;\nconst RGIntegerFormat = 1031;\nconst RGBIntegerFormat = 1032;\nconst RGBAIntegerFormat = 1033;\n\nconst RGB_S3TC_DXT1_Format = 33776;\nconst RGBA_S3TC_DXT1_Format = 33777;\nconst RGBA_S3TC_DXT3_Format = 33778;\nconst RGBA_S3TC_DXT5_Format = 33779;\nconst RGB_PVRTC_4BPPV1_Format = 35840;\nconst RGB_PVRTC_2BPPV1_Format = 35841;\nconst RGBA_PVRTC_4BPPV1_Format = 35842;\nconst RGBA_PVRTC_2BPPV1_Format = 35843;\nconst RGB_ETC1_Format = 36196;\nconst RGB_ETC2_Format = 37492;\nconst RGBA_ETC2_EAC_Format = 37496;\nconst RGBA_ASTC_4x4_Format = 37808;\nconst RGBA_ASTC_5x4_Format = 37809;\nconst RGBA_ASTC_5x5_Format = 37810;\nconst RGBA_ASTC_6x5_Format = 37811;\nconst RGBA_ASTC_6x6_Format = 37812;\nconst RGBA_ASTC_8x5_Format = 37813;\nconst RGBA_ASTC_8x6_Format = 37814;\nconst RGBA_ASTC_8x8_Format = 37815;\nconst RGBA_ASTC_10x5_Format = 37816;\nconst RGBA_ASTC_10x6_Format = 37817;\nconst RGBA_ASTC_10x8_Format = 37818;\nconst RGBA_ASTC_10x10_Format = 37819;\nconst RGBA_ASTC_12x10_Format = 37820;\nconst RGBA_ASTC_12x12_Format = 37821;\nconst RGBA_BPTC_Format = 36492;\nconst SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\nconst SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\nconst SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\nconst SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\nconst SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\nconst SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\nconst SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\nconst SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\nconst SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\nconst SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\nconst SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\nconst SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\nconst SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\nconst SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\nconst TrianglesDrawMode = 0;\nconst LinearEncoding = 3000;\nconst sRGBEncoding = 3001;\nconst GammaEncoding = 3007;\nconst RGBEEncoding = 3002;\nconst LogLuvEncoding = 3003;\nconst RGBM7Encoding = 3004;\nconst RGBM16Encoding = 3005;\nconst RGBDEncoding = 3006;\nconst BasicDepthPacking = 3200;\nconst RGBADepthPacking = 3201;\nconst TangentSpaceNormalMap = 0;\nconst ObjectSpaceNormalMap = 1;\nconst KeepStencilOp = 7680;\nconst AlwaysStencilFunc = 519;\n\nconst StaticDrawUsage = 35044;\nconst DynamicDrawUsage = 35048;\nconst GLSL3 = '300 es';\n\n/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\n\nclass EventDispatcher {\n\n\taddEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t}\n\n\thasEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return false;\n\n\t\tconst listeners = this._listeners;\n\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t}\n\n\tremoveEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tconst index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tdispatchEvent( event ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\tconst array = listenerArray.slice( 0 );\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t\tevent.target = null;\n\n\t\t}\n\n\t}\n\n}\n\nconst DEG2RAD = Math.PI / 180;\nconst RAD2DEG = 180 / Math.PI;\n\n//\n\nconst _lut = [];\n\nfor ( let i = 0; i < 256; i ++ ) {\n\n\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n}\n\nconst hasRandomUUID = typeof crypto !== 'undefined' && 'randomUUID' in crypto;\n\nfunction generateUUID() {\n\n\tif ( hasRandomUUID ) {\n\n\t\treturn crypto.randomUUID().toUpperCase();\n\n\t}\n\n\t// TODO Remove this code when crypto.randomUUID() is available everywhere\n\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\tconst d0 = Math.random() * 0xffffffff | 0;\n\tconst d1 = Math.random() * 0xffffffff | 0;\n\tconst d2 = Math.random() * 0xffffffff | 0;\n\tconst d3 = Math.random() * 0xffffffff | 0;\n\tconst uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\n\treturn uuid.toUpperCase();\n\n}\n\nfunction clamp( value, min, max ) {\n\n\treturn Math.max( min, Math.min( max, value ) );\n\n}\n\n// compute euclidian modulo of m % n\n// https://en.wikipedia.org/wiki/Modulo_operation\nfunction euclideanModulo( n, m ) {\n\n\treturn ( ( n % m ) + m ) % m;\n\n}\n\n// https://en.wikipedia.org/wiki/Linear_interpolation\nfunction lerp( x, y, t ) {\n\n\treturn ( 1 - t ) * x + t * y;\n\n}\n\nfunction isPowerOfTwo( value ) {\n\n\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n}\n\nfunction floorPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n}\n\nclass Vector2 {\n\n\tconstructor( x = 0, y = 0 ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t}\n\n\tget width() {\n\n\t\treturn this.x;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.x = value;\n\n\t}\n\n\tget height() {\n\n\t\treturn this.y;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.y = value;\n\n\t}\n\n\tset( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\treturn this;\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t}\n\n\tcross( v ) {\n\n\t\treturn this.x * v.y - this.y * v.x;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tangle() {\n\n\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\tconst angle = Math.atan2( - this.y, - this.x ) + Math.PI;\n\n\t\treturn angle;\n\n\t}\n\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t}\n\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\n\t\treturn this;\n\n\t}\n\n\trotateAround( center, angle ) {\n\n\t\tconst c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tconst x = this.x - center.x;\n\t\tconst y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\n\t}\n\n}\n\nVector2.prototype.isVector2 = true;\n\nclass Matrix3 {\n\n\tconstructor() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tset( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrix3Column( this, 0 );\n\t\tyAxis.setFromMatrix3Column( this, 1 );\n\t\tzAxis.setFromMatrix3Column( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrix4( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t}\n\n\tinvert() {\n\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],\n\t\t\tn12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],\n\t\t\tn13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],\n\n\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\tte[ 3 ] = t12 * detInv;\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\tte[ 6 ] = t13 * detInv;\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\ttranspose() {\n\n\t\tlet tmp;\n\t\tconst m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\tgetNormalMatrix( matrix4 ) {\n\n\t\treturn this.setFromMatrix4( matrix4 ).invert().transpose();\n\n\t}\n\n\ttransposeIntoArray( r ) {\n\n\t\tconst m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\tconst c = Math.cos( rotation );\n\t\tconst s = Math.sin( rotation );\n\n\t\tthis.set(\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tscale( sx, sy ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\treturn this;\n\n\t}\n\n\trotate( theta ) {\n\n\t\tconst c = Math.cos( theta );\n\t\tconst s = Math.sin( theta );\n\n\t\tconst te = this.elements;\n\n\t\tconst a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\tconst a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\tte[ 0 ] = c * a11 + s * a21;\n\t\tte[ 3 ] = c * a12 + s * a22;\n\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( tx, ty ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\treturn array;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t}\n\n}\n\nMatrix3.prototype.isMatrix3 = true;\n\nfunction arrayMax( array ) {\n\n\tif ( array.length === 0 ) return - Infinity;\n\n\tlet max = array[ 0 ];\n\n\tfor ( let i = 1, l = array.length; i < l; ++ i ) {\n\n\t\tif ( array[ i ] > max ) max = array[ i ];\n\n\t}\n\n\treturn max;\n\n}\n\nfunction createElementNS( name ) {\n\n\treturn document.createElementNS( 'http://www.w3.org/1999/xhtml', name );\n\n}\n\nlet _canvas;\n\nclass ImageUtils {\n\n\tstatic getDataURL( image ) {\n\n\t\tif ( /^data:/i.test( image.src ) ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tlet canvas;\n\n\t\tif ( image instanceof HTMLCanvasElement ) {\n\n\t\t\tcanvas = image;\n\n\t\t} else {\n\n\t\t\tif ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );\n\n\t\t\t_canvas.width = image.width;\n\t\t\t_canvas.height = image.height;\n\n\t\t\tconst context = _canvas.getContext( '2d' );\n\n\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t}\n\n\t\t\tcanvas = _canvas;\n\n\t\t}\n\n\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );\n\n\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t} else {\n\n\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t}\n\n\t}\n\n}\n\nlet textureId = 0;\n\nclass Texture extends EventDispatcher {\n\n\tconstructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding ) {\n\n\t\tsuper();\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.image = image;\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping;\n\n\t\tthis.wrapS = wrapS;\n\t\tthis.wrapT = wrapT;\n\n\t\tthis.magFilter = magFilter;\n\t\tthis.minFilter = minFilter;\n\n\t\tthis.anisotropy = anisotropy;\n\n\t\tthis.format = format;\n\t\tthis.internalFormat = null;\n\t\tthis.type = type;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding;\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t\tthis.isRenderTargetTexture = false;\n\n\t}\n\n\tupdateMatrix() {\n\n\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.image = source.image;\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\tthis.mapping = source.mapping;\n\n\t\tthis.wrapS = source.wrapS;\n\t\tthis.wrapT = source.wrapT;\n\n\t\tthis.magFilter = source.magFilter;\n\t\tthis.minFilter = source.minFilter;\n\n\t\tthis.anisotropy = source.anisotropy;\n\n\t\tthis.format = source.format;\n\t\tthis.internalFormat = source.internalFormat;\n\t\tthis.type = source.type;\n\n\t\tthis.offset.copy( source.offset );\n\t\tthis.repeat.copy( source.repeat );\n\t\tthis.center.copy( source.center );\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrix.copy( source.matrix );\n\n\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\tthis.flipY = source.flipY;\n\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\tthis.encoding = source.encoding;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t}\n\n\t\tconst output = {\n\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Texture',\n\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t},\n\n\t\t\tuuid: this.uuid,\n\t\t\tname: this.name,\n\n\t\t\tmapping: this.mapping,\n\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\trotation: this.rotation,\n\n\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\tformat: this.format,\n\t\t\ttype: this.type,\n\t\t\tencoding: this.encoding,\n\n\t\t\tminFilter: this.minFilter,\n\t\t\tmagFilter: this.magFilter,\n\t\t\tanisotropy: this.anisotropy,\n\n\t\t\tflipY: this.flipY,\n\n\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t};\n\n\t\tif ( this.image !== undefined ) {\n\n\t\t\t// TODO: Move to THREE.Image\n\n\t\t\tconst image = this.image;\n\n\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\timage.uuid = generateUUID(); // UGH\n\n\t\t\t}\n\n\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\tlet url;\n\n\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\t// process array of images e.g. CubeTexture\n\n\t\t\t\t\turl = [];\n\n\t\t\t\t\tfor ( let i = 0, l = image.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t// check cube texture with data textures\n\n\t\t\t\t\t\tif ( image[ i ].isDataTexture ) {\n\n\t\t\t\t\t\t\turl.push( serializeImage( image[ i ].image ) );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\turl.push( serializeImage( image[ i ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// process single image\n\n\t\t\t\t\turl = serializeImage( image );\n\n\t\t\t\t}\n\n\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\turl: url\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\toutput.image = image.uuid;\n\n\t\t}\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\ttransformUv( uv ) {\n\n\t\tif ( this.mapping !== UVMapping ) return uv;\n\n\t\tuv.applyMatrix3( this.matrix );\n\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.flipY ) {\n\n\t\t\tuv.y = 1 - uv.y;\n\n\t\t}\n\n\t\treturn uv;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n}\n\nTexture.DEFAULT_IMAGE = undefined;\nTexture.DEFAULT_MAPPING = UVMapping;\n\nTexture.prototype.isTexture = true;\n\nfunction serializeImage( image ) {\n\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t// default images\n\n\t\treturn ImageUtils.getDataURL( image );\n\n\t} else {\n\n\t\tif ( image.data ) {\n\n\t\t\t// images of DataTexture\n\n\t\t\treturn {\n\t\t\t\tdata: Array.prototype.slice.call( image.data ),\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height,\n\t\t\t\ttype: image.data.constructor.name\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Texture: Unable to serialize Texture.' );\n\t\t\treturn {};\n\n\t\t}\n\n\t}\n\n}\n\nclass Vector4 {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t}\n\n\tget width() {\n\n\t\treturn this.z;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.z = value;\n\n\t}\n\n\tget height() {\n\n\t\treturn this.w;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.w = value;\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetW( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\t\tthis.w *= v.w;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\tthis.w *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tsetAxisAngleFromQuaternion( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tconst s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\tthis.x = 1;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t} else {\n\n\t\t\tthis.x = q.x / s;\n\t\t\tthis.y = q.y / s;\n\t\t\tthis.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetAxisAngleFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tlet angle, x, y, z; // variables for result\n\t\tconst epsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tconst xx = ( m11 + 1 ) / 2;\n\t\t\tconst yy = ( m22 + 1 ) / 2;\n\t\t\tconst zz = ( m33 + 1 ) / 2;\n\t\t\tconst xy = ( m12 + m21 ) / 4;\n\t\t\tconst xz = ( m13 + m31 ) / 4;\n\t\t\tconst yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tlet s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\t\tthis.w = v1.w + ( v2.w - v1.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\t\tthis.w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\t\tthis.w = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\t\tyield this.w;\n\n\t}\n\n}\n\nVector4.prototype.isVector4 = true;\n\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\nclass WebGLRenderTarget extends EventDispatcher {\n\n\tconstructor( width, height, options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.depth = 1;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\tthis.texture = new Texture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\tthis.texture.image = { width: width, height: height, depth: 1 };\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t}\n\n\tsetTexture( texture ) {\n\n\t\ttexture.image = {\n\t\t\twidth: this.width,\n\t\t\theight: this.height,\n\t\t\tdepth: this.depth\n\t\t};\n\n\t\tthis.texture = texture;\n\n\t}\n\n\tsetSize( width, height, depth = 1 ) {\n\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = depth;\n\n\t\t\tthis.texture.image.width = width;\n\t\t\tthis.texture.image.height = height;\n\t\t\tthis.texture.image.depth = depth;\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\t\tthis.depth = source.depth;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.texture = source.texture.clone();\n\t\tthis.texture.image = { ...this.texture.image }; // See #20328.\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\tthis.depthTexture = source.depthTexture;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nWebGLRenderTarget.prototype.isWebGLRenderTarget = true;\n\nclass WebGLMultisampleRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( width, height, options ) {\n\n\t\tsuper( width, height, options );\n\n\t\tthis.samples = 4;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy.call( this, source );\n\n\t\tthis.samples = source.samples;\n\n\t\treturn this;\n\n\t}\n\n}\n\nWebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget = true;\n\nclass Quaternion {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t}\n\n\tstatic slerp( qa, qb, qm, t ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.' );\n\t\treturn qm.slerpQuaternions( qa, qb, t );\n\n\t}\n\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( t === 0 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( t === 1 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x1;\n\t\t\tdst[ dstOffset + 1 ] = y1;\n\t\t\tdst[ dstOffset + 2 ] = z1;\n\t\t\tdst[ dstOffset + 3 ] = w1;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tlet s = 1 - t;\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tconst tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\n\n\t\tconst x0 = src0[ srcOffset0 ];\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 ];\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\n\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\n\t\treturn dst;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget w() {\n\n\t\treturn this._w;\n\n\t}\n\n\tset w( value ) {\n\n\t\tthis._w = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t}\n\n\tcopy( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromEuler( euler, update ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\n\t\tconst c1 = cos( x / 2 );\n\t\tconst c2 = cos( y / 2 );\n\t\tconst c3 = cos( z / 2 );\n\n\t\tconst s1 = sin( x / 2 );\n\t\tconst s2 = sin( y / 2 );\n\t\tconst s3 = sin( z / 2 );\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tif ( update !== false ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAxisAngle( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromUnitVectors( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tlet r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < Number.EPSILON ) {\n\n\t\t\t// vFrom and vTo point in opposite directions\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t}\n\n\tangleTo( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t}\n\n\trotateTowards( q, step ) {\n\n\t\tconst angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) return this;\n\n\t\tconst t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\treturn this.set( 0, 0, 0, 1 );\n\n\t}\n\n\tinvert() {\n\n\t\t// quaternion is assumed to have unit length\n\n\t\treturn this.conjugate();\n\n\t}\n\n\tconjugate() {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t}\n\n\tnormalize() {\n\n\t\tlet l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t}\n\n\tpremultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t}\n\n\tmultiplyQuaternions( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerp( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tconst s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\tthis.normalize();\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerpQuaternions( qa, qb, t ) {\n\n\t\tthis.copy( qa ).slerp( qb, t );\n\n\t}\n\n\trandom() {\n\n\t\t// Derived from http://planning.cs.uiuc.edu/node198.html\n\t\t// Note, this source uses w, x, y, z ordering,\n\t\t// so we swap the order below.\n\n\t\tconst u1 = Math.random();\n\t\tconst sqrt1u1 = Math.sqrt( 1 - u1 );\n\t\tconst sqrtu1 = Math.sqrt( u1 );\n\n\t\tconst u2 = 2 * Math.PI * Math.random();\n\n\t\tconst u3 = 2 * Math.PI * Math.random();\n\n\t\treturn this.set(\n\t\t\tsqrt1u1 * Math.cos( u2 ),\n\t\t\tsqrtu1 * Math.sin( u3 ),\n\t\t\tsqrtu1 * Math.cos( u3 ),\n\t\t\tsqrt1u1 * Math.sin( u2 ),\n\t\t);\n\n\t}\n\n\tequals( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis._x = attribute.getX( index );\n\t\tthis._y = attribute.getY( index );\n\t\tthis._z = attribute.getZ( index );\n\t\tthis._w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n}\n\nQuaternion.prototype.isQuaternion = true;\n\nclass Vector3 {\n\n\tconstructor( x = 0, y = 0, z = 0 ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t}\n\n\tset( x, y, z ) {\n\n\t\tif ( z === undefined ) z = this.z; // sprite.scale.set(x,y)\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t}\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyVectors( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t}\n\n\tapplyEuler( euler ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );\n\n\t}\n\n\tapplyAxisAngle( axis, angle ) {\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\treturn this.applyMatrix3( m ).normalize();\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tconst w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\treturn this;\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// calculate quat * vector\n\n\t\tconst ix = qw * x + qy * z - qz * y;\n\t\tconst iy = qw * y + qz * x - qx * z;\n\t\tconst iz = qw * z + qx * y - qy * x;\n\t\tconst iw = - qx * x - qy * y - qz * z;\n\n\t\t// calculate result * inverse quat\n\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\treturn this;\n\n\t}\n\n\tproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t}\n\n\tunproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t}\n\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t}\n\n\t// TODO lengthSquared?\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tcross( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\treturn this.crossVectors( v, w );\n\n\t\t}\n\n\t\treturn this.crossVectors( this, v );\n\n\t}\n\n\tcrossVectors( a, b ) {\n\n\t\tconst ax = a.x, ay = a.y, az = a.z;\n\t\tconst bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t}\n\n\tprojectOnVector( v ) {\n\n\t\tconst denominator = v.lengthSq();\n\n\t\tif ( denominator === 0 ) return this.set( 0, 0, 0 );\n\n\t\tconst scalar = v.dot( this ) / denominator;\n\n\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t}\n\n\tprojectOnPlane( planeNormal ) {\n\n\t\t_vector$c.copy( this ).projectOnVector( planeNormal );\n\n\t\treturn this.sub( _vector$c );\n\n\t}\n\n\treflect( normal ) {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\treturn this.sub( _vector$c.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t}\n\n\tangleTo( v ) {\n\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) return Math.PI / 2;\n\n\t\tconst theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( clamp( theta, - 1, 1 ) );\n\n\t}\n\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t}\n\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t}\n\n\tsetFromSpherical( s ) {\n\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t}\n\n\tsetFromSphericalCoords( radius, phi, theta ) {\n\n\t\tconst sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\tthis.y = Math.cos( phi ) * radius;\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCylindrical( c ) {\n\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t}\n\n\tsetFromCylindricalCoords( radius, theta, y ) {\n\n\t\tthis.x = radius * Math.sin( theta );\n\t\tthis.y = y;\n\t\tthis.z = radius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixPosition( m ) {\n\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixScale( m ) {\n\n\t\tconst sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tconst sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tconst sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixColumn( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t}\n\n\tsetFromMatrix3Column( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\trandomDirection() {\n\n\t\t// Derived from https://mathworld.wolfram.com/SpherePointPicking.html\n\n\t\tconst u = ( Math.random() - 0.5 ) * 2;\n\t\tconst t = Math.random() * Math.PI * 2;\n\t\tconst f = Math.sqrt( 1 - u ** 2 );\n\n\t\tthis.x = f * Math.cos( t );\n\t\tthis.y = f * Math.sin( t );\n\t\tthis.z = u;\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\n\t}\n\n}\n\nVector3.prototype.isVector3 = true;\n\nconst _vector$c = /*@__PURE__*/ new Vector3();\nconst _quaternion$4 = /*@__PURE__*/ new Quaternion();\n\nclass Box3 {\n\n\tconstructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromArray( array ) {\n\n\t\tlet minX = + Infinity;\n\t\tlet minY = + Infinity;\n\t\tlet minZ = + Infinity;\n\n\t\tlet maxX = - Infinity;\n\t\tlet maxY = - Infinity;\n\t\tlet maxZ = - Infinity;\n\n\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tconst x = array[ i ];\n\t\t\tconst y = array[ i + 1 ];\n\t\t\tconst z = array[ i + 2 ];\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromBufferAttribute( attribute ) {\n\n\t\tlet minX = + Infinity;\n\t\tlet minY = + Infinity;\n\t\tlet minZ = + Infinity;\n\n\t\tlet maxX = - Infinity;\n\t\tlet maxY = - Infinity;\n\t\tlet maxZ = - Infinity;\n\n\t\tfor ( let i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\tconst x = attribute.getX( i );\n\t\t\tconst y = attribute.getY( i );\n\t\t\tconst z = attribute.getZ( i );\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$b.copy( size ).multiplyScalar( 0.5 );\n\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromObject( object ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\texpandByObject( object ) {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry !== undefined ) {\n\n\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\t_box$3.copy( geometry.boundingBox );\n\t\t\t_box$3.applyMatrix4( object.matrixWorld );\n\n\t\t\tthis.union( _box$3 );\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis.expandByObject( children[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\t// Find the point on the AABB closest to the sphere center.\n\t\tthis.clampPoint( sphere.center, _vector$b );\n\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\treturn _vector$b.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tlet min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t}\n\n\tintersectsTriangle( triangle ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compute box center and extents\n\t\tthis.getCenter( _center );\n\t\t_extents.subVectors( this.max, _center );\n\n\t\t// translate triangle to aabb origin\n\t\t_v0$2.subVectors( triangle.a, _center );\n\t\t_v1$7.subVectors( triangle.b, _center );\n\t\t_v2$3.subVectors( triangle.c, _center );\n\n\t\t// compute edge vectors for triangle\n\t\t_f0.subVectors( _v1$7, _v0$2 );\n\t\t_f1.subVectors( _v2$3, _v1$7 );\n\t\t_f2.subVectors( _v0$2, _v2$3 );\n\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\tlet axes = [\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// test 3 face normals from the aabb\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// finally testing the face normal of the triangle\n\t\t// use already existing triangle edge vectors here\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\treturn satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents );\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\tconst clampedPoint = _vector$b.copy( point ).clamp( this.min, this.max );\n\n\t\treturn clampedPoint.sub( point ).length();\n\n\t}\n\n\tgetBoundingSphere( target ) {\n\n\t\tthis.getCenter( target.center );\n\n\t\ttarget.radius = this.getSize( _vector$b ).length() * 0.5;\n\n\t\treturn target;\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\t// transform of empty box is an empty box.\n\t\tif ( this.isEmpty() ) return this;\n\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\tthis.setFromPoints( _points );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nBox3.prototype.isBox3 = true;\n\nconst _points = [\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3()\n];\n\nconst _vector$b = /*@__PURE__*/ new Vector3();\n\nconst _box$3 = /*@__PURE__*/ new Box3();\n\n// triangle centered vertices\n\nconst _v0$2 = /*@__PURE__*/ new Vector3();\nconst _v1$7 = /*@__PURE__*/ new Vector3();\nconst _v2$3 = /*@__PURE__*/ new Vector3();\n\n// triangle edge vectors\n\nconst _f0 = /*@__PURE__*/ new Vector3();\nconst _f1 = /*@__PURE__*/ new Vector3();\nconst _f2 = /*@__PURE__*/ new Vector3();\n\nconst _center = /*@__PURE__*/ new Vector3();\nconst _extents = /*@__PURE__*/ new Vector3();\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\nconst _testAxis = /*@__PURE__*/ new Vector3();\n\nfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t_testAxis.fromArray( axes, i );\n\t\t// project the aabb onto the seperating axis\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\tconst p0 = v0.dot( _testAxis );\n\t\tconst p1 = v1.dot( _testAxis );\n\t\tconst p2 = v2.dot( _testAxis );\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t// the axis is seperating and we can exit\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nconst _box$2 = /*@__PURE__*/ new Box3();\nconst _v1$6 = /*@__PURE__*/ new Vector3();\nconst _toFarthestPoint = /*@__PURE__*/ new Vector3();\nconst _toPoint = /*@__PURE__*/ new Vector3();\n\nclass Sphere {\n\n\tconstructor( center = new Vector3(), radius = - 1 ) {\n\n\t\tthis.center = center;\n\t\tthis.radius = radius;\n\n\t}\n\n\tset( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points, optionalCenter ) {\n\n\t\tconst center = this.center;\n\n\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\tcenter.copy( optionalCenter );\n\n\t\t} else {\n\n\t\t\t_box$2.setFromPoints( points ).getCenter( center );\n\n\t\t}\n\n\t\tlet maxRadiusSq = 0;\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t}\n\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\treturn ( this.radius < 0 );\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.center.set( 0, 0, 0 );\n\t\tthis.radius = - 1;\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\tconst deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\ttarget.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\ttarget.sub( this.center ).normalize();\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tgetBoundingBox( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\t// Empty sphere produces empty bounding box\n\t\t\ttarget.makeEmpty();\n\t\t\treturn target;\n\n\t\t}\n\n\t\ttarget.set( this.center, this.center );\n\t\ttarget.expandByScalar( this.radius );\n\n\t\treturn target;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671\n\n\t\t_toPoint.subVectors( point, this.center );\n\n\t\tconst lengthSq = _toPoint.lengthSq();\n\n\t\tif ( lengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\tconst length = Math.sqrt( lengthSq );\n\t\t\tconst missingRadiusHalf = ( length - this.radius ) * 0.5;\n\n\t\t\t// Nudge this sphere towards the target point. Add half the missing distance to radius,\n\t\t\t// and the other half to position. This gives a tighter enclosure, instead of if\n\t\t\t// the whole missing distance were just added to radius.\n\n\t\t\tthis.center.add( _toPoint.multiplyScalar( missingRadiusHalf / length ) );\n\t\t\tthis.radius += missingRadiusHalf;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tunion( sphere ) {\n\n\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769\n\n\t\t// To enclose another sphere into this sphere, we only need to enclose two points:\n\t\t// 1) Enclose the farthest point on the other sphere into this sphere.\n\t\t// 2) Enclose the opposite point of the farthest point into this sphere.\n\n\t\t_toFarthestPoint.subVectors( sphere.center, this.center ).normalize().multiplyScalar( sphere.radius );\n\n\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).add( _toFarthestPoint ) );\n\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).sub( _toFarthestPoint ) );\n\n\t\treturn this;\n\n\t}\n\n\tequals( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$a = /*@__PURE__*/ new Vector3();\nconst _segCenter = /*@__PURE__*/ new Vector3();\nconst _segDir = /*@__PURE__*/ new Vector3();\nconst _diff = /*@__PURE__*/ new Vector3();\n\nconst _edge1 = /*@__PURE__*/ new Vector3();\nconst _edge2 = /*@__PURE__*/ new Vector3();\nconst _normal$1 = /*@__PURE__*/ new Vector3();\n\nclass Ray {\n\n\tconstructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {\n\n\t\tthis.origin = origin;\n\t\tthis.direction = direction;\n\n\t}\n\n\tset( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t}\n\n\tat( t, target ) {\n\n\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t}\n\n\tlookAt( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\trecast( t ) {\n\n\t\tthis.origin.copy( this.at( t, _vector$a ) );\n\n\t\treturn this;\n\n\t}\n\n\tclosestPointToPoint( point, target ) {\n\n\t\ttarget.subVectors( point, this.origin );\n\n\t\tconst directionDistance = target.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn target.copy( this.origin );\n\n\t\t}\n\n\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t}\n\n\tdistanceSqToPoint( point ) {\n\n\t\tconst directionDistance = _vector$a.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t// point behind the ray\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t}\n\n\t\t_vector$a.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\treturn _vector$a.distanceToSquared( point );\n\n\t}\n\n\tdistanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t// It returns the min distance between the ray and the segment\n\t\t// defined by v0 and v1\n\t\t// It can also set two optional targets :\n\t\t// - The closest point on the ray\n\t\t// - The closest point on the segment\n\n\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\tconst segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\tconst a01 = - this.direction.dot( _segDir );\n\t\tconst b0 = _diff.dot( this.direction );\n\t\tconst b1 = - _diff.dot( _segDir );\n\t\tconst c = _diff.lengthSq();\n\t\tconst det = Math.abs( 1 - a01 * a01 );\n\t\tlet s0, s1, sqrDist, extDet;\n\n\t\tif ( det > 0 ) {\n\n\t\t\t// The ray and segment are not parallel.\n\n\t\t\ts0 = a01 * b1 - b0;\n\t\t\ts1 = a01 * b0 - b1;\n\t\t\textDet = segExtent * det;\n\n\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 5\n\n\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t// region 4\n\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t// region 3\n\n\t\t\t\t\ts0 = 0;\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 2\n\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Ray and segment are parallel.\n\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t}\n\n\t\tif ( optionalPointOnRay ) {\n\n\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t}\n\n\t\tif ( optionalPointOnSegment ) {\n\n\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\n\n\t\t}\n\n\t\treturn sqrDist;\n\n\t}\n\n\tintersectSphere( sphere, target ) {\n\n\t\t_vector$a.subVectors( sphere.center, this.origin );\n\t\tconst tca = _vector$a.dot( this.direction );\n\t\tconst d2 = _vector$a.dot( _vector$a ) - tca * tca;\n\t\tconst radius2 = sphere.radius * sphere.radius;\n\n\t\tif ( d2 > radius2 ) return null;\n\n\t\tconst thc = Math.sqrt( radius2 - d2 );\n\n\t\t// t0 = first intersect point - entrance on front of sphere\n\t\tconst t0 = tca - thc;\n\n\t\t// t1 = second intersect point - exit point on back of sphere\n\t\tconst t1 = tca + thc;\n\n\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t// test to see if t0 is behind the ray:\n\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t// in order to always return an intersect point that is in front of the ray.\n\t\tif ( t0 < 0 ) return this.at( t1, target );\n\n\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\treturn this.at( t0, target );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tdistanceToPlane( plane ) {\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t : null;\n\n\t}\n\n\tintersectPlane( plane, target ) {\n\n\t\tconst t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, target );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tconst distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t}\n\n\tintersectBox( box, target ) {\n\n\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tconst invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tconst origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn this.intersectBox( box, _vector$a ) !== null;\n\n\t}\n\n\tintersectTriangle( a, b, c, backfaceCulling, target ) {\n\n\t\t// Compute the offset origin, edges, and normal.\n\n\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t_edge1.subVectors( b, a );\n\t\t_edge2.subVectors( c, a );\n\t\t_normal$1.crossVectors( _edge1, _edge2 );\n\n\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\tlet DdN = this.direction.dot( _normal$1 );\n\t\tlet sign;\n\n\t\tif ( DdN > 0 ) {\n\n\t\t\tif ( backfaceCulling ) return null;\n\t\t\tsign = 1;\n\n\t\t} else if ( DdN < 0 ) {\n\n\t\t\tsign = - 1;\n\t\t\tDdN = - DdN;\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t_diff.subVectors( this.origin, a );\n\t\tconst DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t// b1 < 0, no intersection\n\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t// b2 < 0, no intersection\n\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// b1+b2 > 1, no intersection\n\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Line intersects triangle, check if ray does.\n\t\tconst QdN = - sign * _diff.dot( _normal$1 );\n\n\t\t// t < 0, no intersection\n\t\tif ( QdN < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Ray intersects triangle.\n\t\treturn this.at( QdN / DdN, target );\n\n\t}\n\n\tapplyMatrix4( matrix4 ) {\n\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.transformDirection( matrix4 );\n\n\t\treturn this;\n\n\t}\n\n\tequals( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nclass Matrix4 {\n\n\tconstructor() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tset( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Matrix4().fromArray( this.elements );\n\n\t}\n\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\treturn this;\n\n\t}\n\n\tcopyPosition( m ) {\n\n\t\tconst te = this.elements, me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrix3( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ], 0,\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ], 0,\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ], 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\tmakeBasis( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\textractRotation( m ) {\n\n\t\t// this method does not support reflection matrices\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tconst scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();\n\t\tconst scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();\n\t\tconst scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();\n\n\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationFromEuler( euler ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tconst te = this.elements;\n\n\t\tconst x = euler.x, y = euler.y, z = euler.z;\n\t\tconst a = Math.cos( x ), b = Math.sin( x );\n\t\tconst c = Math.cos( y ), d = Math.sin( y );\n\t\tconst e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// bottom row\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// last column\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationFromQuaternion( q ) {\n\n\t\treturn this.compose( _zero, q, _one );\n\n\t}\n\n\tlookAt( eye, target, up ) {\n\n\t\tconst te = this.elements;\n\n\t\t_z.subVectors( eye, target );\n\n\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t// eye and target are in the same position\n\n\t\t\t_z.z = 1;\n\n\t\t}\n\n\t\t_z.normalize();\n\t\t_x.crossVectors( up, _z );\n\n\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t// up and z are parallel\n\n\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t_z.x += 0.0001;\n\n\t\t\t} else {\n\n\t\t\t\t_z.z += 0.0001;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t}\n\n\t\t_x.normalize();\n\t\t_y.crossVectors( _z, _x );\n\n\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( m, n ) {\n\n\t\tif ( n !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t}\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tconst a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tconst b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tconst n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tconst n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tconst n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t}\n\n\ttranspose() {\n\n\t\tconst te = this.elements;\n\t\tlet tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\tsetPosition( x, y, z ) {\n\n\t\tconst te = this.elements;\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\tte[ 12 ] = x.x;\n\t\t\tte[ 13 ] = x.y;\n\t\t\tte[ 14 ] = x.z;\n\n\t\t} else {\n\n\t\t\tte[ 12 ] = x;\n\t\t\tte[ 13 ] = y;\n\t\t\tte[ 14 ] = z;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tinvert() {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],\n\t\t\tn12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],\n\t\t\tn13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],\n\t\t\tn14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\tscale( v ) {\n\n\t\tconst te = this.elements;\n\t\tconst x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t}\n\n\tgetMaxScaleOnAxis() {\n\n\t\tconst te = this.elements;\n\n\t\tconst scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tconst scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tconst scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t}\n\n\tmakeTranslation( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, x,\n\t\t\t0, 1, 0, y,\n\t\t\t0, 0, 1, z,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationX( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s, c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationY( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationZ( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts, c, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationAxis( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tconst c = Math.cos( angle );\n\t\tconst s = Math.sin( angle );\n\t\tconst t = 1 - c;\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\n\t\tconst tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeScale( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeShear( xy, xz, yx, yz, zx, zy ) {\n\n\t\tthis.set(\n\n\t\t\t1, yx, zx, 0,\n\t\t\txy, 1, zy, 0,\n\t\t\txz, yz, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tcompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\tconst x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\tconst xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tconst yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tconst wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tconst sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = position.x;\n\t\tte[ 13 ] = position.y;\n\t\tte[ 14 ] = position.z;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tdecompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tlet sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\tconst sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\tconst sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t// if determine is negative, we need to invert one scale\n\t\tconst det = this.determinant();\n\t\tif ( det < 0 ) sx = - sx;\n\n\t\tposition.x = te[ 12 ];\n\t\tposition.y = te[ 13 ];\n\t\tposition.z = te[ 14 ];\n\n\t\t// scale the rotation part\n\t\t_m1$2.copy( this );\n\n\t\tconst invSX = 1 / sx;\n\t\tconst invSY = 1 / sy;\n\t\tconst invSZ = 1 / sz;\n\n\t\t_m1$2.elements[ 0 ] *= invSX;\n\t\t_m1$2.elements[ 1 ] *= invSX;\n\t\t_m1$2.elements[ 2 ] *= invSX;\n\n\t\t_m1$2.elements[ 4 ] *= invSY;\n\t\t_m1$2.elements[ 5 ] *= invSY;\n\t\t_m1$2.elements[ 6 ] *= invSY;\n\n\t\t_m1$2.elements[ 8 ] *= invSZ;\n\t\t_m1$2.elements[ 9 ] *= invSZ;\n\t\t_m1$2.elements[ 10 ] *= invSZ;\n\n\t\tquaternion.setFromRotationMatrix( _m1$2 );\n\n\t\tscale.x = sx;\n\t\tscale.y = sy;\n\t\tscale.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\tmakePerspective( left, right, top, bottom, near, far ) {\n\n\t\tif ( far === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t}\n\n\t\tconst te = this.elements;\n\t\tconst x = 2 * near / ( right - left );\n\t\tconst y = 2 * near / ( top - bottom );\n\n\t\tconst a = ( right + left ) / ( right - left );\n\t\tconst b = ( top + bottom ) / ( top - bottom );\n\t\tconst c = - ( far + near ) / ( far - near );\n\t\tconst d = - 2 * far * near / ( far - near );\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t}\n\n\tmakeOrthographic( left, right, top, bottom, near, far ) {\n\n\t\tconst te = this.elements;\n\t\tconst w = 1.0 / ( right - left );\n\t\tconst h = 1.0 / ( top - bottom );\n\t\tconst p = 1.0 / ( far - near );\n\n\t\tconst x = ( right + left ) * w;\n\t\tconst y = ( top + bottom ) * h;\n\t\tconst z = ( far + near ) * p;\n\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t}\n\n}\n\nMatrix4.prototype.isMatrix4 = true;\n\nconst _v1$5 = /*@__PURE__*/ new Vector3();\nconst _m1$2 = /*@__PURE__*/ new Matrix4();\nconst _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );\nconst _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );\nconst _x = /*@__PURE__*/ new Vector3();\nconst _y = /*@__PURE__*/ new Vector3();\nconst _z = /*@__PURE__*/ new Vector3();\n\nconst _matrix$1 = /*@__PURE__*/ new Matrix4();\nconst _quaternion$3 = /*@__PURE__*/ new Quaternion();\n\nclass Euler {\n\n\tconstructor( x = 0, y = 0, z = 0, order = Euler.DefaultOrder ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget order() {\n\n\t\treturn this._order;\n\n\t}\n\n\tset order( value ) {\n\n\t\tthis._order = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, order = this._order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t}\n\n\tcopy( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m, order = this._order, update = true ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements;\n\t\tconst m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tconst m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tconst m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update === true ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromQuaternion( q, order, update ) {\n\n\t\t_matrix$1.makeRotationFromQuaternion( q );\n\n\t\treturn this.setFromRotationMatrix( _matrix$1, order, update );\n\n\t}\n\n\tsetFromVector3( v, order = this._order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order );\n\n\t}\n\n\treorder( newOrder ) {\n\n\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t_quaternion$3.setFromEuler( this );\n\n\t\treturn this.setFromQuaternion( _quaternion$3, newOrder );\n\n\t}\n\n\tequals( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t}\n\n\tfromArray( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t}\n\n\ttoVector3( optionalResult ) {\n\n\t\tif ( optionalResult ) {\n\n\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t} else {\n\n\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t}\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n}\n\nEuler.prototype.isEuler = true;\n\nEuler.DefaultOrder = 'XYZ';\nEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\nclass Layers {\n\n\tconstructor() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tset( channel ) {\n\n\t\tthis.mask = 1 << channel | 0;\n\n\t}\n\n\tenable( channel ) {\n\n\t\tthis.mask |= 1 << channel | 0;\n\n\t}\n\n\tenableAll() {\n\n\t\tthis.mask = 0xffffffff | 0;\n\n\t}\n\n\ttoggle( channel ) {\n\n\t\tthis.mask ^= 1 << channel | 0;\n\n\t}\n\n\tdisable( channel ) {\n\n\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t}\n\n\tdisableAll() {\n\n\t\tthis.mask = 0;\n\n\t}\n\n\ttest( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t}\n\n}\n\nlet _object3DId = 0;\n\nconst _v1$4 = /*@__PURE__*/ new Vector3();\nconst _q1 = /*@__PURE__*/ new Quaternion();\nconst _m1$1 = /*@__PURE__*/ new Matrix4();\nconst _target = /*@__PURE__*/ new Vector3();\n\nconst _position$3 = /*@__PURE__*/ new Vector3();\nconst _scale$2 = /*@__PURE__*/ new Vector3();\nconst _quaternion$2 = /*@__PURE__*/ new Quaternion();\n\nconst _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );\nconst _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );\nconst _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );\n\nconst _addedEvent = { type: 'added' };\nconst _removedEvent = { type: 'removed' };\n\nclass Object3D extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tconst position = new Vector3();\n\t\tconst rotation = new Euler();\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.animations = [];\n\n\t\tthis.userData = {};\n\n\t}\n\n\tonBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\tonAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tthis.matrix.premultiply( matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\tthis.quaternion.premultiply( q );\n\n\t\treturn this;\n\n\t}\n\n\tsetRotationFromAxisAngle( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t}\n\n\tsetRotationFromEuler( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t}\n\n\tsetRotationFromMatrix( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t}\n\n\tsetRotationFromQuaternion( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t}\n\n\trotateOnAxis( axis, angle ) {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.multiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateOnWorldAxis( axis, angle ) {\n\n\t\t// rotate object on axis in world space\n\t\t// axis is assumed to be normalized\n\t\t// method assumes no rotated parent\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.premultiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateX( angle ) {\n\n\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t}\n\n\trotateY( angle ) {\n\n\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t}\n\n\trotateZ( angle ) {\n\n\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t}\n\n\ttranslateOnAxis( axis, distance ) {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_v1$4.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\tthis.position.add( _v1$4.multiplyScalar( distance ) );\n\n\t\treturn this;\n\n\t}\n\n\ttranslateX( distance ) {\n\n\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t}\n\n\ttranslateY( distance ) {\n\n\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t}\n\n\ttranslateZ( distance ) {\n\n\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t}\n\n\tlocalToWorld( vector ) {\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t}\n\n\tworldToLocal( vector ) {\n\n\t\treturn vector.applyMatrix4( _m1$1.copy( this.matrixWorld ).invert() );\n\n\t}\n\n\tlookAt( x, y, z ) {\n\n\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\t_target.copy( x );\n\n\t\t} else {\n\n\t\t\t_target.set( x, y, z );\n\n\t\t}\n\n\t\tconst parent = this.parent;\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_position$3.setFromMatrixPosition( this.matrixWorld );\n\n\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t_m1$1.lookAt( _position$3, _target, this.up );\n\n\t\t} else {\n\n\t\t\t_m1$1.lookAt( _target, _position$3, this.up );\n\n\t\t}\n\n\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\tif ( parent ) {\n\n\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\tthis.quaternion.premultiply( _q1.invert() );\n\n\t\t}\n\n\t}\n\n\tadd( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object can\\'t be added as a child of itself.', object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object && object.isObject3D ) {\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.remove( object );\n\n\t\t\t}\n\n\t\t\tobject.parent = this;\n\t\t\tthis.children.push( object );\n\n\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremove( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst index = this.children.indexOf( object );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tobject.parent = null;\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremoveFromParent() {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tparent.remove( this );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclear() {\n\n\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\n\n\t\t\tconst object = this.children[ i ];\n\n\t\t\tobject.parent = null;\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t}\n\n\t\tthis.children.length = 0;\n\n\t\treturn this;\n\n\n\t}\n\n\tattach( object ) {\n\n\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_m1$1.copy( this.matrixWorld ).invert();\n\n\t\tif ( object.parent !== null ) {\n\n\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t}\n\n\t\tobject.applyMatrix4( _m1$1 );\n\n\t\tthis.add( object );\n\n\t\tobject.updateWorldMatrix( false, true );\n\n\t\treturn this;\n\n\t}\n\n\tgetObjectById( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t}\n\n\tgetObjectByName( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t}\n\n\tgetObjectByProperty( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tconst child = this.children[ i ];\n\t\t\tconst object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\tgetWorldPosition( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t}\n\n\tgetWorldQuaternion( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, target, _scale$2 );\n\n\t\treturn target;\n\n\t}\n\n\tgetWorldScale( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, _quaternion$2, target );\n\n\t\treturn target;\n\n\t}\n\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t}\n\n\traycast() {}\n\n\ttraverse( callback ) {\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t}\n\n\ttraverseVisible( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t}\n\n\ttraverseAncestors( callback ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t}\n\n\tupdateMatrix() {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// update children\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t}\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( updateParents === true && parent !== null ) {\n\n\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t}\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.parent === null ) {\n\n\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t} else {\n\n\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t}\n\n\t\t// update children\n\n\t\tif ( updateChildren === true ) {\n\n\t\t\tconst children = this.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateWorldMatrix( false, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\t// meta is a string when called from JSON.stringify\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tconst output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tshapes: {},\n\t\t\t\tskeletons: {},\n\t\t\t\tanimations: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tconst object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\n\t\tobject.layers = this.layers.mask;\n\t\tobject.matrix = this.matrix.toArray();\n\n\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\n\n\t\t// object specific properties\n\n\t\tif ( this.isInstancedMesh ) {\n\n\t\t\tobject.type = 'InstancedMesh';\n\t\t\tobject.count = this.count;\n\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\tif ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();\n\n\t\t}\n\n\t\t//\n\n\t\tfunction serialize( library, element ) {\n\n\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t}\n\n\t\t\treturn element.uuid;\n\n\t\t}\n\n\t\tif ( this.isScene ) {\n\n\t\t\tif ( this.background ) {\n\n\t\t\t\tif ( this.background.isColor ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON();\n\n\t\t\t\t} else if ( this.background.isTexture ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON( meta ).uuid;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.environment && this.environment.isTexture ) {\n\n\t\t\t\tobject.environment = this.environment.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t} else if ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\tconst parameters = this.geometry.parameters;\n\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\tconst shapes = parameters.shapes;\n\n\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst shape = shapes[ i ];\n\n\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.isSkinnedMesh ) {\n\n\t\t\tobject.bindMode = this.bindMode;\n\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\tif ( this.skeleton !== undefined ) {\n\n\t\t\t\tserialize( meta.skeletons, this.skeleton );\n\n\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\tconst uuids = [];\n\n\t\t\t\tfor ( let i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tobject.material = uuids;\n\n\t\t\t} else {\n\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.animations.length > 0 ) {\n\n\t\t\tobject.animations = [];\n\n\t\t\tfor ( let i = 0; i < this.animations.length; i ++ ) {\n\n\t\t\t\tconst animation = this.animations[ i ];\n\n\t\t\t\tobject.animations.push( serialize( meta.animations, animation ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst geometries = extractFromCache( meta.geometries );\n\t\t\tconst materials = extractFromCache( meta.materials );\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\t\t\tconst shapes = extractFromCache( meta.shapes );\n\t\t\tconst skeletons = extractFromCache( meta.skeletons );\n\t\t\tconst animations = extractFromCache( meta.animations );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\n\t\t\tif ( skeletons.length > 0 ) output.skeletons = skeletons;\n\t\t\tif ( animations.length > 0 ) output.animations = animations;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t}\n\n\tclone( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t}\n\n\tcopy( source, recursive = true ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.rotation.order = source.rotation.order;\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.layers.mask = source.layers.mask;\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( let i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tconst child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nObject3D.DefaultUp = new Vector3( 0, 1, 0 );\nObject3D.DefaultMatrixAutoUpdate = true;\n\nObject3D.prototype.isObject3D = true;\n\nconst _v0$1 = /*@__PURE__*/ new Vector3();\nconst _v1$3 = /*@__PURE__*/ new Vector3();\nconst _v2$2 = /*@__PURE__*/ new Vector3();\nconst _v3$1 = /*@__PURE__*/ new Vector3();\n\nconst _vab = /*@__PURE__*/ new Vector3();\nconst _vac = /*@__PURE__*/ new Vector3();\nconst _vbc = /*@__PURE__*/ new Vector3();\nconst _vap = /*@__PURE__*/ new Vector3();\nconst _vbp = /*@__PURE__*/ new Vector3();\nconst _vcp = /*@__PURE__*/ new Vector3();\n\nclass Triangle {\n\n\tconstructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t}\n\n\tstatic getNormal( a, b, c, target ) {\n\n\t\ttarget.subVectors( c, b );\n\t\t_v0$1.subVectors( a, b );\n\t\ttarget.cross( _v0$1 );\n\n\t\tconst targetLengthSq = target.lengthSq();\n\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t}\n\n\t\treturn target.set( 0, 0, 0 );\n\n\t}\n\n\t// static/instance method to calculate barycentric coordinates\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\tstatic getBarycoord( point, a, b, c, target ) {\n\n\t\t_v0$1.subVectors( c, a );\n\t\t_v1$3.subVectors( b, a );\n\t\t_v2$2.subVectors( point, a );\n\n\t\tconst dot00 = _v0$1.dot( _v0$1 );\n\t\tconst dot01 = _v0$1.dot( _v1$3 );\n\t\tconst dot02 = _v0$1.dot( _v2$2 );\n\t\tconst dot11 = _v1$3.dot( _v1$3 );\n\t\tconst dot12 = _v1$3.dot( _v2$2 );\n\n\t\tconst denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\t// arbitrary location outside of triangle?\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t}\n\n\t\tconst invDenom = 1 / denom;\n\t\tconst u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tconst v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn target.set( 1 - u - v, v, u );\n\n\t}\n\n\tstatic containsPoint( point, a, b, c ) {\n\n\t\tthis.getBarycoord( point, a, b, c, _v3$1 );\n\n\t\treturn ( _v3$1.x >= 0 ) && ( _v3$1.y >= 0 ) && ( ( _v3$1.x + _v3$1.y ) <= 1 );\n\n\t}\n\n\tstatic getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n\n\t\tthis.getBarycoord( point, p1, p2, p3, _v3$1 );\n\n\t\ttarget.set( 0, 0 );\n\t\ttarget.addScaledVector( uv1, _v3$1.x );\n\t\ttarget.addScaledVector( uv2, _v3$1.y );\n\t\ttarget.addScaledVector( uv3, _v3$1.z );\n\n\t\treturn target;\n\n\t}\n\n\tstatic isFrontFacing( a, b, c, direction ) {\n\n\t\t_v0$1.subVectors( c, b );\n\t\t_v1$3.subVectors( a, b );\n\n\t\t// strictly front facing\n\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t}\n\n\tset( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPointsAndIndices( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAttributeAndIndices( attribute, i0, i1, i2 ) {\n\n\t\tthis.a.fromBufferAttribute( attribute, i0 );\n\t\tthis.b.fromBufferAttribute( attribute, i1 );\n\t\tthis.c.fromBufferAttribute( attribute, i2 );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t}\n\n\tgetArea() {\n\n\t\t_v0$1.subVectors( this.c, this.b );\n\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t}\n\n\tgetMidpoint( target ) {\n\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t}\n\n\tgetNormal( target ) {\n\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t}\n\n\tgetPlane( target ) {\n\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t}\n\n\tgetBarycoord( point, target ) {\n\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t}\n\n\tgetUV( point, uv1, uv2, uv3, target ) {\n\n\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t}\n\n\tisFrontFacing( direction ) {\n\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsTriangle( this );\n\n\t}\n\n\tclosestPointToPoint( p, target ) {\n\n\t\tconst a = this.a, b = this.b, c = this.c;\n\t\tlet v, w;\n\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t_vab.subVectors( b, a );\n\t\t_vac.subVectors( c, a );\n\t\t_vap.subVectors( p, a );\n\t\tconst d1 = _vab.dot( _vap );\n\t\tconst d2 = _vac.dot( _vap );\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\treturn target.copy( a );\n\n\t\t}\n\n\t\t_vbp.subVectors( p, b );\n\t\tconst d3 = _vab.dot( _vbp );\n\t\tconst d4 = _vac.dot( _vbp );\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\treturn target.copy( b );\n\n\t\t}\n\n\t\tconst vc = d1 * d4 - d3 * d2;\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t}\n\n\t\t_vcp.subVectors( p, c );\n\t\tconst d5 = _vab.dot( _vcp );\n\t\tconst d6 = _vac.dot( _vcp );\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\treturn target.copy( c );\n\n\t\t}\n\n\t\tconst vb = d5 * d2 - d1 * d6;\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t}\n\n\t\tconst va = d3 * d6 - d5 * d4;\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t_vbc.subVectors( c, b );\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t}\n\n\t\t// face region\n\t\tconst denom = 1 / ( va + vb + vc );\n\t\t// u = va * denom\n\t\tv = vb * denom;\n\t\tw = vc * denom;\n\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t}\n\n\tequals( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n}\n\nlet materialId = 0;\n\nclass Material extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.vertexColors = false;\n\n\t\tthis.opacity = 1;\n\t\tthis.format = RGBAFormat;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaToCoverage = false;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.visible = true;\n\n\t\tthis.toneMapped = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\n\t\tthis._alphaTest = 0;\n\n\t}\n\n\tget alphaTest() {\n\n\t\treturn this._alphaTest;\n\n\t}\n\n\tset alphaTest( value ) {\n\n\t\tif ( this._alphaTest > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._alphaTest = value;\n\n\t}\n\n\tonBuild( /* shaderobject, renderer */ ) {}\n\n\tonBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}\n\n\tonBeforeCompile( /* shaderobject, renderer */ ) {}\n\n\tcustomProgramCacheKey() {\n\n\t\treturn this.onBeforeCompile.toString();\n\n\t}\n\n\tsetValues( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( const key in values ) {\n\n\t\t\tconst newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Material: \\'' + key + '\\' parameter is undefined.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRoot ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.sheen !== undefined ) data.sheen = this.sheen;\n\t\tif ( this.sheenTint && this.sheenTint.isColor ) data.sheenTint = this.sheenTint.getHex();\n\t\tif ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\tif ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;\n\t\tif ( this.specularTint && this.specularTint.isColor ) data.specularTint = this.specularTint.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\tif ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\n\t\tif ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\n\t\tif ( this.lightMap && this.lightMap.isTexture ) {\n\n\t\t\tdata.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t}\n\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\tif ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;\n\t\tif ( this.specularTintMap && this.specularTintMap.isTexture ) data.specularTintMap = this.specularTintMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.combine !== undefined ) data.combine = this.combine;\n\n\t\t}\n\n\t\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\n\t\tif ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;\n\t\tif ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;\n\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.transmission !== undefined ) data.transmission = this.transmission;\n\t\tif ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;\n\t\tif ( this.thickness !== undefined ) data.thickness = this.thickness;\n\t\tif ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;\n\t\tif ( this.attenuationDistance !== undefined ) data.attenuationDistance = this.attenuationDistance;\n\t\tif ( this.attenuationTint !== undefined ) data.attenuationTint = this.attenuationTint.getHex();\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors ) data.vertexColors = true;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.format !== RGBAFormat ) data.format = this.format;\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n\t\tdata.depthFunc = this.depthFunc;\n\t\tdata.depthTest = this.depthTest;\n\t\tdata.depthWrite = this.depthWrite;\n\t\tdata.colorWrite = this.colorWrite;\n\n\t\tdata.stencilWrite = this.stencilWrite;\n\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\tdata.stencilFunc = this.stencilFunc;\n\t\tdata.stencilRef = this.stencilRef;\n\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\tdata.stencilFail = this.stencilFail;\n\t\tdata.stencilZFail = this.stencilZFail;\n\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t// rotation (SpriteMaterial)\n\t\tif ( this.rotation && this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\tif ( this.polygonOffset === true ) data.polygonOffset = true;\n\t\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\n\t\tif ( this.linewidth && this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.alphaToCoverage === true ) data.alphaToCoverage = this.alphaToCoverage;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\n\n\t\tif ( this.visible === false ) data.visible = false;\n\n\t\tif ( this.toneMapped === false ) data.toneMapped = false;\n\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRoot ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.fog = source.fog;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.format = source.format;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\tthis.stencilFunc = source.stencilFunc;\n\t\tthis.stencilRef = source.stencilRef;\n\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\tthis.stencilFail = source.stencilFail;\n\t\tthis.stencilZFail = source.stencilZFail;\n\t\tthis.stencilZPass = source.stencilZPass;\n\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\tconst srcPlanes = source.clippingPlanes;\n\t\tlet dstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tconst n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\t\tthis.clipIntersection = source.clipIntersection;\n\t\tthis.clipShadows = source.clipShadows;\n\n\t\tthis.shadowSide = source.shadowSide;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.dithering = source.dithering;\n\n\t\tthis.alphaTest = source.alphaTest;\n\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.toneMapped = source.toneMapped;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n}\n\nMaterial.prototype.isMaterial = true;\n\nconst _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\nconst _hslA = { h: 0, s: 0, l: 0 };\nconst _hslB = { h: 0, s: 0, l: 0 };\n\nfunction hue2rgb( p, q, t ) {\n\n\tif ( t < 0 ) t += 1;\n\tif ( t > 1 ) t -= 1;\n\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\tif ( t < 1 / 2 ) return q;\n\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\treturn p;\n\n}\n\nfunction SRGBToLinear( c ) {\n\n\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n}\n\nfunction LinearToSRGB( c ) {\n\n\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n}\n\nclass Color {\n\n\tconstructor( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tset( value ) {\n\n\t\tif ( value && value.isColor ) {\n\n\t\t\tthis.copy( value );\n\n\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\tthis.setHex( value );\n\n\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\tthis.setStyle( value );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetHex( hex ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\treturn this;\n\n\t}\n\n\tsetRGB( r, g, b ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\treturn this;\n\n\t}\n\n\tsetHSL( h, s, l ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\th = euclideanModulo( h, 1 );\n\t\ts = clamp( s, 0, 1 );\n\t\tl = clamp( l, 0, 1 );\n\n\t\tif ( s === 0 ) {\n\n\t\t\tthis.r = this.g = this.b = l;\n\n\t\t} else {\n\n\t\t\tconst p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\tconst q = ( 2 * l ) - p;\n\n\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetStyle( style ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tlet m;\n\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tlet color;\n\t\t\tconst name = m[ 1 ];\n\t\t\tconst components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\tconst h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\tconst s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\tconst l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f\\d]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tconst hex = m[ 1 ];\n\t\t\tconst size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( style && style.length > 0 ) {\n\n\t\t\treturn this.setColorName( style );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetColorName( style ) {\n\n\t\t// color keywords\n\t\tconst hex = _colorKeywords[ style.toLowerCase() ];\n\n\t\tif ( hex !== undefined ) {\n\n\t\t\t// red\n\t\t\tthis.setHex( hex );\n\n\t\t} else {\n\n\t\t\t// unknown color\n\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t}\n\n\tcopy( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t}\n\n\tcopyGammaToLinear( color, gammaFactor = 2.0 ) {\n\n\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\treturn this;\n\n\t}\n\n\tcopyLinearToGamma( color, gammaFactor = 2.0 ) {\n\n\t\tconst safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\treturn this;\n\n\t}\n\n\tconvertGammaToLinear( gammaFactor ) {\n\n\t\tthis.copyGammaToLinear( this, gammaFactor );\n\n\t\treturn this;\n\n\t}\n\n\tconvertLinearToGamma( gammaFactor ) {\n\n\t\tthis.copyLinearToGamma( this, gammaFactor );\n\n\t\treturn this;\n\n\t}\n\n\tcopySRGBToLinear( color ) {\n\n\t\tthis.r = SRGBToLinear( color.r );\n\t\tthis.g = SRGBToLinear( color.g );\n\t\tthis.b = SRGBToLinear( color.b );\n\n\t\treturn this;\n\n\t}\n\n\tcopyLinearToSRGB( color ) {\n\n\t\tthis.r = LinearToSRGB( color.r );\n\t\tthis.g = LinearToSRGB( color.g );\n\t\tthis.b = LinearToSRGB( color.b );\n\n\t\treturn this;\n\n\t}\n\n\tconvertSRGBToLinear() {\n\n\t\tthis.copySRGBToLinear( this );\n\n\t\treturn this;\n\n\t}\n\n\tconvertLinearToSRGB() {\n\n\t\tthis.copyLinearToSRGB( this );\n\n\t\treturn this;\n\n\t}\n\n\tgetHex() {\n\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t}\n\n\tgetHexString() {\n\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t}\n\n\tgetHSL( target ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tconst r = this.r, g = this.g, b = this.b;\n\n\t\tconst max = Math.max( r, g, b );\n\t\tconst min = Math.min( r, g, b );\n\n\t\tlet hue, saturation;\n\t\tconst lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tconst delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\ttarget.h = hue;\n\t\ttarget.s = saturation;\n\t\ttarget.l = lightness;\n\n\t\treturn target;\n\n\t}\n\n\tgetStyle() {\n\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t}\n\n\toffsetHSL( h, s, l ) {\n\n\t\tthis.getHSL( _hslA );\n\n\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\n\n\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\n\n\t\treturn this;\n\n\t}\n\n\tadd( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t}\n\n\taddColors( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( color ) {\n\n\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t}\n\n\tlerp( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpColors( color1, color2, alpha ) {\n\n\t\tthis.r = color1.r + ( color2.r - color1.r ) * alpha;\n\t\tthis.g = color1.g + ( color2.g - color1.g ) * alpha;\n\t\tthis.b = color1.b + ( color2.b - color1.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpHSL( color, alpha ) {\n\n\t\tthis.getHSL( _hslA );\n\t\tcolor.getHSL( _hslB );\n\n\t\tconst h = lerp( _hslA.h, _hslB.h, alpha );\n\t\tconst s = lerp( _hslA.s, _hslB.s, alpha );\n\t\tconst l = lerp( _hslA.l, _hslB.l, alpha );\n\n\t\tthis.setHSL( h, s, l );\n\n\t\treturn this;\n\n\t}\n\n\tequals( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.r = attribute.getX( index );\n\t\tthis.g = attribute.getY( index );\n\t\tthis.b = attribute.getZ( index );\n\n\t\tif ( attribute.normalized === true ) {\n\n\t\t\t// assuming Uint8Array\n\n\t\t\tthis.r /= 255;\n\t\t\tthis.g /= 255;\n\t\t\tthis.b /= 255;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\treturn this.getHex();\n\n\t}\n\n}\n\nColor.NAMES = _colorKeywords;\n\nColor.prototype.isColor = true;\nColor.prototype.r = 1;\nColor.prototype.g = 1;\nColor.prototype.b = 1;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n * }\n */\n\nclass MeshBasicMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\nconst _vector$9 = /*@__PURE__*/ new Vector3();\nconst _vector2$1 = /*@__PURE__*/ new Vector2();\n\nclass BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tonUploadCallback() {}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\t\tthis.count = source.count;\n\t\tthis.normalized = source.normalized;\n\n\t\tthis.usage = source.usage;\n\n\t\treturn this;\n\n\t}\n\n\tcopyAt( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( let i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyArray( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t}\n\n\tcopyColorsArray( colors ) {\n\n\t\tconst array = this.array;\n\t\tlet offset = 0;\n\n\t\tfor ( let i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\tlet color = colors[ i ];\n\n\t\t\tif ( color === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\tcolor = new Color();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = color.r;\n\t\t\tarray[ offset ++ ] = color.g;\n\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyVector2sArray( vectors ) {\n\n\t\tconst array = this.array;\n\t\tlet offset = 0;\n\n\t\tfor ( let i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tlet vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector2();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyVector3sArray( vectors ) {\n\n\t\tconst array = this.array;\n\t\tlet offset = 0;\n\n\t\tfor ( let i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tlet vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector3();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyVector4sArray( vectors ) {\n\n\t\tconst array = this.array;\n\t\tlet offset = 0;\n\n\t\tfor ( let i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tlet vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector4();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tif ( this.itemSize === 2 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector2$1.fromBufferAttribute( this, i );\n\t\t\t\t_vector2$1.applyMatrix3( m );\n\n\t\t\t\tthis.setXY( i, _vector2$1.x, _vector2$1.y );\n\n\t\t\t}\n\n\t\t} else if ( this.itemSize === 3 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$9.fromBufferAttribute( this, i );\n\t\t\t\t_vector$9.applyMatrix3( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.x = this.getX( i );\n\t\t\t_vector$9.y = this.getY( i );\n\t\t\t_vector$9.z = this.getZ( i );\n\n\t\t\t_vector$9.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.x = this.getX( i );\n\t\t\t_vector$9.y = this.getY( i );\n\t\t\t_vector$9.z = this.getZ( i );\n\n\t\t\t_vector$9.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.x = this.getX( i );\n\t\t\t_vector$9.y = this.getY( i );\n\t\t\t_vector$9.z = this.getZ( i );\n\n\t\t\t_vector$9.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tset( value, offset = 0 ) {\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\tgetX( index ) {\n\n\t\treturn this.array[ index * this.itemSize ];\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t}\n\n\tgetY( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tgetZ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tgetW( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\titemSize: this.itemSize,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tarray: Array.prototype.slice.call( this.array ),\n\t\t\tnormalized: this.normalized\n\t\t};\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( this.usage !== StaticDrawUsage ) data.usage = this.usage;\n\t\tif ( this.updateRange.offset !== 0 || this.updateRange.count !== - 1 ) data.updateRange = this.updateRange;\n\n\t\treturn data;\n\n\t}\n\n}\n\nBufferAttribute.prototype.isBufferAttribute = true;\n\nclass Uint16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Float32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nlet _id = 0;\n\nconst _m1 = /*@__PURE__*/ new Matrix4();\nconst _obj = /*@__PURE__*/ new Object3D();\nconst _offset = /*@__PURE__*/ new Vector3();\nconst _box$1 = /*@__PURE__*/ new Box3();\nconst _boxMorphTargets = /*@__PURE__*/ new Box3();\nconst _vector$8 = /*@__PURE__*/ new Vector3();\n\nclass BufferGeometry extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tObject.defineProperty( this, 'id', { value: _id ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tgetIndex() {\n\n\t\treturn this.index;\n\n\t}\n\n\tsetIndex( index ) {\n\n\t\tif ( Array.isArray( index ) ) {\n\n\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t} else {\n\n\t\t\tthis.index = index;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetAttribute( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t}\n\n\tsetAttribute( name, attribute ) {\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t\treturn this;\n\n\t}\n\n\tdeleteAttribute( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t\treturn this;\n\n\t}\n\n\thasAttribute( name ) {\n\n\t\treturn this.attributes[ name ] !== undefined;\n\n\t}\n\n\taddGroup( start, count, materialIndex = 0 ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex\n\n\t\t} );\n\n\t}\n\n\tclearGroups() {\n\n\t\tthis.groups = [];\n\n\t}\n\n\tsetDrawRange( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tconst position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tposition.applyMatrix4( matrix );\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tconst normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormal.applyNormalMatrix( normalMatrix );\n\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tconst tangent = this.attributes.tangent;\n\n\t\tif ( tangent !== undefined ) {\n\n\t\t\ttangent.transformDirection( matrix );\n\n\t\t\ttangent.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\t_m1.makeRotationFromQuaternion( q );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateX( angle ) {\n\n\t\t// rotate geometry around world x-axis\n\n\t\t_m1.makeRotationX( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateY( angle ) {\n\n\t\t// rotate geometry around world y-axis\n\n\t\t_m1.makeRotationY( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateZ( angle ) {\n\n\t\t// rotate geometry around world z-axis\n\n\t\t_m1.makeRotationZ( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( x, y, z ) {\n\n\t\t// translate geometry\n\n\t\t_m1.makeTranslation( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tscale( x, y, z ) {\n\n\t\t// scale geometry\n\n\t\t_m1.makeScale( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tlookAt( vector ) {\n\n\t\t_obj.lookAt( vector );\n\n\t\t_obj.updateMatrix();\n\n\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\treturn this;\n\n\t}\n\n\tcenter() {\n\n\t\tthis.computeBoundingBox();\n\n\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tconst position = [];\n\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tconst point = points[ i ];\n\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\treturn this;\n\n\t}\n\n\tcomputeBoundingBox() {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this );\n\n\t\t\tthis.boundingBox.set(\n\t\t\t\tnew Vector3( - Infinity, - Infinity, - Infinity ),\n\t\t\t\tnew Vector3( + Infinity, + Infinity, + Infinity )\n\t\t\t);\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_box$1.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$8.addVectors( this.boundingBox.min, _box$1.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$8 );\n\n\t\t\t\t\t\t_vector$8.addVectors( this.boundingBox.max, _box$1.max );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$8 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$1.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$1.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t}\n\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t}\n\n\t}\n\n\tcomputeBoundingSphere() {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this );\n\n\t\t\tthis.boundingSphere.set( new Vector3(), Infinity );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position ) {\n\n\t\t\t// first, find the center of the bounding sphere\n\n\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\t_box$1.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$8.addVectors( _box$1.min, _boxMorphTargets.min );\n\t\t\t\t\t\t_box$1.expandByPoint( _vector$8 );\n\n\t\t\t\t\t\t_vector$8.addVectors( _box$1.max, _boxMorphTargets.max );\n\t\t\t\t\t\t_box$1.expandByPoint( _vector$8 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_box$1.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t_box$1.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_box$1.getCenter( center );\n\n\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor ( let i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$8.fromBufferAttribute( position, i );\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );\n\n\t\t\t}\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\tfor ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t_vector$8.fromBufferAttribute( morphAttribute, j );\n\n\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t_vector$8.add( _offset );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcomputeTangents() {\n\n\t\tconst index = this.index;\n\t\tconst attributes = this.attributes;\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// (per vertex tangents)\n\n\t\tif ( index === null ||\n\t\t\t attributes.position === undefined ||\n\t\t\t attributes.normal === undefined ||\n\t\t\t attributes.uv === undefined ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst indices = index.array;\n\t\tconst positions = attributes.position.array;\n\t\tconst normals = attributes.normal.array;\n\t\tconst uvs = attributes.uv.array;\n\n\t\tconst nVertices = positions.length / 3;\n\n\t\tif ( attributes.tangent === undefined ) {\n\n\t\t\tthis.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );\n\n\t\t}\n\n\t\tconst tangents = attributes.tangent.array;\n\n\t\tconst tan1 = [], tan2 = [];\n\n\t\tfor ( let i = 0; i < nVertices; i ++ ) {\n\n\t\t\ttan1[ i ] = new Vector3();\n\t\t\ttan2[ i ] = new Vector3();\n\n\t\t}\n\n\t\tconst vA = new Vector3(),\n\t\t\tvB = new Vector3(),\n\t\t\tvC = new Vector3(),\n\n\t\t\tuvA = new Vector2(),\n\t\t\tuvB = new Vector2(),\n\t\t\tuvC = new Vector2(),\n\n\t\t\tsdir = new Vector3(),\n\t\t\ttdir = new Vector3();\n\n\t\tfunction handleTriangle( a, b, c ) {\n\n\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\tvB.sub( vA );\n\t\t\tvC.sub( vA );\n\n\t\t\tuvB.sub( uvA );\n\t\t\tuvC.sub( uvA );\n\n\t\t\tconst r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\n\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\tif ( ! isFinite( r ) ) return;\n\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tlet groups = this.groups;\n\n\t\tif ( groups.length === 0 ) {\n\n\t\t\tgroups = [ {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: indices.length\n\t\t\t} ];\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleTriangle(\n\t\t\t\t\tindices[ j + 0 ],\n\t\t\t\t\tindices[ j + 1 ],\n\t\t\t\t\tindices[ j + 2 ]\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst tmp = new Vector3(), tmp2 = new Vector3();\n\t\tconst n = new Vector3(), n2 = new Vector3();\n\n\t\tfunction handleVertex( v ) {\n\n\t\t\tn.fromArray( normals, v * 3 );\n\t\t\tn2.copy( n );\n\n\t\t\tconst t = tan1[ v ];\n\n\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\ttmp.copy( t );\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t// Calculate handedness\n\n\t\t\ttmp2.crossVectors( n2, t );\n\t\t\tconst test = tmp2.dot( tan2[ v ] );\n\t\t\tconst w = ( test < 0.0 ) ? - 1.0 : 1.0;\n\n\t\t\ttangents[ v * 4 ] = tmp.x;\n\t\t\ttangents[ v * 4 + 1 ] = tmp.y;\n\t\t\ttangents[ v * 4 + 2 ] = tmp.z;\n\t\t\ttangents[ v * 4 + 3 ] = w;\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleVertex( indices[ j + 0 ] );\n\t\t\t\thandleVertex( indices[ j + 1 ] );\n\t\t\t\thandleVertex( indices[ j + 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcomputeVertexNormals() {\n\n\t\tconst index = this.index;\n\t\tconst positionAttribute = this.getAttribute( 'position' );\n\n\t\tif ( positionAttribute !== undefined ) {\n\n\t\t\tlet normalAttribute = this.getAttribute( 'normal' );\n\n\t\t\tif ( normalAttribute === undefined ) {\n\n\t\t\t\tnormalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );\n\t\t\t\tthis.setAttribute( 'normal', normalAttribute );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tfor ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {\n\n\t\t\t\t\tnormalAttribute.setXYZ( i, 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\tconst nA = new Vector3(), nB = new Vector3(), nC = new Vector3();\n\t\t\tconst cb = new Vector3(), ab = new Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tfor ( let i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\tconst vA = index.getX( i + 0 );\n\t\t\t\t\tconst vB = index.getX( i + 1 );\n\t\t\t\t\tconst vC = index.getX( i + 2 );\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, vA );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, vB );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, vC );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnA.fromBufferAttribute( normalAttribute, vA );\n\t\t\t\t\tnB.fromBufferAttribute( normalAttribute, vB );\n\t\t\t\t\tnC.fromBufferAttribute( normalAttribute, vC );\n\n\t\t\t\t\tnA.add( cb );\n\t\t\t\t\tnB.add( cb );\n\t\t\t\t\tnC.add( cb );\n\n\t\t\t\t\tnormalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, i + 0 );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, i + 1 );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, i + 2 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tnormalAttribute.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tmerge( geometry, offset ) {\n\n\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( offset === undefined ) {\n\n\t\t\toffset = 0;\n\n\t\t\tconsole.warn(\n\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\n\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\n\t\t\t);\n\n\t\t}\n\n\t\tconst attributes = this.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n\t\t\tconst attribute1 = attributes[ key ];\n\t\t\tconst attributeArray1 = attribute1.array;\n\n\t\t\tconst attribute2 = geometry.attributes[ key ];\n\t\t\tconst attributeArray2 = attribute2.array;\n\n\t\t\tconst attributeOffset = attribute2.itemSize * offset;\n\t\t\tconst length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );\n\n\t\t\tfor ( let i = 0, j = attributeOffset; i < length; i ++, j ++ ) {\n\n\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tnormalizeNormals() {\n\n\t\tconst normals = this.attributes.normal;\n\n\t\tfor ( let i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t_vector$8.fromBufferAttribute( normals, i );\n\n\t\t\t_vector$8.normalize();\n\n\t\t\tnormals.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t}\n\n\t}\n\n\ttoNonIndexed() {\n\n\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\tconst array = attribute.array;\n\t\t\tconst itemSize = attribute.itemSize;\n\t\t\tconst normalized = attribute.normalized;\n\n\t\t\tconst array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tlet index = 0, index2 = 0;\n\n\t\t\tfor ( let i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\tindex = indices[ i ] * attribute.data.stride + attribute.offset;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( array2, itemSize, normalized );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.index === null ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst geometry2 = new BufferGeometry();\n\n\t\tconst indices = this.index.array;\n\t\tconst attributes = this.attributes;\n\n\t\t// attributes\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\n\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = this.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst morphArray = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = morphAttribute[ i ];\n\n\t\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tmorphArray.push( newAttribute );\n\n\t\t\t}\n\n\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\n\n\t\t}\n\n\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = this.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tconst parameters = this.parameters;\n\n\t\t\tfor ( const key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\t// for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n\t\tdata.data = { attributes: {} };\n\n\t\tconst index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t};\n\n\t\t}\n\n\t\tconst attributes = this.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\n\t\t\tdata.data.attributes[ key ] = attribute.toJSON( data.data );\n\n\t\t}\n\n\t\tconst morphAttributes = {};\n\t\tlet hasMorphAttributes = false;\n\n\t\tfor ( const key in this.morphAttributes ) {\n\n\t\t\tconst attributeArray = this.morphAttributes[ key ];\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = attributeArray[ i ];\n\n\t\t\t\tarray.push( attribute.toJSON( data.data ) );\n\n\t\t\t}\n\n\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\tmorphAttributes[ key ] = array;\n\n\t\t\t\thasMorphAttributes = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( hasMorphAttributes ) {\n\n\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t}\n\n\t\tconst groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tconst boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\t return new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\t// reset\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// used for storing cloned, shared data\n\n\t\tconst data = {};\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// index\n\n\t\tconst index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone( data ) );\n\n\t\t}\n\n\t\t// attributes\n\n\t\tconst attributes = source.attributes;\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\t\t\tthis.setAttribute( name, attribute.clone( data ) );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = source.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst array = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\tarray.push( morphAttribute[ i ].clone( data ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = source.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tconst boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tconst boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// draw range\n\n\t\tthis.drawRange.start = source.drawRange.start;\n\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t// user data\n\n\t\tthis.userData = source.userData;\n\n\t\t// geometry generator parameters\n\n\t\tif ( source.parameters !== undefined ) this.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nBufferGeometry.prototype.isBufferGeometry = true;\n\nconst _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();\nconst _ray$2 = /*@__PURE__*/ new Ray();\nconst _sphere$3 = /*@__PURE__*/ new Sphere();\n\nconst _vA$1 = /*@__PURE__*/ new Vector3();\nconst _vB$1 = /*@__PURE__*/ new Vector3();\nconst _vC$1 = /*@__PURE__*/ new Vector3();\n\nconst _tempA = /*@__PURE__*/ new Vector3();\nconst _tempB = /*@__PURE__*/ new Vector3();\nconst _tempC = /*@__PURE__*/ new Vector3();\n\nconst _morphA = /*@__PURE__*/ new Vector3();\nconst _morphB = /*@__PURE__*/ new Vector3();\nconst _morphC = /*@__PURE__*/ new Vector3();\n\nconst _uvA$1 = /*@__PURE__*/ new Vector2();\nconst _uvB$1 = /*@__PURE__*/ new Vector2();\nconst _uvC$1 = /*@__PURE__*/ new Vector2();\n\nconst _intersectionPoint = /*@__PURE__*/ new Vector3();\nconst _intersectionPointWorld = /*@__PURE__*/ new Vector3();\n\nclass Mesh extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t}\n\n\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t}\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\tconst keys = Object.keys( morphAttributes );\n\n\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$3.copy( geometry.boundingSphere );\n\t\t_sphere$3.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix$2.copy( matrixWorld ).invert();\n\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t// Check boundingBox before continuing\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( _ray$2.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\tlet intersection;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst position = geometry.attributes.position;\n\t\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\tconst uv = geometry.attributes.uv;\n\t\t\tconst uv2 = geometry.attributes.uv2;\n\t\t\tconst groups = geometry.groups;\n\t\t\tconst drawRange = geometry.drawRange;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\t// indexed buffer geometry\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\tconst end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\tconst a = index.getX( j );\n\t\t\t\t\t\t\tconst b = index.getX( j + 1 );\n\t\t\t\t\t\t\tconst c = index.getX( j + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\tconst a = index.getX( i );\n\t\t\t\t\t\tconst b = index.getX( i + 1 );\n\t\t\t\t\t\tconst c = index.getX( i + 2 );\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\tconst end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\t\tconst c = j + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\t\tconst end = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\tconst a = i;\n\t\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\t\tconst c = i + 2;\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t}\n\n}\n\nMesh.prototype.isMesh = true;\n\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\tlet intersect;\n\n\tif ( material.side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\t_intersectionPointWorld.copy( point );\n\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\treturn {\n\t\tdistance: distance,\n\t\tpoint: _intersectionPointWorld.clone(),\n\t\tobject: object\n\t};\n\n}\n\nfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\n\n\t_vA$1.fromBufferAttribute( position, a );\n\t_vB$1.fromBufferAttribute( position, b );\n\t_vC$1.fromBufferAttribute( position, c );\n\n\tconst morphInfluences = object.morphTargetInfluences;\n\n\tif ( morphPosition && morphInfluences ) {\n\n\t\t_morphA.set( 0, 0, 0 );\n\t\t_morphB.set( 0, 0, 0 );\n\t\t_morphC.set( 0, 0, 0 );\n\n\t\tfor ( let i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\tconst influence = morphInfluences[ i ];\n\t\t\tconst morphAttribute = morphPosition[ i ];\n\n\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\n\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\n\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\n\n\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t} else {\n\n\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA$1 ), influence );\n\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB$1 ), influence );\n\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC$1 ), influence );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_vA$1.add( _morphA );\n\t\t_vB$1.add( _morphB );\n\t\t_vC$1.add( _morphC );\n\n\t}\n\n\tif ( object.isSkinnedMesh ) {\n\n\t\tobject.boneTransform( a, _vA$1 );\n\t\tobject.boneTransform( b, _vB$1 );\n\t\tobject.boneTransform( c, _vC$1 );\n\n\t}\n\n\tconst intersection = checkIntersection( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );\n\n\tif ( intersection ) {\n\n\t\tif ( uv ) {\n\n\t\t\t_uvA$1.fromBufferAttribute( uv, a );\n\t\t\t_uvB$1.fromBufferAttribute( uv, b );\n\t\t\t_uvC$1.fromBufferAttribute( uv, c );\n\n\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );\n\n\t\t}\n\n\t\tif ( uv2 ) {\n\n\t\t\t_uvA$1.fromBufferAttribute( uv2, a );\n\t\t\t_uvB$1.fromBufferAttribute( uv2, b );\n\t\t\t_uvC$1.fromBufferAttribute( uv2, c );\n\n\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );\n\n\t\t}\n\n\t\tconst face = {\n\t\t\ta: a,\n\t\t\tb: b,\n\t\t\tc: c,\n\t\t\tnormal: new Vector3(),\n\t\t\tmaterialIndex: 0\n\t\t};\n\n\t\tTriangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );\n\n\t\tintersection.face = face;\n\n\t}\n\n\treturn intersection;\n\n}\n\nclass BoxGeometry extends BufferGeometry {\n\n\tconstructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'BoxGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tconst scope = this;\n\n\t\t// segments\n\n\t\twidthSegments = Math.floor( widthSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\t\tdepthSegments = Math.floor( depthSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet numberOfVertices = 0;\n\t\tlet groupStart = 0;\n\n\t\t// build each side of the box geometry\n\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\tconst segmentWidth = width / gridX;\n\t\t\tconst segmentHeight = height / gridY;\n\n\t\t\tconst widthHalf = width / 2;\n\t\t\tconst heightHalf = height / 2;\n\t\t\tconst depthHalf = depth / 2;\n\n\t\t\tconst gridX1 = gridX + 1;\n\t\t\tconst gridY1 = gridY + 1;\n\n\t\t\tlet vertexCounter = 0;\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst vector = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tconst y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tconst x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t// counters\n\n\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// increase counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );\n\n\t}\n\n}\n\n/**\n * Uniform Utilities\n */\n\nfunction cloneUniforms( src ) {\n\n\tconst dst = {};\n\n\tfor ( const u in src ) {\n\n\t\tdst[ u ] = {};\n\n\t\tfor ( const p in src[ u ] ) {\n\n\t\t\tconst property = src[ u ][ p ];\n\n\t\t\tif ( property && ( property.isColor ||\n\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\tproperty.isTexture || property.isQuaternion ) ) {\n\n\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t} else {\n\n\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn dst;\n\n}\n\nfunction mergeUniforms( uniforms ) {\n\n\tconst merged = {};\n\n\tfor ( let u = 0; u < uniforms.length; u ++ ) {\n\n\t\tconst tmp = cloneUniforms( uniforms[ u ] );\n\n\t\tfor ( const p in tmp ) {\n\n\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t}\n\n\t}\n\n\treturn merged;\n\n}\n\n// Legacy\n\nconst UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\nvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\nvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n/**\n * parameters = {\n *  defines: { \"label\" : \"value\" },\n *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n *\n *  fragmentShader: <string>,\n *  vertexShader: <string>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  lights: <bool>\n * }\n */\n\nclass ShaderMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tthis.glslVersion = null;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.extensions = Object.assign( {}, source.extensions );\n\n\t\tthis.glslVersion = source.glslVersion;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor ( const name in this.uniforms ) {\n\n\t\t\tconst uniform = this.uniforms[ name ];\n\t\t\tconst value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tconst extensions = {};\n\n\t\tfor ( const key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) extensions[ key ] = true;\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;\n\n\t\treturn data;\n\n\t}\n\n}\n\nShaderMaterial.prototype.isShaderMaterial = true;\n\nclass Camera extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\treturn this;\n\n\t}\n\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tsuper.updateWorldMatrix( updateParents, updateChildren );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nCamera.prototype.isCamera = true;\n\nclass PerspectiveCamera extends Camera {\n\n\tconstructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength( focalLength ) {\n\n\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Calculates the focal length from the current .fov and .filmGauge.\n\t */\n\tgetFocalLength() {\n\n\t\tconst vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t}\n\n\tgetEffectiveFOV() {\n\n\t\treturn RAD2DEG * 2 * Math.atan(\n\t\t\tMath.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t}\n\n\tgetFilmWidth() {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t}\n\n\tgetFilmHeight() {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t}\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *\n\t * then for each monitor you would call it like this\n\t *\n\t *   const w = 1920;\n\t *   const h = 1080;\n\t *   const fullWidth = w * 3;\n\t *   const fullHeight = h * 2;\n\t *\n\t *   --A--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t *   --B--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t *   --C--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t *   --D--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t *   --E--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t *   --F--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t *\n\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t */\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tupdateProjectionMatrix() {\n\n\t\tconst near = this.near;\n\t\tlet top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;\n\t\tlet height = 2 * top;\n\t\tlet width = this.aspect * height;\n\t\tlet left = - 0.5 * width;\n\t\tconst view = this.view;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tconst skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n}\n\nPerspectiveCamera.prototype.isPerspectiveCamera = true;\n\nconst fov = 90, aspect = 1;\n\nclass CubeCamera extends Object3D {\n\n\tconstructor( near, far, renderTarget ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget !== true ) {\n\n\t\t\tconsole.error( 'THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.renderTarget = renderTarget;\n\n\t\tconst cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.layers = this.layers;\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tconst cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.layers = this.layers;\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tconst cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.layers = this.layers;\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tconst cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.layers = this.layers;\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tconst cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.layers = this.layers;\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tconst cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.layers = this.layers;\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t}\n\n\tupdate( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tconst renderTarget = this.renderTarget;\n\n\t\tconst [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;\n\n\t\tconst currentXrEnabled = renderer.xr.enabled;\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\trenderer.xr.enabled = false;\n\n\t\tconst generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderer.setRenderTarget( renderTarget, 0 );\n\t\trenderer.render( scene, cameraPX );\n\n\t\trenderer.setRenderTarget( renderTarget, 1 );\n\t\trenderer.render( scene, cameraNX );\n\n\t\trenderer.setRenderTarget( renderTarget, 2 );\n\t\trenderer.render( scene, cameraPY );\n\n\t\trenderer.setRenderTarget( renderTarget, 3 );\n\t\trenderer.render( scene, cameraNY );\n\n\t\trenderer.setRenderTarget( renderTarget, 4 );\n\t\trenderer.render( scene, cameraPZ );\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderer.setRenderTarget( renderTarget, 5 );\n\t\trenderer.render( scene, cameraNZ );\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\trenderer.xr.enabled = currentXrEnabled;\n\n\t}\n\n}\n\nclass CubeTexture extends Texture {\n\n\tconstructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n\t\tsuper( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tget images() {\n\n\t\treturn this.image;\n\n\t}\n\n\tset images( value ) {\n\n\t\tthis.image = value;\n\n\t}\n\n}\n\nCubeTexture.prototype.isCubeTexture = true;\n\nclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( size, options, dummy ) {\n\n\t\tif ( Number.isInteger( options ) ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )' );\n\n\t\t\toptions = dummy;\n\n\t\t}\n\n\t\tsuper( size, size, options );\n\n\t\toptions = options || {};\n\n\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\n\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\n\t\t// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\n\n\t\tthis.texture = new CubeTexture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t\tthis.texture._needsFlipEnvMap = false;\n\n\t}\n\n\tfromEquirectangularTexture( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.format = RGBAFormat; // see #18859\n\t\tthis.texture.encoding = texture.encoding;\n\n\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\tthis.texture.minFilter = texture.minFilter;\n\t\tthis.texture.magFilter = texture.magFilter;\n\n\t\tconst shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n\t\t};\n\n\t\tconst geometry = new BoxGeometry( 5, 5, 5 );\n\n\t\tconst material = new ShaderMaterial( {\n\n\t\t\tname: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tconst mesh = new Mesh( geometry, material );\n\n\t\tconst currentMinFilter = texture.minFilter;\n\n\t\t// Avoid blurred poles\n\t\tif ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;\n\n\t\tconst camera = new CubeCamera( 1, 10, this );\n\t\tcamera.update( renderer, mesh );\n\n\t\ttexture.minFilter = currentMinFilter;\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t}\n\n\tclear( renderer, color, depth, stencil ) {\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\trenderer.setRenderTarget( this, i );\n\n\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n}\n\nWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\nconst _vector1 = /*@__PURE__*/ new Vector3();\nconst _vector2 = /*@__PURE__*/ new Vector3();\nconst _normalMatrix = /*@__PURE__*/ new Matrix3();\n\nclass Plane {\n\n\tconstructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = normal;\n\t\tthis.constant = constant;\n\n\t}\n\n\tset( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponents( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromNormalAndCoplanarPoint( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCoplanarPoints( a, b, c ) {\n\n\t\tconst normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t}\n\n\tnormalize() {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tconst inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t}\n\n\tdistanceToSphere( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t}\n\n\tprojectPoint( point, target ) {\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t}\n\n\tintersectLine( line, target ) {\n\n\t\tconst direction = line.delta( _vector1 );\n\n\t\tconst denominator = this.normal.dot( direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\treturn target.copy( line.start );\n\n\t\t\t}\n\n\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t}\n\n\tintersectsLine( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tconst startSign = this.distanceToPoint( line.start );\n\t\tconst endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t}\n\n\tcoplanarPoint( target ) {\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t}\n\n\tapplyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\tconst referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\tconst normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.constant -= offset.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\tequals( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nPlane.prototype.isPlane = true;\n\nconst _sphere$2 = /*@__PURE__*/ new Sphere();\nconst _vector$7 = /*@__PURE__*/ new Vector3();\n\nclass Frustum {\n\n\tconstructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {\n\n\t\tthis.planes = [ p0, p1, p2, p3, p4, p5 ];\n\n\t}\n\n\tset( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tconst planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( frustum ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromProjectionMatrix( m ) {\n\n\t\tconst planes = this.planes;\n\t\tconst me = m.elements;\n\t\tconst me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tconst me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tconst me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tconst me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\tintersectsObject( object ) {\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$2.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$2 );\n\n\t}\n\n\tintersectsSprite( sprite ) {\n\n\t\t_sphere$2.center.set( 0, 0, 0 );\n\t\t_sphere$2.radius = 0.7071067811865476;\n\t\t_sphere$2.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$2 );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst planes = this.planes;\n\t\tconst center = sphere.center;\n\t\tconst negRadius = - sphere.radius;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst plane = planes[ i ];\n\n\t\t\t// corner at max distance\n\n\t\t\t_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\tif ( plane.distanceToPoint( _vector$7 ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nfunction WebGLAnimation() {\n\n\tlet context = null;\n\tlet isAnimating = false;\n\tlet animationLoop = null;\n\tlet requestId = null;\n\n\tfunction onAnimationFrame( time, frame ) {\n\n\t\tanimationLoop( time, frame );\n\n\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t}\n\n\treturn {\n\n\t\tstart: function () {\n\n\t\t\tif ( isAnimating === true ) return;\n\t\t\tif ( animationLoop === null ) return;\n\n\t\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t\t\tisAnimating = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tcontext.cancelAnimationFrame( requestId );\n\n\t\t\tisAnimating = false;\n\n\t\t},\n\n\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\tanimationLoop = callback;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\tcontext = value;\n\n\t\t}\n\n\t};\n\n}\n\nfunction WebGLAttributes( gl, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tconst buffers = new WeakMap();\n\n\tfunction createBuffer( attribute, bufferType ) {\n\n\t\tconst array = attribute.array;\n\t\tconst usage = attribute.usage;\n\n\t\tconst buffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\t\tgl.bufferData( bufferType, array, usage );\n\n\t\tattribute.onUploadCallback();\n\n\t\tlet type = 5126;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\ttype = 5126;\n\n\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\tif ( attribute.isFloat16BufferAttribute ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\ttype = 5131;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\ttype = 5123;\n\n\t\t\t}\n\n\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\ttype = 5122;\n\n\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\ttype = 5125;\n\n\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\ttype = 5124;\n\n\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\ttype = 5120;\n\n\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\ttype = 5121;\n\n\t\t} else if ( array instanceof Uint8ClampedArray ) {\n\n\t\t\ttype = 5121;\n\n\t\t}\n\n\t\treturn {\n\t\t\tbuffer: buffer,\n\t\t\ttype: type,\n\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\tversion: attribute.version\n\t\t};\n\n\t}\n\n\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\tconst array = attribute.array;\n\t\tconst updateRange = attribute.updateRange;\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\tif ( updateRange.count === - 1 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t} else {\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray, updateRange.offset, updateRange.count );\n\n\t\t\t} else {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t}\n\n\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction get( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\treturn buffers.get( attribute );\n\n\t}\n\n\tfunction remove( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tconst data = buffers.get( attribute );\n\n\t\tif ( data ) {\n\n\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\tbuffers.delete( attribute );\n\n\t\t}\n\n\t}\n\n\tfunction update( attribute, bufferType ) {\n\n\t\tif ( attribute.isGLBufferAttribute ) {\n\n\t\t\tconst cached = buffers.get( attribute );\n\n\t\t\tif ( ! cached || cached.version < attribute.version ) {\n\n\t\t\t\tbuffers.set( attribute, {\n\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\tversion: attribute.version\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tconst data = buffers.get( attribute );\n\n\t\tif ( data === undefined ) {\n\n\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\tdata.version = attribute.version;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update\n\n\t};\n\n}\n\nclass PlaneGeometry extends BufferGeometry {\n\n\tconstructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {\n\n\t\tsuper();\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tconst width_half = width / 2;\n\t\tconst height_half = height / 2;\n\n\t\tconst gridX = Math.floor( widthSegments );\n\t\tconst gridY = Math.floor( heightSegments );\n\n\t\tconst gridX1 = gridX + 1;\n\t\tconst gridY1 = gridY + 1;\n\n\t\tconst segment_width = width / gridX;\n\t\tconst segment_height = height / gridY;\n\n\t\t//\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tconst y = iy * segment_height - height_half;\n\n\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tconst x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tconst a = ix + gridX1 * iy;\n\t\t\t\tconst b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tconst c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tconst d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );\n\n\t}\n\n}\n\nvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\nvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\nvar alphatest_fragment = \"#ifdef USE_ALPHATEST\\n\\tif ( diffuseColor.a < alphaTest ) discard;\\n#endif\";\n\nvar alphatest_pars_fragment = \"#ifdef USE_ALPHATEST\\n\\tuniform float alphaTest;\\n#endif\";\n\nvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\\n\\t#endif\\n#endif\";\n\nvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\nvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\nvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\nvar bsdfs = \"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n}\\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( f0, f90, dotVH );\\n\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( V * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie( float roughness, float dotNH ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tfloat invAlpha = 1.0 / alpha;\\n\\tfloat cos2h = dotNH * dotNH;\\n\\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\\n\\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\\n}\\nfloat V_Neubelt( float dotNV, float dotNL ) {\\n\\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\\n}\\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenTint, const in float sheenRoughness ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat D = D_Charlie( sheenRoughness, dotNH );\\n\\tfloat V = V_Neubelt( dotNV, dotNL );\\n\\treturn sheenTint * ( D * V );\\n}\\n#endif\";\n\nvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\nvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\nvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\nvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\nvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\nvar color_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\nvar color_pars_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_pars_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\nvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract( sin( sn ) * c );\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\nvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\nvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\nvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\nvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\nvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\nvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\nvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\nvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\nvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\nvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\nvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\nvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\nvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar fog_vertex = \"#ifdef USE_FOG\\n\\tvFogDepth = - mvPosition.z;\\n#endif\";\n\nvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float vFogDepth;\\n#endif\";\n\nvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\nvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float vFogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\nvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\nvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tlightMapIrradiance *= PI;\\n\\t#endif\\n\\treflectedLight.indirectDiffuse += lightMapIrradiance;\\n#endif\";\n\nvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\nvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\nvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\\n\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\treturn irradiance;\\n}\\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tif ( cutoffDistance > 0.0 ) {\\n\\t\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t}\\n\\t\\treturn distanceFalloff;\\n\\t#else\\n\\t\\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\t\\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t#endif\\n}\\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\\n\\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tlight.color = directionalLight.color;\\n\\t\\tlight.direction = directionalLight.direction;\\n\\t\\tlight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tlight.color = pointLight.color;\\n\\t\\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat angleCos = dot( light.direction, spotLight.direction );\\n\\t\\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\tif ( spotAttenuation > 0.0 ) {\\n\\t\\t\\tfloat lightDistance = length( lVector );\\n\\t\\t\\tlight.color = spotLight.color * spotAttenuation;\\n\\t\\t\\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t\\t} else {\\n\\t\\t\\tlight.color = vec3( 0.0 );\\n\\t\\t\\tlight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\\n\\t\\tfloat dotNL = dot( normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\nvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getIBLIrradiance( const in vec3 normal ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 reflectVec;\\n\\t\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\t\\treflectVec = reflect( - viewDir, normal );\\n\\t\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\treflectVec = refract( - viewDir, normal, refractionRatio );\\n\\t\\t\\t#endif\\n\\t\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\nvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\nvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\nvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\nvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\\nmaterial.roughness = min( material.roughness, 1.0 );\\n#ifdef IOR\\n\\t#ifdef SPECULAR\\n\\t\\tfloat specularIntensityFactor = specularIntensity;\\n\\t\\tvec3 specularTintFactor = specularTint;\\n\\t\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\t\\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\\n\\t\\t#endif\\n\\t\\t#ifdef USE_SPECULARTINTMAP\\n\\t\\t\\tspecularTintFactor *= specularTintMapTexelToLinear( texture2D( specularTintMap, vUv ) ).rgb;\\n\\t\\t#endif\\n\\t\\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\\n\\t#else\\n\\t\\tfloat specularIntensityFactor = 1.0;\\n\\t\\tvec3 specularTintFactor = vec3( 1.0 );\\n\\t\\tmaterial.specularF90 = 1.0;\\n\\t#endif\\n\\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularTintFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.specularF90 = 1.0;\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\tmaterial.clearcoatF0 = vec3( 0.04 );\\n\\tmaterial.clearcoatF90 = 1.0;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenTint = sheenTint;\\n\\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\\n#endif\";\n\nvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat roughness;\\n\\tvec3 specularColor;\\n\\tfloat specularF90;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat clearcoat;\\n\\t\\tfloat clearcoatRoughness;\\n\\t\\tvec3 clearcoatF0;\\n\\t\\tfloat clearcoatF90;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tvec3 sheenTint;\\n\\t\\tfloat sheenRoughness;\\n\\t#endif\\n};\\nvec3 clearcoatSpecular = vec3( 0.0 );\\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\\n\\treturn fab;\\n}\\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\treturn specularColor * fab.x + specularF90 * fab.y;\\n}\\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\\n\\tfloat Ess = fab.x + fab.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.roughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = dotNLcc * directLight.color;\\n\\t\\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenTint, material.sheenRoughness );\\n\\t#endif\\n\\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\nvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef USE_CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointLightInfo( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotLightInfo( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\nvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getIBLIrradiance( geometry.normal );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\\n\\t#endif\\n#endif\";\n\nvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\nvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\nvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\nvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\nvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\nvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\nvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\nvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\nvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\nvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\nvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\nvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\tif ( morphTargetInfluences[ i ] > 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];\\n\\t\\t}\\n\\t#else\\n\\t\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\t\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\t\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\t\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n\\t#endif\\n#endif\";\n\nvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\\n\\t\\tuniform sampler2DArray morphTargetsTexture;\\n\\t\\tuniform vec2 morphTargetsTextureSize;\\n\\t\\tvec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {\\n\\t\\t\\tfloat texelIndex = float( vertexIndex * stride + offset );\\n\\t\\t\\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\\n\\t\\t\\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\\n\\t\\t\\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\\n\\t\\t\\treturn texture( morphTargetsTexture, morphUV ).xyz;\\n\\t\\t}\\n\\t#else\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t\\t#else\\n\\t\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\t\\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\\n\\t\\t\\t#else\\n\\t\\t\\t\\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\\n\\t\\t\\t#endif\\n\\t\\t}\\n\\t#else\\n\\t\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\t\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\t\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\t\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\nvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\n\nvar normal_pars_fragment = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\nvar normal_pars_vertex = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\nvar normal_vertex = \"#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\";\n\nvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif\";\n\nvar clearcoat_normal_fragment_begin = \"#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\nvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif\";\n\nvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\nvar output_fragment = \"#ifdef OPAQUE\\ndiffuseColor.a = 1.0;\\n#endif\\n#ifdef USE_TRANSMISSION\\ndiffuseColor.a *= transmissionAlpha + 0.1;\\n#endif\\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\";\n\nvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\nvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\nvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\nvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\nvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\nvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\nvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\nvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\nvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\nvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\nvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\nvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\nvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\nvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\nvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\nvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\nvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\nvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\nvar transmission_fragment = \"#ifdef USE_TRANSMISSION\\n\\tfloat transmissionAlpha = 1.0;\\n\\tfloat transmissionFactor = transmission;\\n\\tfloat thicknessFactor = thickness;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 n = inverseTransformDirection( normal, viewMatrix );\\n\\tvec4 transmission = getIBLVolumeRefraction(\\n\\t\\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\\n\\t\\tattenuationTint, attenuationDistance );\\n\\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\\n\\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\\n#endif\";\n\nvar transmission_pars_fragment = \"#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform float attenuationDistance;\\n\\tuniform vec3 attenuationTint;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec3 vWorldPosition;\\n\\tvec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {\\n\\t\\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\\n\\t\\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\\n\\t\\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\\n\\t\\treturn normalize( refractionVector ) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness( float roughness, float ior ) {\\n\\t\\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\\n\\t}\\n\\tvec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {\\n\\t\\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\\n\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\\n\\t\\t#else\\n\\t\\t\\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {\\n\\t\\tif ( attenuationDistance == 0.0 ) {\\n\\t\\t\\treturn radiance;\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\\t\\t\\treturn transmittance * radiance;\\n\\t\\t}\\n\\t}\\n\\tvec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,\\n\\t\\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\\n\\t\\tvec3 attenuationColor, float attenuationDistance ) {\\n\\t\\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\\n\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\\n\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\trefractionCoords += 1.0;\\n\\t\\trefractionCoords /= 2.0;\\n\\t\\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\\n\\t\\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\\n\\t\\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\\n\\t\\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\\n\\t}\\n#endif\";\n\nvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\nvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\nvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\nvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\nvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\nvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\nvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\nconst vertex$g = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\nconst fragment$g = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$f = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\nconst fragment$f = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$e = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\nconst fragment$e = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\nconst vertex$d = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\nconst fragment$d = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\nconst vertex$c = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\nconst fragment$c = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$b = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$b = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\nconst vertex$a = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinbase_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$a = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$9 = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$9 = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$8 = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\nconst fragment$8 = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$7 = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\nconst fragment$7 = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\nconst vertex$6 = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$6 = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$5 = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec3 vWorldPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition.xyz;\\n#endif\\n}\";\n\nconst fragment$5 = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define IOR\\n\\t#define SPECULAR\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef IOR\\n\\tuniform float ior;\\n#endif\\n#ifdef SPECULAR\\n\\tuniform float specularIntensity;\\n\\tuniform vec3 specularTint;\\n\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\tuniform sampler2D specularIntensityMap;\\n\\t#endif\\n\\t#ifdef USE_SPECULARTINTMAP\\n\\t\\tuniform sampler2D specularTintMap;\\n\\t#endif\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheenTint;\\n\\tuniform float sheenRoughness;\\n#endif\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_physical_pars_fragment>\\n#include <transmission_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\\n\\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\\n\\t#include <transmission_fragment>\\n\\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\\n\\t\\toutgoingLight = outgoingLight * ( 1.0 - clearcoat * Fcc ) + clearcoatSpecular * clearcoat;\\n\\t#endif\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$4 = \"#define TOON\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$4 = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$3 = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$3 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\nconst vertex$2 = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$2 = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nconst vertex$1 = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$1 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nconst ShaderChunk = {\n\talphamap_fragment: alphamap_fragment,\n\talphamap_pars_fragment: alphamap_pars_fragment,\n\talphatest_fragment: alphatest_fragment,\n\talphatest_pars_fragment: alphatest_pars_fragment,\n\taomap_fragment: aomap_fragment,\n\taomap_pars_fragment: aomap_pars_fragment,\n\tbegin_vertex: begin_vertex,\n\tbeginnormal_vertex: beginnormal_vertex,\n\tbsdfs: bsdfs,\n\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\tclipping_planes_fragment: clipping_planes_fragment,\n\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\tclipping_planes_vertex: clipping_planes_vertex,\n\tcolor_fragment: color_fragment,\n\tcolor_pars_fragment: color_pars_fragment,\n\tcolor_pars_vertex: color_pars_vertex,\n\tcolor_vertex: color_vertex,\n\tcommon: common,\n\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\tdefaultnormal_vertex: defaultnormal_vertex,\n\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\tdisplacementmap_vertex: displacementmap_vertex,\n\temissivemap_fragment: emissivemap_fragment,\n\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\tencodings_fragment: encodings_fragment,\n\tencodings_pars_fragment: encodings_pars_fragment,\n\tenvmap_fragment: envmap_fragment,\n\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\tenvmap_pars_fragment: envmap_pars_fragment,\n\tenvmap_pars_vertex: envmap_pars_vertex,\n\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\tenvmap_vertex: envmap_vertex,\n\tfog_vertex: fog_vertex,\n\tfog_pars_vertex: fog_pars_vertex,\n\tfog_fragment: fog_fragment,\n\tfog_pars_fragment: fog_pars_fragment,\n\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\tlightmap_fragment: lightmap_fragment,\n\tlightmap_pars_fragment: lightmap_pars_fragment,\n\tlights_lambert_vertex: lights_lambert_vertex,\n\tlights_pars_begin: lights_pars_begin,\n\tlights_toon_fragment: lights_toon_fragment,\n\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\tlights_phong_fragment: lights_phong_fragment,\n\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\tlights_physical_fragment: lights_physical_fragment,\n\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\tlights_fragment_begin: lights_fragment_begin,\n\tlights_fragment_maps: lights_fragment_maps,\n\tlights_fragment_end: lights_fragment_end,\n\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\tmap_fragment: map_fragment,\n\tmap_pars_fragment: map_pars_fragment,\n\tmap_particle_fragment: map_particle_fragment,\n\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\tmetalnessmap_fragment: metalnessmap_fragment,\n\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\tmorphnormal_vertex: morphnormal_vertex,\n\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\tmorphtarget_vertex: morphtarget_vertex,\n\tnormal_fragment_begin: normal_fragment_begin,\n\tnormal_fragment_maps: normal_fragment_maps,\n\tnormal_pars_fragment: normal_pars_fragment,\n\tnormal_pars_vertex: normal_pars_vertex,\n\tnormal_vertex: normal_vertex,\n\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\toutput_fragment: output_fragment,\n\tpacking: packing,\n\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\tproject_vertex: project_vertex,\n\tdithering_fragment: dithering_fragment,\n\tdithering_pars_fragment: dithering_pars_fragment,\n\troughnessmap_fragment: roughnessmap_fragment,\n\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\tshadowmap_vertex: shadowmap_vertex,\n\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\tskinbase_vertex: skinbase_vertex,\n\tskinning_pars_vertex: skinning_pars_vertex,\n\tskinning_vertex: skinning_vertex,\n\tskinnormal_vertex: skinnormal_vertex,\n\tspecularmap_fragment: specularmap_fragment,\n\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\ttonemapping_fragment: tonemapping_fragment,\n\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\ttransmission_fragment: transmission_fragment,\n\ttransmission_pars_fragment: transmission_pars_fragment,\n\tuv_pars_fragment: uv_pars_fragment,\n\tuv_pars_vertex: uv_pars_vertex,\n\tuv_vertex: uv_vertex,\n\tuv2_pars_fragment: uv2_pars_fragment,\n\tuv2_pars_vertex: uv2_pars_vertex,\n\tuv2_vertex: uv2_vertex,\n\tworldpos_vertex: worldpos_vertex,\n\n\tbackground_vert: vertex$g,\n\tbackground_frag: fragment$g,\n\tcube_vert: vertex$f,\n\tcube_frag: fragment$f,\n\tdepth_vert: vertex$e,\n\tdepth_frag: fragment$e,\n\tdistanceRGBA_vert: vertex$d,\n\tdistanceRGBA_frag: fragment$d,\n\tequirect_vert: vertex$c,\n\tequirect_frag: fragment$c,\n\tlinedashed_vert: vertex$b,\n\tlinedashed_frag: fragment$b,\n\tmeshbasic_vert: vertex$a,\n\tmeshbasic_frag: fragment$a,\n\tmeshlambert_vert: vertex$9,\n\tmeshlambert_frag: fragment$9,\n\tmeshmatcap_vert: vertex$8,\n\tmeshmatcap_frag: fragment$8,\n\tmeshnormal_vert: vertex$7,\n\tmeshnormal_frag: fragment$7,\n\tmeshphong_vert: vertex$6,\n\tmeshphong_frag: fragment$6,\n\tmeshphysical_vert: vertex$5,\n\tmeshphysical_frag: fragment$5,\n\tmeshtoon_vert: vertex$4,\n\tmeshtoon_frag: fragment$4,\n\tpoints_vert: vertex$3,\n\tpoints_frag: fragment$3,\n\tshadow_vert: vertex$2,\n\tshadow_frag: fragment$2,\n\tsprite_vert: vertex$1,\n\tsprite_frag: fragment$1\n};\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nconst UniformsLib = {\n\n\tcommon: {\n\n\t\tdiffuse: { value: new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\n\t\tmap: { value: null },\n\t\tuvTransform: { value: new Matrix3() },\n\t\tuv2Transform: { value: new Matrix3() },\n\n\t\talphaMap: { value: null },\n\t\talphaTest: { value: 0 }\n\n\t},\n\n\tspecularmap: {\n\n\t\tspecularMap: { value: null },\n\n\t},\n\n\tenvmap: {\n\n\t\tenvMap: { value: null },\n\t\tflipEnvMap: { value: - 1 },\n\t\treflectivity: { value: 1.0 }, // basic, lambert, phong\n\t\tior: { value: 1.5 }, // standard, physical\n\t\trefractionRatio: { value: 0.98 },\n\t\tmaxMipLevel: { value: 0 }\n\n\t},\n\n\taomap: {\n\n\t\taoMap: { value: null },\n\t\taoMapIntensity: { value: 1 }\n\n\t},\n\n\tlightmap: {\n\n\t\tlightMap: { value: null },\n\t\tlightMapIntensity: { value: 1 }\n\n\t},\n\n\temissivemap: {\n\n\t\temissiveMap: { value: null }\n\n\t},\n\n\tbumpmap: {\n\n\t\tbumpMap: { value: null },\n\t\tbumpScale: { value: 1 }\n\n\t},\n\n\tnormalmap: {\n\n\t\tnormalMap: { value: null },\n\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t},\n\n\tdisplacementmap: {\n\n\t\tdisplacementMap: { value: null },\n\t\tdisplacementScale: { value: 1 },\n\t\tdisplacementBias: { value: 0 }\n\n\t},\n\n\troughnessmap: {\n\n\t\troughnessMap: { value: null }\n\n\t},\n\n\tmetalnessmap: {\n\n\t\tmetalnessMap: { value: null }\n\n\t},\n\n\tgradientmap: {\n\n\t\tgradientMap: { value: null }\n\n\t},\n\n\tfog: {\n\n\t\tfogDensity: { value: 0.00025 },\n\t\tfogNear: { value: 1 },\n\t\tfogFar: { value: 2000 },\n\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t},\n\n\tlights: {\n\n\t\tambientLightColor: { value: [] },\n\n\t\tlightProbe: { value: [] },\n\n\t\tdirectionalLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tcolor: {}\n\t\t} },\n\n\t\tdirectionalLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tdirectionalShadowMap: { value: [] },\n\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\tspotLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdirection: {},\n\t\t\tdistance: {},\n\t\t\tconeCos: {},\n\t\t\tpenumbraCos: {},\n\t\t\tdecay: {}\n\t\t} },\n\n\t\tspotLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tspotShadowMap: { value: [] },\n\t\tspotShadowMatrix: { value: [] },\n\n\t\tpointLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdecay: {},\n\t\t\tdistance: {}\n\t\t} },\n\n\t\tpointLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {},\n\t\t\tshadowCameraNear: {},\n\t\t\tshadowCameraFar: {}\n\t\t} },\n\n\t\tpointShadowMap: { value: [] },\n\t\tpointShadowMatrix: { value: [] },\n\n\t\themisphereLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tskyColor: {},\n\t\t\tgroundColor: {}\n\t\t} },\n\n\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\trectAreaLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\twidth: {},\n\t\t\theight: {}\n\t\t} },\n\n\t\tltc_1: { value: null },\n\t\tltc_2: { value: null }\n\n\t},\n\n\tpoints: {\n\n\t\tdiffuse: { value: new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\t\tsize: { value: 1.0 },\n\t\tscale: { value: 1.0 },\n\t\tmap: { value: null },\n\t\talphaMap: { value: null },\n\t\talphaTest: { value: 0 },\n\t\tuvTransform: { value: new Matrix3() }\n\n\t},\n\n\tsprite: {\n\n\t\tdiffuse: { value: new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\n\t\trotation: { value: 0.0 },\n\t\tmap: { value: null },\n\t\talphaMap: { value: null },\n\t\talphaTest: { value: 0 },\n\t\tuvTransform: { value: new Matrix3() }\n\n\t}\n\n};\n\nconst ShaderLib = {\n\n\tbasic: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t},\n\n\tlambert: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t},\n\n\tphong: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\tshininess: { value: 30 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t},\n\n\tstandard: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.roughnessmap,\n\t\t\tUniformsLib.metalnessmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\troughness: { value: 1.0 },\n\t\t\t\tmetalness: { value: 0.0 },\n\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t},\n\n\ttoon: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.gradientmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\n\t},\n\n\tmatcap: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tmatcap: { value: null }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\n\t},\n\n\tpoints: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.points,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.points_vert,\n\t\tfragmentShader: ShaderChunk.points_frag\n\n\t},\n\n\tdashed: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tscale: { value: 1 },\n\t\t\t\tdashSize: { value: 1 },\n\t\t\t\ttotalSize: { value: 2 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t},\n\n\tdepth: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.depth_vert,\n\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t},\n\n\tnormal: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshnormal_vert,\n\t\tfragmentShader: ShaderChunk.meshnormal_frag\n\n\t},\n\n\tsprite: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.sprite,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t},\n\n\tbackground: {\n\n\t\tuniforms: {\n\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\tt2D: { value: null },\n\t\t},\n\n\t\tvertexShader: ShaderChunk.background_vert,\n\t\tfragmentShader: ShaderChunk.background_frag\n\n\t},\n\t/* -------------------------------------------------------------------------\n\t//\tCube map shader\n\t ------------------------------------------------------------------------- */\n\n\tcube: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.envmap,\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.cube_vert,\n\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t},\n\n\tequirect: {\n\n\t\tuniforms: {\n\t\t\ttEquirect: { value: null },\n\t\t},\n\n\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t},\n\n\tdistanceRGBA: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t},\n\n\tshadow: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.lights,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t}\n\n};\n\nShaderLib.physical = {\n\n\tuniforms: mergeUniforms( [\n\t\tShaderLib.standard.uniforms,\n\t\t{\n\t\t\tclearcoat: { value: 0 },\n\t\t\tclearcoatMap: { value: null },\n\t\t\tclearcoatRoughness: { value: 0 },\n\t\t\tclearcoatRoughnessMap: { value: null },\n\t\t\tclearcoatNormalScale: { value: new Vector2( 1, 1 ) },\n\t\t\tclearcoatNormalMap: { value: null },\n\t\t\tsheen: { value: 0 },\n\t\t\tsheenTint: { value: new Color( 0x000000 ) },\n\t\t\tsheenRoughness: { value: 0 },\n\t\t\ttransmission: { value: 0 },\n\t\t\ttransmissionMap: { value: null },\n\t\t\ttransmissionSamplerSize: { value: new Vector2() },\n\t\t\ttransmissionSamplerMap: { value: null },\n\t\t\tthickness: { value: 0 },\n\t\t\tthicknessMap: { value: null },\n\t\t\tattenuationDistance: { value: 0 },\n\t\t\tattenuationTint: { value: new Color( 0x000000 ) },\n\t\t\tspecularIntensity: { value: 0 },\n\t\t\tspecularIntensityMap: { value: null },\n\t\t\tspecularTint: { value: new Color( 1, 1, 1 ) },\n\t\t\tspecularTintMap: { value: null },\n\t\t}\n\t] ),\n\n\tvertexShader: ShaderChunk.meshphysical_vert,\n\tfragmentShader: ShaderChunk.meshphysical_frag\n\n};\n\nfunction WebGLBackground( renderer, cubemaps, state, objects, premultipliedAlpha ) {\n\n\tconst clearColor = new Color( 0x000000 );\n\tlet clearAlpha = 0;\n\n\tlet planeMesh;\n\tlet boxMesh;\n\n\tlet currentBackground = null;\n\tlet currentBackgroundVersion = 0;\n\tlet currentTonemapping = null;\n\n\tfunction render( renderList, scene ) {\n\n\t\tlet forceClear = false;\n\t\tlet background = scene.isScene === true ? scene.background : null;\n\n\t\tif ( background && background.isTexture ) {\n\n\t\t\tbackground = cubemaps.get( background );\n\n\t\t}\n\n\t\t// Ignore background in AR\n\t\t// TODO: Reconsider this.\n\n\t\tconst xr = renderer.xr;\n\t\tconst session = xr.getSession && xr.getSession();\n\n\t\tif ( session && session.environmentBlendMode === 'additive' ) {\n\n\t\t\tbackground = null;\n\n\t\t}\n\n\t\tif ( background === null ) {\n\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t} else if ( background && background.isColor ) {\n\n\t\t\tsetClear( background, 1 );\n\t\t\tforceClear = true;\n\n\t\t}\n\n\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\tif ( background && ( background.isCubeTexture || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\tnew BoxGeometry( 1, 1, 1 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\tObject.defineProperty( boxMesh.material, 'envMap', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t}\n\n\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\tboxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t}\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t} else if ( background && background.isTexture ) {\n\n\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\tnew PlaneGeometry( 2, 2 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\tbackground.updateMatrix();\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t}\n\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t}\n\n\t}\n\n\tfunction setClear( color, alpha ) {\n\n\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t}\n\n\treturn {\n\n\t\tgetClearColor: function () {\n\n\t\t\treturn clearColor;\n\n\t\t},\n\t\tsetClearColor: function ( color, alpha = 1 ) {\n\n\t\t\tclearColor.set( color );\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\tgetClearAlpha: function () {\n\n\t\t\treturn clearAlpha;\n\n\t\t},\n\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\trender: render\n\n\t};\n\n}\n\nfunction WebGLBindingStates( gl, extensions, attributes, capabilities ) {\n\n\tconst maxVertexAttributes = gl.getParameter( 34921 );\n\n\tconst extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );\n\tconst vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\n\tconst bindingStates = {};\n\n\tconst defaultState = createBindingState( null );\n\tlet currentState = defaultState;\n\n\tfunction setup( object, material, program, geometry, index ) {\n\n\t\tlet updateBuffers = false;\n\n\t\tif ( vaoAvailable ) {\n\n\t\t\tconst state = getBindingState( geometry, program, material );\n\n\t\t\tif ( currentState !== state ) {\n\n\t\t\t\tcurrentState = state;\n\t\t\t\tbindVertexArrayObject( currentState.object );\n\n\t\t\t}\n\n\t\t\tupdateBuffers = needsUpdate( geometry, index );\n\n\t\t\tif ( updateBuffers ) saveCache( geometry, index );\n\n\t\t} else {\n\n\t\t\tconst wireframe = ( material.wireframe === true );\n\n\t\t\tif ( currentState.geometry !== geometry.id ||\n\t\t\t\tcurrentState.program !== program.id ||\n\t\t\t\tcurrentState.wireframe !== wireframe ) {\n\n\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\tcurrentState.program = program.id;\n\t\t\t\tcurrentState.wireframe = wireframe;\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh === true ) {\n\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\tif ( index !== null ) {\n\n\t\t\tattributes.update( index, 34963 );\n\n\t\t}\n\n\t\tif ( updateBuffers ) {\n\n\t\t\tsetupVertexAttributes( object, material, program, geometry );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tgl.bindBuffer( 34963, attributes.get( index ).buffer );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction createVertexArrayObject() {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.createVertexArray();\n\n\t\treturn extension.createVertexArrayOES();\n\n\t}\n\n\tfunction bindVertexArrayObject( vao ) {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.bindVertexArray( vao );\n\n\t\treturn extension.bindVertexArrayOES( vao );\n\n\t}\n\n\tfunction deleteVertexArrayObject( vao ) {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.deleteVertexArray( vao );\n\n\t\treturn extension.deleteVertexArrayOES( vao );\n\n\t}\n\n\tfunction getBindingState( geometry, program, material ) {\n\n\t\tconst wireframe = ( material.wireframe === true );\n\n\t\tlet programMap = bindingStates[ geometry.id ];\n\n\t\tif ( programMap === undefined ) {\n\n\t\t\tprogramMap = {};\n\t\t\tbindingStates[ geometry.id ] = programMap;\n\n\t\t}\n\n\t\tlet stateMap = programMap[ program.id ];\n\n\t\tif ( stateMap === undefined ) {\n\n\t\t\tstateMap = {};\n\t\t\tprogramMap[ program.id ] = stateMap;\n\n\t\t}\n\n\t\tlet state = stateMap[ wireframe ];\n\n\t\tif ( state === undefined ) {\n\n\t\t\tstate = createBindingState( createVertexArrayObject() );\n\t\t\tstateMap[ wireframe ] = state;\n\n\t\t}\n\n\t\treturn state;\n\n\t}\n\n\tfunction createBindingState( vao ) {\n\n\t\tconst newAttributes = [];\n\t\tconst enabledAttributes = [];\n\t\tconst attributeDivisors = [];\n\n\t\tfor ( let i = 0; i < maxVertexAttributes; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\t\t\tenabledAttributes[ i ] = 0;\n\t\t\tattributeDivisors[ i ] = 0;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\tgeometry: null,\n\t\t\tprogram: null,\n\t\t\twireframe: false,\n\n\t\t\tnewAttributes: newAttributes,\n\t\t\tenabledAttributes: enabledAttributes,\n\t\t\tattributeDivisors: attributeDivisors,\n\t\t\tobject: vao,\n\t\t\tattributes: {},\n\t\t\tindex: null\n\n\t\t};\n\n\t}\n\n\tfunction needsUpdate( geometry, index ) {\n\n\t\tconst cachedAttributes = currentState.attributes;\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\tlet attributesNum = 0;\n\n\t\tfor ( const key in geometryAttributes ) {\n\n\t\t\tconst cachedAttribute = cachedAttributes[ key ];\n\t\t\tconst geometryAttribute = geometryAttributes[ key ];\n\n\t\t\tif ( cachedAttribute === undefined ) return true;\n\n\t\t\tif ( cachedAttribute.attribute !== geometryAttribute ) return true;\n\n\t\t\tif ( cachedAttribute.data !== geometryAttribute.data ) return true;\n\n\t\t\tattributesNum ++;\n\n\t\t}\n\n\t\tif ( currentState.attributesNum !== attributesNum ) return true;\n\n\t\tif ( currentState.index !== index ) return true;\n\n\t\treturn false;\n\n\t}\n\n\tfunction saveCache( geometry, index ) {\n\n\t\tconst cache = {};\n\t\tconst attributes = geometry.attributes;\n\t\tlet attributesNum = 0;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\n\t\t\tconst data = {};\n\t\t\tdata.attribute = attribute;\n\n\t\t\tif ( attribute.data ) {\n\n\t\t\t\tdata.data = attribute.data;\n\n\t\t\t}\n\n\t\t\tcache[ key ] = data;\n\n\t\t\tattributesNum ++;\n\n\t\t}\n\n\t\tcurrentState.attributes = cache;\n\t\tcurrentState.attributesNum = attributesNum;\n\n\t\tcurrentState.index = index;\n\n\t}\n\n\tfunction initAttributes() {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\n\t\tfor ( let i = 0, il = newAttributes.length; i < il; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\tfunction enableAttribute( attribute ) {\n\n\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t}\n\n\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\t\tconst enabledAttributes = currentState.enabledAttributes;\n\t\tconst attributeDivisors = currentState.attributeDivisors;\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\tconst extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t}\n\n\t}\n\n\tfunction disableUnusedAttributes() {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\t\tconst enabledAttributes = currentState.enabledAttributes;\n\n\t\tfor ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {\n\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction vertexAttribPointer( index, size, type, normalized, stride, offset ) {\n\n\t\tif ( capabilities.isWebGL2 === true && ( type === 5124 || type === 5125 ) ) {\n\n\t\t\tgl.vertexAttribIPointer( index, size, type, stride, offset );\n\n\t\t} else {\n\n\t\t\tgl.vertexAttribPointer( index, size, type, normalized, stride, offset );\n\n\t\t}\n\n\t}\n\n\tfunction setupVertexAttributes( object, material, program, geometry ) {\n\n\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n\n\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;\n\n\t\t}\n\n\t\tinitAttributes();\n\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tconst materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\tfor ( const name in programAttributes ) {\n\n\t\t\tconst programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute.location >= 0 ) {\n\n\t\t\t\tlet geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute === undefined ) {\n\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\tconst normalized = geometryAttribute.normalized;\n\t\t\t\t\tconst size = geometryAttribute.itemSize;\n\n\t\t\t\t\tconst attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\tconst bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tconst data = geometryAttribute.data;\n\t\t\t\t\t\tconst stride = data.stride;\n\t\t\t\t\t\tconst offset = geometryAttribute.offset;\n\n\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute.location + i, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute.location + i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgl.bindBuffer( 34962, buffer );\n\n\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\tvertexAttribPointer(\n\t\t\t\t\t\t\t\tprogramAttribute.location + i,\n\t\t\t\t\t\t\t\tsize / programAttribute.locationSize,\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tnormalized,\n\t\t\t\t\t\t\t\tstride * bytesPerElement,\n\t\t\t\t\t\t\t\t( offset + ( size / programAttribute.locationSize ) * i ) * bytesPerElement\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute.location + i, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute.location + i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgl.bindBuffer( 34962, buffer );\n\n\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\tvertexAttribPointer(\n\t\t\t\t\t\t\t\tprogramAttribute.location + i,\n\t\t\t\t\t\t\t\tsize / programAttribute.locationSize,\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tnormalized,\n\t\t\t\t\t\t\t\tsize * bytesPerElement,\n\t\t\t\t\t\t\t\t( size / programAttribute.locationSize ) * i * bytesPerElement\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\tconst value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\tgl.vertexAttrib2fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\tgl.vertexAttrib3fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\tgl.vertexAttrib4fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tgl.vertexAttrib1fv( programAttribute.location, value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tdisableUnusedAttributes();\n\n\t}\n\n\tfunction dispose() {\n\n\t\treset();\n\n\t\tfor ( const geometryId in bindingStates ) {\n\n\t\t\tconst programMap = bindingStates[ geometryId ];\n\n\t\t\tfor ( const programId in programMap ) {\n\n\t\t\t\tconst stateMap = programMap[ programId ];\n\n\t\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[ programId ];\n\n\t\t\t}\n\n\t\t\tdelete bindingStates[ geometryId ];\n\n\t\t}\n\n\t}\n\n\tfunction releaseStatesOfGeometry( geometry ) {\n\n\t\tif ( bindingStates[ geometry.id ] === undefined ) return;\n\n\t\tconst programMap = bindingStates[ geometry.id ];\n\n\t\tfor ( const programId in programMap ) {\n\n\t\t\tconst stateMap = programMap[ programId ];\n\n\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t}\n\n\t\t\tdelete programMap[ programId ];\n\n\t\t}\n\n\t\tdelete bindingStates[ geometry.id ];\n\n\t}\n\n\tfunction releaseStatesOfProgram( program ) {\n\n\t\tfor ( const geometryId in bindingStates ) {\n\n\t\t\tconst programMap = bindingStates[ geometryId ];\n\n\t\t\tif ( programMap[ program.id ] === undefined ) continue;\n\n\t\t\tconst stateMap = programMap[ program.id ];\n\n\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t}\n\n\t\t\tdelete programMap[ program.id ];\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\tresetDefaultState();\n\n\t\tif ( currentState === defaultState ) return;\n\n\t\tcurrentState = defaultState;\n\t\tbindVertexArrayObject( currentState.object );\n\n\t}\n\n\t// for backward-compatilibity\n\n\tfunction resetDefaultState() {\n\n\t\tdefaultState.geometry = null;\n\t\tdefaultState.program = null;\n\t\tdefaultState.wireframe = false;\n\n\t}\n\n\treturn {\n\n\t\tsetup: setup,\n\t\treset: reset,\n\t\tresetDefaultState: resetDefaultState,\n\t\tdispose: dispose,\n\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\n\t\tinitAttributes: initAttributes,\n\t\tenableAttribute: enableAttribute,\n\t\tdisableUnusedAttributes: disableUnusedAttributes\n\n\t};\n\n}\n\nfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tlet mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawArrays( mode, start, count );\n\n\t\tinfo.update( count, mode, 1 );\n\n\t}\n\n\tfunction renderInstances( start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tlet extension, methodName;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\nfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\tlet maxAnisotropy;\n\n\tfunction getMaxAnisotropy() {\n\n\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t} else {\n\n\t\t\tmaxAnisotropy = 0;\n\n\t\t}\n\n\t\treturn maxAnisotropy;\n\n\t}\n\n\tfunction getMaxPrecision( precision ) {\n\n\t\tif ( precision === 'highp' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\n\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\n\n\t\t\t\treturn 'highp';\n\n\t\t\t}\n\n\t\t\tprecision = 'mediump';\n\n\t\t}\n\n\t\tif ( precision === 'mediump' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\n\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\n\n\t\t\t\treturn 'mediump';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn 'lowp';\n\n\t}\n\n\t/* eslint-disable no-undef */\n\tconst isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||\n\t\t( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );\n\t/* eslint-enable no-undef */\n\n\tlet precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\tconst maxPrecision = getMaxPrecision( precision );\n\n\tif ( maxPrecision !== precision ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\tprecision = maxPrecision;\n\n\t}\n\n\tconst drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\n\n\tconst logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\tconst maxTextures = gl.getParameter( 34930 );\n\tconst maxVertexTextures = gl.getParameter( 35660 );\n\tconst maxTextureSize = gl.getParameter( 3379 );\n\tconst maxCubemapSize = gl.getParameter( 34076 );\n\n\tconst maxAttributes = gl.getParameter( 34921 );\n\tconst maxVertexUniforms = gl.getParameter( 36347 );\n\tconst maxVaryings = gl.getParameter( 36348 );\n\tconst maxFragmentUniforms = gl.getParameter( 36349 );\n\n\tconst vertexTextures = maxVertexTextures > 0;\n\tconst floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\n\tconst floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\tconst maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\n\n\treturn {\n\n\t\tisWebGL2: isWebGL2,\n\n\t\tdrawBuffers: drawBuffers,\n\n\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\tprecision: precision,\n\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\tmaxTextures: maxTextures,\n\t\tmaxVertexTextures: maxVertexTextures,\n\t\tmaxTextureSize: maxTextureSize,\n\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\tmaxAttributes: maxAttributes,\n\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\tmaxVaryings: maxVaryings,\n\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\tvertexTextures: vertexTextures,\n\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\tfloatVertexTextures: floatVertexTextures,\n\n\t\tmaxSamples: maxSamples\n\n\t};\n\n}\n\nfunction WebGLClipping( properties ) {\n\n\tconst scope = this;\n\n\tlet globalState = null,\n\t\tnumGlobalPlanes = 0,\n\t\tlocalClippingEnabled = false,\n\t\trenderingShadows = false;\n\n\tconst plane = new Plane(),\n\t\tviewNormalMatrix = new Matrix3(),\n\n\t\tuniform = { value: null, needsUpdate: false };\n\n\tthis.uniform = uniform;\n\tthis.numPlanes = 0;\n\tthis.numIntersection = 0;\n\n\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\tconst enabled =\n\t\t\tplanes.length !== 0 ||\n\t\t\tenableLocalClipping ||\n\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\tlocalClippingEnabled;\n\n\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\tnumGlobalPlanes = planes.length;\n\n\t\treturn enabled;\n\n\t};\n\n\tthis.beginShadows = function () {\n\n\t\trenderingShadows = true;\n\t\tprojectPlanes( null );\n\n\t};\n\n\tthis.endShadows = function () {\n\n\t\trenderingShadows = false;\n\t\tresetGlobalState();\n\n\t};\n\n\tthis.setState = function ( material, camera, useCache ) {\n\n\t\tconst planes = material.clippingPlanes,\n\t\t\tclipIntersection = material.clipIntersection,\n\t\t\tclipShadows = material.clipShadows;\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t// there's no local clipping\n\n\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t// there's no global clipping\n\n\t\t\t\tprojectPlanes( null );\n\n\t\t\t} else {\n\n\t\t\t\tresetGlobalState();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\tlGlobal = nGlobal * 4;\n\n\t\t\tlet dstArray = materialProperties.clippingState || null;\n\n\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, useCache );\n\n\t\t\tfor ( let i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t}\n\n\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\tthis.numPlanes += nGlobal;\n\n\t\t}\n\n\n\t};\n\n\tfunction resetGlobalState() {\n\n\t\tif ( uniform.value !== globalState ) {\n\n\t\t\tuniform.value = globalState;\n\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t}\n\n\t\tscope.numPlanes = numGlobalPlanes;\n\t\tscope.numIntersection = 0;\n\n\t}\n\n\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\tconst nPlanes = planes !== null ? planes.length : 0;\n\t\tlet dstArray = null;\n\n\t\tif ( nPlanes !== 0 ) {\n\n\t\t\tdstArray = uniform.value;\n\n\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\tconst flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniform.value = dstArray;\n\t\t\tuniform.needsUpdate = true;\n\n\t\t}\n\n\t\tscope.numPlanes = nPlanes;\n\t\tscope.numIntersection = 0;\n\n\t\treturn dstArray;\n\n\t}\n\n}\n\nfunction WebGLCubeMaps( renderer ) {\n\n\tlet cubemaps = new WeakMap();\n\n\tfunction mapTextureMapping( texture, mapping ) {\n\n\t\tif ( mapping === EquirectangularReflectionMapping ) {\n\n\t\t\ttexture.mapping = CubeReflectionMapping;\n\n\t\t} else if ( mapping === EquirectangularRefractionMapping ) {\n\n\t\t\ttexture.mapping = CubeRefractionMapping;\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction get( texture ) {\n\n\t\tif ( texture && texture.isTexture && texture.isRenderTargetTexture === false ) {\n\n\t\t\tconst mapping = texture.mapping;\n\n\t\t\tif ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {\n\n\t\t\t\tif ( cubemaps.has( texture ) ) {\n\n\t\t\t\t\tconst cubemap = cubemaps.get( texture ).texture;\n\t\t\t\t\treturn mapTextureMapping( cubemap, texture.mapping );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\tif ( image && image.height > 0 ) {\n\n\t\t\t\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\t\t\t\tconst renderTarget = new WebGLCubeRenderTarget( image.height / 2 );\n\t\t\t\t\t\trenderTarget.fromEquirectangularTexture( renderer, texture );\n\t\t\t\t\t\tcubemaps.set( texture, renderTarget );\n\n\t\t\t\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\treturn mapTextureMapping( renderTarget.texture, texture.mapping );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tconst cubemap = cubemaps.get( texture );\n\n\t\tif ( cubemap !== undefined ) {\n\n\t\t\tcubemaps.delete( texture );\n\t\t\tcubemap.dispose();\n\n\t\t}\n\n\t}\n\n\tfunction dispose() {\n\n\t\tcubemaps = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nclass OrthographicCamera extends Camera {\n\n\tconstructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\tthis.top = top;\n\t\tthis.bottom = bottom;\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t}\n\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tupdateProjectionMatrix() {\n\n\t\tconst dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tconst dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tconst cx = ( this.right + this.left ) / 2;\n\t\tconst cy = ( this.top + this.bottom ) / 2;\n\n\t\tlet left = cx - dx;\n\t\tlet right = cx + dx;\n\t\tlet top = cy + dy;\n\t\tlet bottom = cy - dy;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\tconst scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\tright = left + scaleW * this.view.width;\n\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n}\n\nOrthographicCamera.prototype.isOrthographicCamera = true;\n\nclass RawShaderMaterial extends ShaderMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper( parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n}\n\nRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\nconst LOD_MIN = 4;\nconst LOD_MAX = 8;\nconst SIZE_MAX = Math.pow( 2, LOD_MAX );\n\n// The standard deviations (radians) associated with the extra mips. These are\n// chosen to approximate a Trowbridge-Reitz distribution function times the\n// geometric shadowing function. These sigma values squared must match the\n// variance #defines in cube_uv_reflection_fragment.glsl.js.\nconst EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\n\nconst TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n\n// The maximum length of the blur for loop. Smaller sigmas will use fewer\n// samples and exit early, but not recompile the shader.\nconst MAX_SAMPLES = 20;\n\nconst ENCODINGS = {\n\t[ LinearEncoding ]: 0,\n\t[ sRGBEncoding ]: 1,\n\t[ RGBEEncoding ]: 2,\n\t[ RGBM7Encoding ]: 3,\n\t[ RGBM16Encoding ]: 4,\n\t[ RGBDEncoding ]: 5,\n\t[ GammaEncoding ]: 6\n};\n\nconst _flatCamera = /*@__PURE__*/ new OrthographicCamera();\nconst { _lodPlanes, _sizeLods, _sigmas } = /*@__PURE__*/ _createPlanes();\nconst _clearColor = /*@__PURE__*/ new Color();\nlet _oldTarget = null;\n\n// Golden Ratio\nconst PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\nconst INV_PHI = 1 / PHI;\n\n// Vertices of a dodecahedron (except the opposites, which represent the\n// same axis), used as axis directions evenly spread on a sphere.\nconst _axisDirections = [\n\t/*@__PURE__*/ new Vector3( 1, 1, 1 ),\n\t/*@__PURE__*/ new Vector3( - 1, 1, 1 ),\n\t/*@__PURE__*/ new Vector3( 1, 1, - 1 ),\n\t/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),\n\t/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),\n\t/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ) ];\n\n/**\n * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n * (PMREM) from a cubeMap environment texture. This allows different levels of\n * blur to be quickly accessed based on material roughness. It is packed into a\n * special CubeUV format that allows us to perform custom interpolation so that\n * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n * higher roughness levels. In this way we maintain resolution to smoothly\n * interpolate diffuse lighting while limiting sampling computation.\n *\n * Paper: Fast, Accurate Image-Based Lighting\n * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\n*/\n\nclass PMREMGenerator {\n\n\tconstructor( renderer ) {\n\n\t\tthis._renderer = renderer;\n\t\tthis._pingPongRenderTarget = null;\n\n\t\tthis._blurMaterial = _getBlurShader( MAX_SAMPLES );\n\t\tthis._equirectShader = null;\n\t\tthis._cubemapShader = null;\n\n\t\tthis._compileMaterial( this._blurMaterial );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t * is placed at the origin).\n\t */\n\tfromScene( scene, sigma = 0, near = 0.1, far = 100 ) {\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\t\tconst cubeUVRenderTarget = this._allocateTargets();\n\n\t\tthis._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\n\t\tif ( sigma > 0 ) {\n\n\t\t\tthis._blur( cubeUVRenderTarget, 0, 0, sigma );\n\n\t\t}\n\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t * as this matches best with the 256 x 256 cubemap output.\n\t */\n\tfromEquirectangular( equirectangular ) {\n\n\t\treturn this._fromTexture( equirectangular );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t * as this matches best with the 256 x 256 cubemap output.\n\t */\n\tfromCubemap( cubemap ) {\n\n\t\treturn this._fromTexture( cubemap );\n\n\t}\n\n\t/**\n\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t */\n\tcompileCubemapShader() {\n\n\t\tif ( this._cubemapShader === null ) {\n\n\t\t\tthis._cubemapShader = _getCubemapShader();\n\t\t\tthis._compileMaterial( this._cubemapShader );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t */\n\tcompileEquirectangularShader() {\n\n\t\tif ( this._equirectShader === null ) {\n\n\t\t\tthis._equirectShader = _getEquirectShader();\n\t\t\tthis._compileMaterial( this._equirectShader );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t * one of them will cause any others to also become unusable.\n\t */\n\tdispose() {\n\n\t\tthis._blurMaterial.dispose();\n\n\t\tif ( this._cubemapShader !== null ) this._cubemapShader.dispose();\n\t\tif ( this._equirectShader !== null ) this._equirectShader.dispose();\n\n\t\tfor ( let i = 0; i < _lodPlanes.length; i ++ ) {\n\n\t\t\t_lodPlanes[ i ].dispose();\n\n\t\t}\n\n\t}\n\n\t// private interface\n\n\t_cleanup( outputTarget ) {\n\n\t\tthis._pingPongRenderTarget.dispose();\n\t\tthis._renderer.setRenderTarget( _oldTarget );\n\t\toutputTarget.scissorTest = false;\n\t\t_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );\n\n\t}\n\n\t_fromTexture( texture ) {\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\t\tconst cubeUVRenderTarget = this._allocateTargets( texture );\n\t\tthis._textureToCubeUV( texture, cubeUVRenderTarget );\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t_allocateTargets( texture ) { // warning: null texture is valid\n\n\t\tconst params = {\n\t\t\tmagFilter: NearestFilter,\n\t\t\tminFilter: NearestFilter,\n\t\t\tgenerateMipmaps: false,\n\t\t\ttype: UnsignedByteType,\n\t\t\tformat: RGBEFormat,\n\t\t\tencoding: _isLDR( texture ) ? texture.encoding : RGBEEncoding,\n\t\t\tdepthBuffer: false\n\t\t};\n\n\t\tconst cubeUVRenderTarget = _createRenderTarget( params );\n\t\tcubeUVRenderTarget.depthBuffer = texture ? false : true;\n\t\tthis._pingPongRenderTarget = _createRenderTarget( params );\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t_compileMaterial( material ) {\n\n\t\tconst tmpMesh = new Mesh( _lodPlanes[ 0 ], material );\n\t\tthis._renderer.compile( tmpMesh, _flatCamera );\n\n\t}\n\n\t_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {\n\n\t\tconst fov = 90;\n\t\tconst aspect = 1;\n\t\tconst cubeCamera = new PerspectiveCamera( fov, aspect, near, far );\n\t\tconst upSign = [ 1, - 1, 1, 1, 1, 1 ];\n\t\tconst forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];\n\t\tconst renderer = this._renderer;\n\n\t\tconst originalAutoClear = renderer.autoClear;\n\t\tconst outputEncoding = renderer.outputEncoding;\n\t\tconst toneMapping = renderer.toneMapping;\n\t\trenderer.getClearColor( _clearColor );\n\n\t\trenderer.toneMapping = NoToneMapping;\n\t\trenderer.outputEncoding = LinearEncoding;\n\t\trenderer.autoClear = false;\n\n\t\tconst backgroundMaterial = new MeshBasicMaterial( {\n\t\t\tname: 'PMREM.Background',\n\t\t\tside: BackSide,\n\t\t\tdepthWrite: false,\n\t\t\tdepthTest: false,\n\t\t} );\n\n\t\tconst backgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );\n\n\t\tlet useSolidColor = false;\n\t\tconst background = scene.background;\n\n\t\tif ( background ) {\n\n\t\t\tif ( background.isColor ) {\n\n\t\t\t\tbackgroundMaterial.color.copy( background );\n\t\t\t\tscene.background = null;\n\t\t\t\tuseSolidColor = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tbackgroundMaterial.color.copy( _clearColor );\n\t\t\tuseSolidColor = true;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst col = i % 3;\n\t\t\tif ( col == 0 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( forwardSign[ i ], 0, 0 );\n\n\t\t\t} else if ( col == 1 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\n\t\t\t\tcubeCamera.lookAt( 0, forwardSign[ i ], 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( 0, 0, forwardSign[ i ] );\n\n\t\t\t}\n\n\t\t\t_setViewport( cubeUVRenderTarget,\n\t\t\t\tcol * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX );\n\t\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\n\t\t\tif ( useSolidColor ) {\n\n\t\t\t\trenderer.render( backgroundBox, cubeCamera );\n\n\t\t\t}\n\n\t\t\trenderer.render( scene, cubeCamera );\n\n\t\t}\n\n\t\tbackgroundBox.geometry.dispose();\n\t\tbackgroundBox.material.dispose();\n\n\t\trenderer.toneMapping = toneMapping;\n\t\trenderer.outputEncoding = outputEncoding;\n\t\trenderer.autoClear = originalAutoClear;\n\t\tscene.background = background;\n\n\t}\n\n\t_setEncoding( uniform, texture ) {\n\n\t\tif ( this._renderer.capabilities.isWebGL2 === true && texture.format === RGBAFormat && texture.type === UnsignedByteType && texture.encoding === sRGBEncoding ) {\n\n\t\t\tuniform.value = ENCODINGS[ LinearEncoding ];\n\n\t\t} else {\n\n\t\t\tuniform.value = ENCODINGS[ texture.encoding ];\n\n\t\t}\n\n\t}\n\n\t_textureToCubeUV( texture, cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\tif ( this._cubemapShader == null ) {\n\n\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( this._equirectShader == null ) {\n\n\t\t\t\tthis._equirectShader = _getEquirectShader();\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader;\n\t\tconst mesh = new Mesh( _lodPlanes[ 0 ], material );\n\n\t\tconst uniforms = material.uniforms;\n\n\t\tuniforms[ 'envMap' ].value = texture;\n\n\t\tif ( ! texture.isCubeTexture ) {\n\n\t\t\tuniforms[ 'texelSize' ].value.set( 1.0 / texture.image.width, 1.0 / texture.image.height );\n\n\t\t}\n\n\t\tthis._setEncoding( uniforms[ 'inputEncoding' ], texture );\n\t\tthis._setEncoding( uniforms[ 'outputEncoding' ], cubeUVRenderTarget.texture );\n\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX );\n\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\t\trenderer.render( mesh, _flatCamera );\n\n\t}\n\n\t_applyPMREM( cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst autoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tfor ( let i = 1; i < TOTAL_LODS; i ++ ) {\n\n\t\t\tconst sigma = Math.sqrt( _sigmas[ i ] * _sigmas[ i ] - _sigmas[ i - 1 ] * _sigmas[ i - 1 ] );\n\n\t\t\tconst poleAxis = _axisDirections[ ( i - 1 ) % _axisDirections.length ];\n\n\t\t\tthis._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\n\n\t\t}\n\n\t\trenderer.autoClear = autoClear;\n\n\t}\n\n\t/**\n\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t * accurate at the poles, but still does a decent job.\n\t */\n\t_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\n\n\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\tthis._halfBlur(\n\t\t\tcubeUVRenderTarget,\n\t\t\tpingPongRenderTarget,\n\t\t\tlodIn,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'latitudinal',\n\t\t\tpoleAxis );\n\n\t\tthis._halfBlur(\n\t\t\tpingPongRenderTarget,\n\t\t\tcubeUVRenderTarget,\n\t\t\tlodOut,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'longitudinal',\n\t\t\tpoleAxis );\n\n\t}\n\n\t_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst blurMaterial = this._blurMaterial;\n\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\n\n\t\t\tconsole.error(\n\t\t\t\t'blur direction must be either latitudinal or longitudinal!' );\n\n\t\t}\n\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\n\t\tconst STANDARD_DEVIATIONS = 3;\n\n\t\tconst blurMesh = new Mesh( _lodPlanes[ lodOut ], blurMaterial );\n\t\tconst blurUniforms = blurMaterial.uniforms;\n\n\t\tconst pixels = _sizeLods[ lodIn ] - 1;\n\t\tconst radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\n\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\tconst samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\n\n\t\tif ( samples > MAX_SAMPLES ) {\n\n\t\t\tconsole.warn( `sigmaRadians, ${\n\t\t\t\tsigmaRadians}, is too large and will clip, as it requested ${\n\t\t\t\tsamples} samples when the maximum is set to ${MAX_SAMPLES}` );\n\n\t\t}\n\n\t\tconst weights = [];\n\t\tlet sum = 0;\n\n\t\tfor ( let i = 0; i < MAX_SAMPLES; ++ i ) {\n\n\t\t\tconst x = i / sigmaPixels;\n\t\t\tconst weight = Math.exp( - x * x / 2 );\n\t\t\tweights.push( weight );\n\n\t\t\tif ( i == 0 ) {\n\n\t\t\t\tsum += weight;\n\n\t\t\t} else if ( i < samples ) {\n\n\t\t\t\tsum += 2 * weight;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < weights.length; i ++ ) {\n\n\t\t\tweights[ i ] = weights[ i ] / sum;\n\n\t\t}\n\n\t\tblurUniforms[ 'envMap' ].value = targetIn.texture;\n\t\tblurUniforms[ 'samples' ].value = samples;\n\t\tblurUniforms[ 'weights' ].value = weights;\n\t\tblurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';\n\n\t\tif ( poleAxis ) {\n\n\t\t\tblurUniforms[ 'poleAxis' ].value = poleAxis;\n\n\t\t}\n\n\t\tblurUniforms[ 'dTheta' ].value = radiansPerPixel;\n\t\tblurUniforms[ 'mipInt' ].value = LOD_MAX - lodIn;\n\n\t\tthis._setEncoding( blurUniforms[ 'inputEncoding' ], targetIn.texture );\n\t\tthis._setEncoding( blurUniforms[ 'outputEncoding' ], targetIn.texture );\n\n\t\tconst outputSize = _sizeLods[ lodOut ];\n\t\tconst x = 3 * Math.max( 0, SIZE_MAX - 2 * outputSize );\n\t\tconst y = ( lodOut === 0 ? 0 : 2 * SIZE_MAX ) + 2 * outputSize * ( lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0 );\n\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\n\t\trenderer.setRenderTarget( targetOut );\n\t\trenderer.render( blurMesh, _flatCamera );\n\n\t}\n\n}\n\nfunction _isLDR( texture ) {\n\n\tif ( texture === undefined || texture.type !== UnsignedByteType ) return false;\n\n\treturn texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n\n}\n\nfunction _createPlanes() {\n\n\tconst _lodPlanes = [];\n\tconst _sizeLods = [];\n\tconst _sigmas = [];\n\n\tlet lod = LOD_MAX;\n\n\tfor ( let i = 0; i < TOTAL_LODS; i ++ ) {\n\n\t\tconst sizeLod = Math.pow( 2, lod );\n\t\t_sizeLods.push( sizeLod );\n\t\tlet sigma = 1.0 / sizeLod;\n\n\t\tif ( i > LOD_MAX - LOD_MIN ) {\n\n\t\t\tsigma = EXTRA_LOD_SIGMA[ i - LOD_MAX + LOD_MIN - 1 ];\n\n\t\t} else if ( i == 0 ) {\n\n\t\t\tsigma = 0;\n\n\t\t}\n\n\t\t_sigmas.push( sigma );\n\n\t\tconst texelSize = 1.0 / ( sizeLod - 1 );\n\t\tconst min = - texelSize / 2;\n\t\tconst max = 1 + texelSize / 2;\n\t\tconst uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\n\n\t\tconst cubeFaces = 6;\n\t\tconst vertices = 6;\n\t\tconst positionSize = 3;\n\t\tconst uvSize = 2;\n\t\tconst faceIndexSize = 1;\n\n\t\tconst position = new Float32Array( positionSize * vertices * cubeFaces );\n\t\tconst uv = new Float32Array( uvSize * vertices * cubeFaces );\n\t\tconst faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\n\n\t\tfor ( let face = 0; face < cubeFaces; face ++ ) {\n\n\t\t\tconst x = ( face % 3 ) * 2 / 3 - 1;\n\t\t\tconst y = face > 2 ? 0 : - 1;\n\t\t\tconst coordinates = [\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y + 1, 0\n\t\t\t];\n\t\t\tposition.set( coordinates, positionSize * vertices * face );\n\t\t\tuv.set( uv1, uvSize * vertices * face );\n\t\t\tconst fill = [ face, face, face, face, face, face ];\n\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * face );\n\n\t\t}\n\n\t\tconst planes = new BufferGeometry();\n\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\n\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\n\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\n\t\t_lodPlanes.push( planes );\n\n\t\tif ( lod > LOD_MIN ) {\n\n\t\t\tlod --;\n\n\t\t}\n\n\t}\n\n\treturn { _lodPlanes, _sizeLods, _sigmas };\n\n}\n\nfunction _createRenderTarget( params ) {\n\n\tconst cubeUVRenderTarget = new WebGLRenderTarget( 3 * SIZE_MAX, 3 * SIZE_MAX, params );\n\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\tcubeUVRenderTarget.scissorTest = true;\n\treturn cubeUVRenderTarget;\n\n}\n\nfunction _setViewport( target, x, y, width, height ) {\n\n\ttarget.viewport.set( x, y, width, height );\n\ttarget.scissor.set( x, y, width, height );\n\n}\n\nfunction _getBlurShader( maxSamples ) {\n\n\tconst weights = new Float32Array( maxSamples );\n\tconst poleAxis = new Vector3( 0, 1, 0 );\n\tconst shaderMaterial = new RawShaderMaterial( {\n\n\t\tname: 'SphericalGaussianBlur',\n\n\t\tdefines: { 'n': maxSamples },\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'samples': { value: 1 },\n\t\t\t'weights': { value: weights },\n\t\t\t'latitudinal': { value: false },\n\t\t\t'dTheta': { value: 0 },\n\t\t\t'mipInt': { value: 0 },\n\t\t\t'poleAxis': { value: poleAxis },\n\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t${ _getEncodings() }\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n\treturn shaderMaterial;\n\n}\n\nfunction _getEquirectShader() {\n\n\tconst texelSize = new Vector2( 1, 1 );\n\tconst shaderMaterial = new RawShaderMaterial( {\n\n\t\tname: 'EquirectangularToCubeUV',\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'texelSize': { value: texelSize },\n\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t${ _getEncodings() }\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n\treturn shaderMaterial;\n\n}\n\nfunction _getCubemapShader() {\n\n\tconst shaderMaterial = new RawShaderMaterial( {\n\n\t\tname: 'CubemapToCubeUV',\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t${ _getEncodings() }\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n\treturn shaderMaterial;\n\n}\n\nfunction _getCommonVertexShader() {\n\n\treturn /* glsl */`\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t`;\n\n}\n\nfunction _getEncodings() {\n\n\treturn /* glsl */`\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t`;\n\n}\n\nfunction WebGLCubeUVMaps( renderer ) {\n\n\tlet cubeUVmaps = new WeakMap();\n\n\tlet pmremGenerator = null;\n\n\tfunction get( texture ) {\n\n\t\tif ( texture && texture.isTexture && texture.isRenderTargetTexture === false ) {\n\n\t\t\tconst mapping = texture.mapping;\n\n\t\t\tconst isEquirectMap = ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping );\n\t\t\tconst isCubeMap = ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );\n\n\t\t\tif ( isEquirectMap || isCubeMap ) {\n\n\t\t\t\t// equirect/cube map to cubeUV conversion\n\n\t\t\t\tif ( cubeUVmaps.has( texture ) ) {\n\n\t\t\t\t\treturn cubeUVmaps.get( texture ).texture;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\tif ( ( isEquirectMap && image && image.height > 0 ) || ( isCubeMap && image && isCubeTextureComplete( image ) ) ) {\n\n\t\t\t\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\t\t\t\tif ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );\n\n\t\t\t\t\t\tconst renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture ) : pmremGenerator.fromCubemap( texture );\n\t\t\t\t\t\tcubeUVmaps.set( texture, renderTarget );\n\n\t\t\t\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\treturn renderTarget.texture;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction isCubeTextureComplete( image ) {\n\n\t\tlet count = 0;\n\t\tconst length = 6;\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tif ( image[ i ] !== undefined ) count ++;\n\n\t\t}\n\n\t\treturn count === length;\n\n\n\t}\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tconst cubemapUV = cubeUVmaps.get( texture );\n\n\t\tif ( cubemapUV !== undefined ) {\n\n\t\t\tcubeUVmaps.delete( texture );\n\t\t\tcubemapUV.dispose();\n\n\t\t}\n\n\t}\n\n\tfunction dispose() {\n\n\t\tcubeUVmaps = new WeakMap();\n\n\t\tif ( pmremGenerator !== null ) {\n\n\t\t\tpmremGenerator.dispose();\n\t\t\tpmremGenerator = null;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction WebGLExtensions( gl ) {\n\n\tconst extensions = {};\n\n\tfunction getExtension( name ) {\n\n\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\treturn extensions[ name ];\n\n\t\t}\n\n\t\tlet extension;\n\n\t\tswitch ( name ) {\n\n\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\textension = gl.getExtension( name );\n\n\t\t}\n\n\t\textensions[ name ] = extension;\n\n\t\treturn extension;\n\n\t}\n\n\treturn {\n\n\t\thas: function ( name ) {\n\n\t\t\treturn getExtension( name ) !== null;\n\n\t\t},\n\n\t\tinit: function ( capabilities ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\tgetExtension( 'EXT_color_buffer_float' );\n\n\t\t\t} else {\n\n\t\t\t\tgetExtension( 'WEBGL_depth_texture' );\n\t\t\t\tgetExtension( 'OES_texture_float' );\n\t\t\t\tgetExtension( 'OES_texture_half_float' );\n\t\t\t\tgetExtension( 'OES_texture_half_float_linear' );\n\t\t\t\tgetExtension( 'OES_standard_derivatives' );\n\t\t\t\tgetExtension( 'OES_element_index_uint' );\n\t\t\t\tgetExtension( 'OES_vertex_array_object' );\n\t\t\t\tgetExtension( 'ANGLE_instanced_arrays' );\n\n\t\t\t}\n\n\t\t\tgetExtension( 'OES_texture_float_linear' );\n\t\t\tgetExtension( 'EXT_color_buffer_half_float' );\n\t\t\tgetExtension( 'EXT_multisampled_render_to_texture' );\n\n\t\t},\n\n\t\tget: function ( name ) {\n\n\t\t\tconst extension = getExtension( name );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t}\n\n\t\t\treturn extension;\n\n\t\t}\n\n\t};\n\n}\n\nfunction WebGLGeometries( gl, attributes, info, bindingStates ) {\n\n\tconst geometries = {};\n\tconst wireframeAttributes = new WeakMap();\n\n\tfunction onGeometryDispose( event ) {\n\n\t\tconst geometry = event.target;\n\n\t\tif ( geometry.index !== null ) {\n\n\t\t\tattributes.remove( geometry.index );\n\n\t\t}\n\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tattributes.remove( geometry.attributes[ name ] );\n\n\t\t}\n\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\tdelete geometries[ geometry.id ];\n\n\t\tconst attribute = wireframeAttributes.get( geometry );\n\n\t\tif ( attribute ) {\n\n\t\t\tattributes.remove( attribute );\n\t\t\twireframeAttributes.delete( geometry );\n\n\t\t}\n\n\t\tbindingStates.releaseStatesOfGeometry( geometry );\n\n\t\tif ( geometry.isInstancedBufferGeometry === true ) {\n\n\t\t\tdelete geometry._maxInstanceCount;\n\n\t\t}\n\n\t\t//\n\n\t\tinfo.memory.geometries --;\n\n\t}\n\n\tfunction get( object, geometry ) {\n\n\t\tif ( geometries[ geometry.id ] === true ) return geometry;\n\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\tgeometries[ geometry.id ] = true;\n\n\t\tinfo.memory.geometries ++;\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction update( geometry ) {\n\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\tfor ( const name in geometryAttributes ) {\n\n\t\t\tattributes.update( geometryAttributes[ name ], 34962 );\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst array = morphAttributes[ name ];\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tattributes.update( array[ i ], 34962 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction updateWireframeAttribute( geometry ) {\n\n\t\tconst indices = [];\n\n\t\tconst geometryIndex = geometry.index;\n\t\tconst geometryPosition = geometry.attributes.position;\n\t\tlet version = 0;\n\n\t\tif ( geometryIndex !== null ) {\n\n\t\t\tconst array = geometryIndex.array;\n\t\t\tversion = geometryIndex.version;\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tconst a = array[ i + 0 ];\n\t\t\t\tconst b = array[ i + 1 ];\n\t\t\t\tconst c = array[ i + 2 ];\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst array = geometryPosition.array;\n\t\t\tversion = geometryPosition.version;\n\n\t\t\tfor ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\tconst a = i + 0;\n\t\t\t\tconst b = i + 1;\n\t\t\t\tconst c = i + 2;\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\t\tattribute.version = version;\n\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates\n\n\t\t//\n\n\t\tconst previousAttribute = wireframeAttributes.get( geometry );\n\n\t\tif ( previousAttribute ) attributes.remove( previousAttribute );\n\n\t\t//\n\n\t\twireframeAttributes.set( geometry, attribute );\n\n\t}\n\n\tfunction getWireframeAttribute( geometry ) {\n\n\t\tconst currentAttribute = wireframeAttributes.get( geometry );\n\n\t\tif ( currentAttribute ) {\n\n\t\t\tconst geometryIndex = geometry.index;\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\t// if the attribute is obsolete, create a new one\n\n\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\n\n\t\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t}\n\n\t\treturn wireframeAttributes.get( geometry );\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tupdate: update,\n\n\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t};\n\n}\n\nfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tlet mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tlet type, bytesPerElement;\n\n\tfunction setIndex( value ) {\n\n\t\ttype = value.type;\n\t\tbytesPerElement = value.bytesPerElement;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\tinfo.update( count, mode, 1 );\n\n\t}\n\n\tfunction renderInstances( start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tlet extension, methodName;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawElementsInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.setIndex = setIndex;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\nfunction WebGLInfo( gl ) {\n\n\tconst memory = {\n\t\tgeometries: 0,\n\t\ttextures: 0\n\t};\n\n\tconst render = {\n\t\tframe: 0,\n\t\tcalls: 0,\n\t\ttriangles: 0,\n\t\tpoints: 0,\n\t\tlines: 0\n\t};\n\n\tfunction update( count, mode, instanceCount ) {\n\n\t\trender.calls ++;\n\n\t\tswitch ( mode ) {\n\n\t\t\tcase 4:\n\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tcase 0:\n\t\t\t\trender.points += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\trender.frame ++;\n\t\trender.calls = 0;\n\t\trender.triangles = 0;\n\t\trender.points = 0;\n\t\trender.lines = 0;\n\n\t}\n\n\treturn {\n\t\tmemory: memory,\n\t\trender: render,\n\t\tprograms: null,\n\t\tautoReset: true,\n\t\treset: reset,\n\t\tupdate: update\n\t};\n\n}\n\nclass DataTexture2DArray extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\tsuper( null );\n\n\t\tthis.image = { data, width, height, depth };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\nfunction numericalSort( a, b ) {\n\n\treturn a[ 0 ] - b[ 0 ];\n\n}\n\nfunction absNumericalSort( a, b ) {\n\n\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n}\n\nfunction denormalize( morph, attribute ) {\n\n\tlet denominator = 1;\n\tconst array = attribute.isInterleavedBufferAttribute ? attribute.data.array : attribute.array;\n\n\tif ( array instanceof Int8Array ) denominator = 127;\n\telse if ( array instanceof Int16Array ) denominator = 32767;\n\telse if ( array instanceof Int32Array ) denominator = 2147483647;\n\telse console.error( 'THREE.WebGLMorphtargets: Unsupported morph attribute data type: ', array );\n\n\tmorph.divideScalar( denominator );\n\n}\n\nfunction WebGLMorphtargets( gl, capabilities, textures ) {\n\n\tconst influencesList = {};\n\tconst morphInfluences = new Float32Array( 8 );\n\tconst morphTextures = new WeakMap();\n\tconst morph = new Vector3();\n\n\tconst workInfluences = [];\n\n\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\tworkInfluences[ i ] = [ i, 0 ];\n\n\t}\n\n\tfunction update( object, geometry, material, program ) {\n\n\t\tconst objectInfluences = object.morphTargetInfluences;\n\n\t\tif ( capabilities.isWebGL2 === true ) {\n\n\t\t\t// instead of using attributes, the WebGL 2 code path encodes morph targets\n\t\t\t// into an array of data textures. Each layer represents a single morph target.\n\n\t\t\tconst numberOfMorphTargets = geometry.morphAttributes.position.length;\n\n\t\t\tlet entry = morphTextures.get( geometry );\n\n\t\t\tif ( entry === undefined || entry.count !== numberOfMorphTargets ) {\n\n\t\t\t\tif ( entry !== undefined ) entry.texture.dispose();\n\n\t\t\t\tconst hasMorphNormals = geometry.morphAttributes.normal !== undefined;\n\n\t\t\t\tconst morphTargets = geometry.morphAttributes.position;\n\t\t\t\tconst morphNormals = geometry.morphAttributes.normal || [];\n\n\t\t\t\tconst numberOfVertices = geometry.attributes.position.count;\n\t\t\t\tconst numberOfVertexData = ( hasMorphNormals === true ) ? 2 : 1; // (v,n) vs. (v)\n\n\t\t\t\tlet width = numberOfVertices * numberOfVertexData;\n\t\t\t\tlet height = 1;\n\n\t\t\t\tif ( width > capabilities.maxTextureSize ) {\n\n\t\t\t\t\theight = Math.ceil( width / capabilities.maxTextureSize );\n\t\t\t\t\twidth = capabilities.maxTextureSize;\n\n\t\t\t\t}\n\n\t\t\t\tconst buffer = new Float32Array( width * height * 4 * numberOfMorphTargets );\n\n\t\t\t\tconst texture = new DataTexture2DArray( buffer, width, height, numberOfMorphTargets );\n\t\t\t\ttexture.format = RGBAFormat; // using RGBA since RGB might be emulated (and is thus slower)\n\t\t\t\ttexture.type = FloatType;\n\n\t\t\t\t// fill buffer\n\n\t\t\t\tconst vertexDataStride = numberOfVertexData * 4;\n\n\t\t\t\tfor ( let i = 0; i < numberOfMorphTargets; i ++ ) {\n\n\t\t\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\t\t\tconst morphNormal = morphNormals[ i ];\n\n\t\t\t\t\tconst offset = width * height * 4 * i;\n\n\t\t\t\t\tfor ( let j = 0; j < morphTarget.count; j ++ ) {\n\n\t\t\t\t\t\tmorph.fromBufferAttribute( morphTarget, j );\n\n\t\t\t\t\t\tif ( morphTarget.normalized === true ) denormalize( morph, morphTarget );\n\n\t\t\t\t\t\tconst stride = j * vertexDataStride;\n\n\t\t\t\t\t\tbuffer[ offset + stride + 0 ] = morph.x;\n\t\t\t\t\t\tbuffer[ offset + stride + 1 ] = morph.y;\n\t\t\t\t\t\tbuffer[ offset + stride + 2 ] = morph.z;\n\t\t\t\t\t\tbuffer[ offset + stride + 3 ] = 0;\n\n\t\t\t\t\t\tif ( hasMorphNormals === true ) {\n\n\t\t\t\t\t\t\tmorph.fromBufferAttribute( morphNormal, j );\n\n\t\t\t\t\t\t\tif ( morphNormal.normalized === true ) denormalize( morph, morphNormal );\n\n\t\t\t\t\t\t\tbuffer[ offset + stride + 4 ] = morph.x;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 5 ] = morph.y;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 6 ] = morph.z;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 7 ] = 0;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tentry = {\n\t\t\t\t\tcount: numberOfMorphTargets,\n\t\t\t\t\ttexture: texture,\n\t\t\t\t\tsize: new Vector2( width, height )\n\t\t\t\t};\n\n\t\t\t\tmorphTextures.set( geometry, entry );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor ( let i = 0; i < objectInfluences.length; i ++ ) {\n\n\t\t\t\tmorphInfluencesSum += objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', objectInfluences );\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetsTexture', entry.texture, textures );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetsTextureSize', entry.size );\n\n\n\t\t} else {\n\n\t\t\t// When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tconst length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\n\t\t\tlet influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined || influences.length !== length ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\tconst influence = influences[ i ];\n\n\t\t\t\tinfluence[ 0 ] = i;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\t\tif ( i < length && influences[ i ][ 1 ] ) {\n\n\t\t\t\t\tworkInfluences[ i ][ 0 ] = influences[ i ][ 0 ];\n\t\t\t\t\tworkInfluences[ i ][ 1 ] = influences[ i ][ 1 ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tworkInfluences[ i ][ 0 ] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[ i ][ 1 ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tworkInfluences.sort( numericalSort );\n\n\t\t\tconst morphTargets = geometry.morphAttributes.position;\n\t\t\tconst morphNormals = geometry.morphAttributes.normal;\n\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\t\tconst influence = workInfluences[ i ];\n\t\t\t\tconst index = influence[ 0 ];\n\t\t\t\tconst value = influence[ 1 ];\n\n\t\t\t\tif ( index !== Number.MAX_SAFE_INTEGER && value ) {\n\n\t\t\t\t\tif ( morphTargets && geometry.getAttribute( 'morphTarget' + i ) !== morphTargets[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.getAttribute( 'morphNormal' + i ) !== morphNormals[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( morphTargets && geometry.hasAttribute( 'morphTarget' + i ) === true ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphTarget' + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.hasAttribute( 'morphNormal' + i ) === true ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphNormal' + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tupdate: update\n\n\t};\n\n}\n\nfunction WebGLObjects( gl, geometries, attributes, info ) {\n\n\tlet updateMap = new WeakMap();\n\n\tfunction update( object ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\tconst geometry = object.geometry;\n\t\tconst buffergeometry = geometries.get( object, geometry );\n\n\t\t// Update once per frame\n\n\t\tif ( updateMap.get( buffergeometry ) !== frame ) {\n\n\t\t\tgeometries.update( buffergeometry );\n\n\t\t\tupdateMap.set( buffergeometry, frame );\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh ) {\n\n\t\t\tif ( object.hasEventListener( 'dispose', onInstancedMeshDispose ) === false ) {\n\n\t\t\t\tobject.addEventListener( 'dispose', onInstancedMeshDispose );\n\n\t\t\t}\n\n\t\t\tattributes.update( object.instanceMatrix, 34962 );\n\n\t\t\tif ( object.instanceColor !== null ) {\n\n\t\t\t\tattributes.update( object.instanceColor, 34962 );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tupdateMap = new WeakMap();\n\n\t}\n\n\tfunction onInstancedMeshDispose( event ) {\n\n\t\tconst instancedMesh = event.target;\n\n\t\tinstancedMesh.removeEventListener( 'dispose', onInstancedMeshDispose );\n\n\t\tattributes.remove( instancedMesh.instanceMatrix );\n\n\t\tif ( instancedMesh.instanceColor !== null ) attributes.remove( instancedMesh.instanceColor );\n\n\t}\n\n\treturn {\n\n\t\tupdate: update,\n\t\tdispose: dispose\n\n\t};\n\n}\n\nclass DataTexture3D extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tsuper( null );\n\n\t\tthis.image = { data, width, height, depth };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nDataTexture3D.prototype.isDataTexture3D = true;\n\n/**\n * Uniforms of a program.\n * Those form a tree structure with a special top-level container for the root,\n * which you get by calling 'new WebGLUniforms( gl, program )'.\n *\n *\n * Properties of inner nodes including the top-level container:\n *\n * .seq - array of nested uniforms\n * .map - nested uniforms by name\n *\n *\n * Methods of all nodes except the top-level container:\n *\n * .setValue( gl, value, [textures] )\n *\n * \t\tuploads a uniform value(s)\n *  \tthe 'textures' parameter is needed for sampler uniforms\n *\n *\n * Static methods of the top-level container (textures factorizations):\n *\n * .upload( gl, seq, values, textures )\n *\n * \t\tsets uniforms in 'seq' to 'values[id].value'\n *\n * .seqWithValue( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with corresponding entry in values\n *\n *\n * Methods of the top-level container (textures factorizations):\n *\n * .setValue( gl, name, value, textures )\n *\n * \t\tsets uniform with  name 'name' to 'value'\n *\n * .setOptional( gl, obj, prop )\n *\n * \t\tlike .set for an optional property of the object\n *\n */\n\nconst emptyTexture = new Texture();\nconst emptyTexture2dArray = new DataTexture2DArray();\nconst emptyTexture3d = new DataTexture3D();\nconst emptyCubeTexture = new CubeTexture();\n\n// --- Utilities ---\n\n// Array Caches (provide typed arrays for temporary by size)\n\nconst arrayCacheF32 = [];\nconst arrayCacheI32 = [];\n\n// Float32Array caches used for uploading Matrix uniforms\n\nconst mat4array = new Float32Array( 16 );\nconst mat3array = new Float32Array( 9 );\nconst mat2array = new Float32Array( 4 );\n\n// Flattening for arrays of vectors and matrices\n\nfunction flatten( array, nBlocks, blockSize ) {\n\n\tconst firstElem = array[ 0 ];\n\n\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t// unoptimized: ! isNaN( firstElem )\n\t// see http://jacksondunstan.com/articles/983\n\n\tconst n = nBlocks * blockSize;\n\tlet r = arrayCacheF32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Float32Array( n );\n\t\tarrayCacheF32[ n ] = r;\n\n\t}\n\n\tif ( nBlocks !== 0 ) {\n\n\t\tfirstElem.toArray( r, 0 );\n\n\t\tfor ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\toffset += blockSize;\n\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t}\n\n\t}\n\n\treturn r;\n\n}\n\nfunction arraysEqual( a, b ) {\n\n\tif ( a.length !== b.length ) return false;\n\n\tfor ( let i = 0, l = a.length; i < l; i ++ ) {\n\n\t\tif ( a[ i ] !== b[ i ] ) return false;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction copyArray( a, b ) {\n\n\tfor ( let i = 0, l = b.length; i < l; i ++ ) {\n\n\t\ta[ i ] = b[ i ];\n\n\t}\n\n}\n\n// Texture unit allocation\n\nfunction allocTexUnits( textures, n ) {\n\n\tlet r = arrayCacheI32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Int32Array( n );\n\t\tarrayCacheI32[ n ] = r;\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\tr[ i ] = textures.allocateTextureUnit();\n\n\t}\n\n\treturn r;\n\n}\n\n// --- Setters ---\n\n// Note: Defining these methods externally, because they come in a bunch\n// and this way their names minify.\n\n// Single scalar\n\nfunction setValueV1f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1f( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single float vector (from flat array or THREE.VectorN)\n\nfunction setValueV2f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform2fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV3f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\n\t\t}\n\n\t} else if ( v.r !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\tcache[ 0 ] = v.r;\n\t\t\tcache[ 1 ] = v.g;\n\t\t\tcache[ 2 ] = v.b;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform3fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV4f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\t\t\tcache[ 3 ] = v.w;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform4fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\n// Single matrix (from flat array or THREE.MatrixN)\n\nfunction setValueM2( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat2array.set( elements );\n\n\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\nfunction setValueM3( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat3array.set( elements );\n\n\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\nfunction setValueM4( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat4array.set( elements );\n\n\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\n// Single integer / boolean\n\nfunction setValueV1i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1i( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single integer / boolean vector (from flat array)\n\nfunction setValueV2i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform2iv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV3i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform3iv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV4i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform4iv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\n// Single unsigned integer\n\nfunction setValueV1ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1ui( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single unsigned integer vector (from flat array)\n\nfunction setValueV2ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform2uiv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV3ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform3uiv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV4ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform4uiv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\n\n// Single texture (2D / Cube)\n\nfunction setValueT1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.safeSetTexture2D( v || emptyTexture, unit );\n\n}\n\nfunction setValueT3D1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture3D( v || emptyTexture3d, unit );\n\n}\n\nfunction setValueT6( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.safeSetTextureCube( v || emptyCubeTexture, unit );\n\n}\n\nfunction setValueT2DArray1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture2DArray( v || emptyTexture2dArray, unit );\n\n}\n\n// Helper to pick the right setter for the singular case\n\nfunction getSingularSetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValueV1f; // FLOAT\n\t\tcase 0x8b50: return setValueV2f; // _VEC2\n\t\tcase 0x8b51: return setValueV3f; // _VEC3\n\t\tcase 0x8b52: return setValueV4f; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2; // _MAT2\n\t\tcase 0x8b5b: return setValueM3; // _MAT3\n\t\tcase 0x8b5c: return setValueM4; // _MAT4\n\n\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n\n\t\tcase 0x1405: return setValueV1ui; // UINT\n\t\tcase 0x8dc6: return setValueV2ui; // _VEC2\n\t\tcase 0x8dc7: return setValueV3ui; // _VEC3\n\t\tcase 0x8dc8: return setValueV4ui; // _VEC4\n\n\t\tcase 0x8b5e: // SAMPLER_2D\n\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\treturn setValueT1;\n\n\t\tcase 0x8b5f: // SAMPLER_3D\n\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\treturn setValueT3D1;\n\n\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\treturn setValueT6;\n\n\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\treturn setValueT2DArray1;\n\n\t}\n\n}\n\n\n// Array of scalars\n\nfunction setValueV1fArray( gl, v ) {\n\n\tgl.uniform1fv( this.addr, v );\n\n}\n\n// Array of vectors (from flat array or array of THREE.VectorN)\n\nfunction setValueV2fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 2 );\n\n\tgl.uniform2fv( this.addr, data );\n\n}\n\nfunction setValueV3fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 3 );\n\n\tgl.uniform3fv( this.addr, data );\n\n}\n\nfunction setValueV4fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 4 );\n\n\tgl.uniform4fv( this.addr, data );\n\n}\n\n// Array of matrices (from flat array or array of THREE.MatrixN)\n\nfunction setValueM2Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 4 );\n\n\tgl.uniformMatrix2fv( this.addr, false, data );\n\n}\n\nfunction setValueM3Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 9 );\n\n\tgl.uniformMatrix3fv( this.addr, false, data );\n\n}\n\nfunction setValueM4Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 16 );\n\n\tgl.uniformMatrix4fv( this.addr, false, data );\n\n}\n\n// Array of integer / boolean\n\nfunction setValueV1iArray( gl, v ) {\n\n\tgl.uniform1iv( this.addr, v );\n\n}\n\n// Array of integer / boolean vectors (from flat array)\n\nfunction setValueV2iArray( gl, v ) {\n\n\tgl.uniform2iv( this.addr, v );\n\n}\n\nfunction setValueV3iArray( gl, v ) {\n\n\tgl.uniform3iv( this.addr, v );\n\n}\n\nfunction setValueV4iArray( gl, v ) {\n\n\tgl.uniform4iv( this.addr, v );\n\n}\n\n// Array of unsigned integer\n\nfunction setValueV1uiArray( gl, v ) {\n\n\tgl.uniform1uiv( this.addr, v );\n\n}\n\n// Array of unsigned integer vectors (from flat array)\n\nfunction setValueV2uiArray( gl, v ) {\n\n\tgl.uniform2uiv( this.addr, v );\n\n}\n\nfunction setValueV3uiArray( gl, v ) {\n\n\tgl.uniform3uiv( this.addr, v );\n\n}\n\nfunction setValueV4uiArray( gl, v ) {\n\n\tgl.uniform4uiv( this.addr, v );\n\n}\n\n\n// Array of textures (2D / Cube)\n\nfunction setValueT1Array( gl, v, textures ) {\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tgl.uniform1iv( this.addr, units );\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT6Array( gl, v, textures ) {\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tgl.uniform1iv( this.addr, units );\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t}\n\n}\n\n// Helper to pick the right setter for a pure (bottom-level) array\n\nfunction getPureArraySetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValueV1fArray; // FLOAT\n\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\n\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\n\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\n\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\n\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\n\n\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n\n\t\tcase 0x1405: return setValueV1uiArray; // UINT\n\t\tcase 0x8dc6: return setValueV2uiArray; // _VEC2\n\t\tcase 0x8dc7: return setValueV3uiArray; // _VEC3\n\t\tcase 0x8dc8: return setValueV4uiArray; // _VEC4\n\n\t\tcase 0x8b5e: // SAMPLER_2D\n\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\treturn setValueT1Array;\n\n\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\treturn setValueT6Array;\n\n\t}\n\n}\n\n// --- Uniform Classes ---\n\nfunction SingleUniform( id, activeInfo, addr ) {\n\n\tthis.id = id;\n\tthis.addr = addr;\n\tthis.cache = [];\n\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t// this.path = activeInfo.name; // DEBUG\n\n}\n\nfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\tthis.id = id;\n\tthis.addr = addr;\n\tthis.cache = [];\n\tthis.size = activeInfo.size;\n\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t// this.path = activeInfo.name; // DEBUG\n\n}\n\nPureArrayUniform.prototype.updateCache = function ( data ) {\n\n\tconst cache = this.cache;\n\n\tif ( data instanceof Float32Array && cache.length !== data.length ) {\n\n\t\tthis.cache = new Float32Array( data.length );\n\n\t}\n\n\tcopyArray( cache, data );\n\n};\n\nfunction StructuredUniform( id ) {\n\n\tthis.id = id;\n\n\tthis.seq = [];\n\tthis.map = {};\n\n}\n\nStructuredUniform.prototype.setValue = function ( gl, value, textures ) {\n\n\tconst seq = this.seq;\n\n\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tconst u = seq[ i ];\n\t\tu.setValue( gl, value[ u.id ], textures );\n\n\t}\n\n};\n\n// --- Top-level ---\n\n// Parser - builds up the property tree from the path strings\n\nconst RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g;\n\n// extracts\n// \t- the identifier (member name or array index)\n//  - followed by an optional right bracket (found when array index)\n//  - followed by an optional left bracket or dot (type of subscript)\n//\n// Note: These portions can be read in a non-overlapping fashion and\n// allow straightforward parsing of the hierarchy that WebGL encodes\n// in the uniform names.\n\nfunction addUniform( container, uniformObject ) {\n\n\tcontainer.seq.push( uniformObject );\n\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n}\n\nfunction parseUniform( activeInfo, addr, container ) {\n\n\tconst path = activeInfo.name,\n\t\tpathLength = path.length;\n\n\t// reset RegExp object, because of the early exit of a previous run\n\tRePathPart.lastIndex = 0;\n\n\twhile ( true ) {\n\n\t\tconst match = RePathPart.exec( path ),\n\t\t\tmatchEnd = RePathPart.lastIndex;\n\n\t\tlet id = match[ 1 ];\n\t\tconst idIsIndex = match[ 2 ] === ']',\n\t\t\tsubscript = match[ 3 ];\n\n\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\tbreak;\n\n\t\t} else {\n\n\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\tconst map = container.map;\n\t\t\tlet next = map[ id ];\n\n\t\t\tif ( next === undefined ) {\n\n\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\taddUniform( container, next );\n\n\t\t\t}\n\n\t\t\tcontainer = next;\n\n\t\t}\n\n\t}\n\n}\n\n// Root Container\n\nfunction WebGLUniforms( gl, program ) {\n\n\tthis.seq = [];\n\tthis.map = {};\n\n\tconst n = gl.getProgramParameter( program, 35718 );\n\n\tfor ( let i = 0; i < n; ++ i ) {\n\n\t\tconst info = gl.getActiveUniform( program, i ),\n\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\tparseUniform( info, addr, this );\n\n\t}\n\n}\n\nWebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {\n\n\tconst u = this.map[ name ];\n\n\tif ( u !== undefined ) u.setValue( gl, value, textures );\n\n};\n\nWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\tconst v = object[ name ];\n\n\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n};\n\n\n// Static interface\n\nWebGLUniforms.upload = function ( gl, seq, values, textures ) {\n\n\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tconst u = seq[ i ],\n\t\t\tv = values[ u.id ];\n\n\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\tu.setValue( gl, v.value, textures );\n\n\t\t}\n\n\t}\n\n};\n\nWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\tconst r = [];\n\n\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tconst u = seq[ i ];\n\t\tif ( u.id in values ) r.push( u );\n\n\t}\n\n\treturn r;\n\n};\n\nfunction WebGLShader( gl, type, string ) {\n\n\tconst shader = gl.createShader( type );\n\n\tgl.shaderSource( shader, string );\n\tgl.compileShader( shader );\n\n\treturn shader;\n\n}\n\nlet programIdCount = 0;\n\nfunction addLineNumbers( string ) {\n\n\tconst lines = string.split( '\\n' );\n\n\tfor ( let i = 0; i < lines.length; i ++ ) {\n\n\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t}\n\n\treturn lines.join( '\\n' );\n\n}\n\nfunction getEncodingComponents( encoding ) {\n\n\tswitch ( encoding ) {\n\n\t\tcase LinearEncoding:\n\t\t\treturn [ 'Linear', '( value )' ];\n\t\tcase sRGBEncoding:\n\t\t\treturn [ 'sRGB', '( value )' ];\n\t\tcase RGBEEncoding:\n\t\t\treturn [ 'RGBE', '( value )' ];\n\t\tcase RGBM7Encoding:\n\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\n\t\tcase RGBM16Encoding:\n\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\n\t\tcase RGBDEncoding:\n\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\n\t\tcase GammaEncoding:\n\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n\t\tcase LogLuvEncoding:\n\t\t\treturn [ 'LogLuv', '( value )' ];\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported encoding:', encoding );\n\t\t\treturn [ 'Linear', '( value )' ];\n\n\t}\n\n}\n\nfunction getShaderErrors( gl, shader, type ) {\n\n\tconst status = gl.getShaderParameter( shader, 35713 );\n\tconst errors = gl.getShaderInfoLog( shader ).trim();\n\n\tif ( status && errors === '' ) return '';\n\n\t// --enable-privileged-webgl-extension\n\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\treturn type.toUpperCase() + '\\n\\n' + errors + '\\n\\n' + addLineNumbers( gl.getShaderSource( shader ) );\n\n}\n\nfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\tconst components = getEncodingComponents( encoding );\n\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\n\n}\n\nfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\tconst components = getEncodingComponents( encoding );\n\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n}\n\nfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\tlet toneMappingName;\n\n\tswitch ( toneMapping ) {\n\n\t\tcase LinearToneMapping:\n\t\t\ttoneMappingName = 'Linear';\n\t\t\tbreak;\n\n\t\tcase ReinhardToneMapping:\n\t\t\ttoneMappingName = 'Reinhard';\n\t\t\tbreak;\n\n\t\tcase CineonToneMapping:\n\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\tbreak;\n\n\t\tcase ACESFilmicToneMapping:\n\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\tbreak;\n\n\t\tcase CustomToneMapping:\n\t\t\ttoneMappingName = 'Custom';\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );\n\t\t\ttoneMappingName = 'Linear';\n\n\t}\n\n\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n}\n\nfunction generateExtensions( parameters ) {\n\n\tconst chunks = [\n\t\t( parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t( parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t];\n\n\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n}\n\nfunction generateDefines( defines ) {\n\n\tconst chunks = [];\n\n\tfor ( const name in defines ) {\n\n\t\tconst value = defines[ name ];\n\n\t\tif ( value === false ) continue;\n\n\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t}\n\n\treturn chunks.join( '\\n' );\n\n}\n\nfunction fetchAttributeLocations( gl, program ) {\n\n\tconst attributes = {};\n\n\tconst n = gl.getProgramParameter( program, 35721 );\n\n\tfor ( let i = 0; i < n; i ++ ) {\n\n\t\tconst info = gl.getActiveAttrib( program, i );\n\t\tconst name = info.name;\n\n\t\tlet locationSize = 1;\n\t\tif ( info.type === 35674 ) locationSize = 2;\n\t\tif ( info.type === 35675 ) locationSize = 3;\n\t\tif ( info.type === 35676 ) locationSize = 4;\n\n\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\tattributes[ name ] = {\n\t\t\ttype: info.type,\n\t\t\tlocation: gl.getAttribLocation( program, name ),\n\t\t\tlocationSize: locationSize\n\t\t};\n\n\t}\n\n\treturn attributes;\n\n}\n\nfunction filterEmptyLine( string ) {\n\n\treturn string !== '';\n\n}\n\nfunction replaceLightNums( string, parameters ) {\n\n\treturn string\n\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n\n}\n\nfunction replaceClippingPlaneNums( string, parameters ) {\n\n\treturn string\n\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n}\n\n// Resolve Includes\n\nconst includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\nfunction resolveIncludes( string ) {\n\n\treturn string.replace( includePattern, includeReplacer );\n\n}\n\nfunction includeReplacer( match, include ) {\n\n\tconst string = ShaderChunk[ include ];\n\n\tif ( string === undefined ) {\n\n\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t}\n\n\treturn resolveIncludes( string );\n\n}\n\n// Unroll Loops\n\nconst deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\nconst unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\nfunction unrollLoops( string ) {\n\n\treturn string\n\t\t.replace( unrollLoopPattern, loopReplacer )\n\t\t.replace( deprecatedUnrollLoopPattern, deprecatedLoopReplacer );\n\n}\n\nfunction deprecatedLoopReplacer( match, start, end, snippet ) {\n\n\tconsole.warn( 'WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.' );\n\treturn loopReplacer( match, start, end, snippet );\n\n}\n\nfunction loopReplacer( match, start, end, snippet ) {\n\n\tlet string = '';\n\n\tfor ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\tstring += snippet\n\t\t\t.replace( /\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]' )\n\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\n\n\t}\n\n\treturn string;\n\n}\n\n//\n\nfunction generatePrecision( parameters ) {\n\n\tlet precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n\tif ( parameters.precision === 'highp' ) {\n\n\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\n\t} else if ( parameters.precision === 'mediump' ) {\n\n\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\n\t} else if ( parameters.precision === 'lowp' ) {\n\n\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\n\t}\n\n\treturn precisionstring;\n\n}\n\nfunction generateShadowMapTypeDefine( parameters ) {\n\n\tlet shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\n\t}\n\n\treturn shadowMapTypeDefine;\n\n}\n\nfunction generateEnvMapTypeDefine( parameters ) {\n\n\tlet envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\tcase CubeReflectionMapping:\n\t\t\tcase CubeRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\tbreak;\n\n\t\t\tcase CubeUVReflectionMapping:\n\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapTypeDefine;\n\n}\n\nfunction generateEnvMapModeDefine( parameters ) {\n\n\tlet envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\tcase CubeRefractionMapping:\n\t\t\tcase CubeUVRefractionMapping:\n\n\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapModeDefine;\n\n}\n\nfunction generateEnvMapBlendingDefine( parameters ) {\n\n\tlet envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.combine ) {\n\n\t\t\tcase MultiplyOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\tbreak;\n\n\t\t\tcase MixOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\tbreak;\n\n\t\t\tcase AddOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapBlendingDefine;\n\n}\n\nfunction WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {\n\n\t// TODO Send this event to Three.js DevTools\n\t// console.log( 'WebGLProgram', cacheKey );\n\n\tconst gl = renderer.getContext();\n\n\tconst defines = parameters.defines;\n\n\tlet vertexShader = parameters.vertexShader;\n\tlet fragmentShader = parameters.fragmentShader;\n\n\tconst shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n\tconst envMapTypeDefine = generateEnvMapTypeDefine( parameters );\n\tconst envMapModeDefine = generateEnvMapModeDefine( parameters );\n\tconst envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\n\n\n\tconst gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\tconst customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );\n\n\tconst customDefines = generateDefines( defines );\n\n\tconst program = gl.createProgram();\n\n\tlet prefixVertex, prefixFragment;\n\tlet versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\tif ( parameters.isRawShaderMaterial ) {\n\n\t\tprefixVertex = [\n\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\tprefixVertex += '\\n';\n\n\t\t}\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\tprefixFragment += '\\n';\n\n\t\t}\n\n\t} else {\n\n\t\tprefixVertex = [\n\n\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines,\n\n\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\n\t\t\tparameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',\n\n\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\n\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',\n\t\t\tparameters.specularTintMap ? '#define USE_SPECULARTINTMAP' : '',\n\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\tparameters.transmission ? '#define USE_TRANSMISSION' : '',\n\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n\t\t\tparameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\n\n\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\tparameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\n\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t( parameters.morphTargets && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE' : '',\n\t\t\t( parameters.morphTargets && parameters.isWebGL2 ) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t'#ifdef USE_INSTANCING',\n\n\t\t\t'\tattribute mat4 instanceMatrix;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_INSTANCING_COLOR',\n\n\t\t\t'\tattribute vec3 instanceColor;',\n\n\t\t\t'#endif',\n\n\t\t\t'attribute vec3 position;',\n\t\t\t'attribute vec3 normal;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'#ifdef USE_TANGENT',\n\n\t\t\t'\tattribute vec4 tangent;',\n\n\t\t\t'#endif',\n\n\t\t\t'#if defined( USE_COLOR_ALPHA )',\n\n\t\t\t'\tattribute vec4 color;',\n\n\t\t\t'#elif defined( USE_COLOR )',\n\n\t\t\t'\tattribute vec3 color;',\n\n\t\t\t'#endif',\n\n\t\t\t'#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',\n\n\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t'\t#else',\n\n\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t'\t#endif',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t'#endif',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\n\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines,\n\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\tparameters.clearcoat ? '#define USE_CLEARCOAT' : '',\n\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',\n\t\t\tparameters.specularTintMap ? '#define USE_SPECULARTINTMAP' : '',\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\tparameters.alphaTest ? '#define USE_ALPHATEST' : '',\n\n\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\n\n\t\t\tparameters.transmission ? '#define USE_TRANSMISSION' : '',\n\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n\t\t\tparameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\n\n\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\tparameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',\n\t\t\tparameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\n\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t( ( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\t\t\tparameters.format === RGBFormat ? '#define OPAQUE' : '',\n\n\t\t\tShaderChunk[ 'encodings_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tparameters.map ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\tparameters.matcap ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',\n\t\t\tparameters.envMap ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\tparameters.emissiveMap ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\tparameters.specularTintMap ? getTexelDecodingFunction( 'specularTintMapTexelToLinear', parameters.specularTintMapEncoding ) : '',\n\t\t\tparameters.lightMap ? getTexelDecodingFunction( 'lightMapTexelToLinear', parameters.lightMapEncoding ) : '',\n\t\t\tgetTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ),\n\n\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tvertexShader = resolveIncludes( vertexShader );\n\tvertexShader = replaceLightNums( vertexShader, parameters );\n\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\tfragmentShader = resolveIncludes( fragmentShader );\n\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\tvertexShader = unrollLoops( vertexShader );\n\tfragmentShader = unrollLoops( fragmentShader );\n\n\tif ( parameters.isWebGL2 && parameters.isRawShaderMaterial !== true ) {\n\n\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\n\t\tversionString = '#version 300 es\\n';\n\n\t\tprefixVertex = [\n\t\t\t'precision mediump sampler2DArray;',\n\t\t\t'#define attribute in',\n\t\t\t'#define varying out',\n\t\t\t'#define texture2D texture'\n\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\tprefixFragment = [\n\t\t\t'#define varying in',\n\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : 'out highp vec4 pc_fragColor;',\n\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t'#define texture2D texture',\n\t\t\t'#define textureCube texture',\n\t\t\t'#define texture2DProj textureProj',\n\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t}\n\n\tconst vertexGlsl = versionString + prefixVertex + vertexShader;\n\tconst fragmentGlsl = versionString + prefixFragment + fragmentShader;\n\n\t// console.log( '*VERTEX*', vertexGlsl );\n\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\tconst glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\n\tconst glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\n\n\tgl.attachShader( program, glVertexShader );\n\tgl.attachShader( program, glFragmentShader );\n\n\t// Force a particular attribute to index 0.\n\n\tif ( parameters.index0AttributeName !== undefined ) {\n\n\t\tgl.bindAttribLocation( program, 0, parameters.index0AttributeName );\n\n\t} else if ( parameters.morphTargets === true ) {\n\n\t\t// programs with morphTargets displace position out of attribute 0\n\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t}\n\n\tgl.linkProgram( program );\n\n\t// check for link errors\n\tif ( renderer.debug.checkShaderErrors ) {\n\n\t\tconst programLog = gl.getProgramInfoLog( program ).trim();\n\t\tconst vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\tconst fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\tlet runnable = true;\n\t\tlet haveDiagnostics = true;\n\n\t\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\n\n\t\t\trunnable = false;\n\n\t\t\tconst vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\tconst fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\tconsole.error(\n\t\t\t\t'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +\n\t\t\t\t'VALIDATE_STATUS ' + gl.getProgramParameter( program, 35715 ) + '\\n\\n' +\n\t\t\t\t'Program Info Log: ' + programLog + '\\n' +\n\t\t\t\tvertexErrors + '\\n' +\n\t\t\t\tfragmentErrors\n\t\t\t);\n\n\t\t} else if ( programLog !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );\n\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\thaveDiagnostics = false;\n\n\t\t}\n\n\t\tif ( haveDiagnostics ) {\n\n\t\t\tthis.diagnostics = {\n\n\t\t\t\trunnable: runnable,\n\n\t\t\t\tprogramLog: programLog,\n\n\t\t\t\tvertexShader: {\n\n\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t},\n\n\t\t\t\tfragmentShader: {\n\n\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t}\n\n\t// Clean up\n\n\t// Crashes in iOS9 and iOS10. #18402\n\t// gl.detachShader( program, glVertexShader );\n\t// gl.detachShader( program, glFragmentShader );\n\n\tgl.deleteShader( glVertexShader );\n\tgl.deleteShader( glFragmentShader );\n\n\t// set up caching for uniform locations\n\n\tlet cachedUniforms;\n\n\tthis.getUniforms = function () {\n\n\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\n\n\t\t}\n\n\t\treturn cachedUniforms;\n\n\t};\n\n\t// set up caching for attribute locations\n\n\tlet cachedAttributes;\n\n\tthis.getAttributes = function () {\n\n\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t}\n\n\t\treturn cachedAttributes;\n\n\t};\n\n\t// free resource\n\n\tthis.destroy = function () {\n\n\t\tbindingStates.releaseStatesOfProgram( this );\n\n\t\tgl.deleteProgram( program );\n\t\tthis.program = undefined;\n\n\t};\n\n\t//\n\n\tthis.name = parameters.shaderName;\n\tthis.id = programIdCount ++;\n\tthis.cacheKey = cacheKey;\n\tthis.usedTimes = 1;\n\tthis.program = program;\n\tthis.vertexShader = glVertexShader;\n\tthis.fragmentShader = glFragmentShader;\n\n\treturn this;\n\n}\n\nfunction WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {\n\n\tconst programs = [];\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\tconst logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\tconst floatVertexTextures = capabilities.floatVertexTextures;\n\tconst maxVertexUniforms = capabilities.maxVertexUniforms;\n\tconst vertexTextures = capabilities.vertexTextures;\n\n\tlet precision = capabilities.precision;\n\n\tconst shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tMeshToonMaterial: 'toon',\n\t\tMeshStandardMaterial: 'physical',\n\t\tMeshPhysicalMaterial: 'physical',\n\t\tMeshMatcapMaterial: 'matcap',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points',\n\t\tShadowMaterial: 'shadow',\n\t\tSpriteMaterial: 'sprite'\n\t};\n\n\tconst parameterNames = [\n\t\t'precision', 'isWebGL2', 'supportsVertexTextures', 'outputEncoding', 'instancing', 'instancingColor',\n\t\t'map', 'mapEncoding', 'matcap', 'matcapEncoding', 'envMap', 'envMapMode', 'envMapEncoding', 'envMapCubeUV',\n\t\t'lightMap', 'lightMapEncoding', 'aoMap', 'emissiveMap', 'emissiveMapEncoding', 'bumpMap', 'normalMap',\n\t\t'objectSpaceNormalMap', 'tangentSpaceNormalMap',\n\t\t'clearcoat', 'clearcoatMap', 'clearcoatRoughnessMap', 'clearcoatNormalMap',\n\t\t'displacementMap',\n\t\t'specularMap', 'specularIntensityMap', 'specularTintMap', 'specularTintMapEncoding', 'roughnessMap', 'metalnessMap', 'gradientMap',\n\t\t'alphaMap', 'alphaTest', 'combine', 'vertexColors', 'vertexAlphas', 'vertexTangents', 'vertexUvs', 'uvsVertexOnly', 'fog', 'useFog', 'fogExp2',\n\t\t'flatShading', 'sizeAttenuation', 'logarithmicDepthBuffer', 'skinning',\n\t\t'maxBones', 'useVertexTexture', 'morphTargets', 'morphNormals', 'morphTargetsCount', 'premultipliedAlpha',\n\t\t'numDirLights', 'numPointLights', 'numSpotLights', 'numHemiLights', 'numRectAreaLights',\n\t\t'numDirLightShadows', 'numPointLightShadows', 'numSpotLightShadows',\n\t\t'shadowMapEnabled', 'shadowMapType', 'toneMapping', 'physicallyCorrectLights',\n\t\t'doubleSided', 'flipSided', 'numClippingPlanes', 'numClipIntersection', 'depthPacking', 'dithering', 'format',\n\t\t'sheen', 'transmission', 'transmissionMap', 'thicknessMap'\n\t];\n\n\tfunction getMaxBones( object ) {\n\n\t\tconst skeleton = object.skeleton;\n\t\tconst bones = skeleton.bones;\n\n\t\tif ( floatVertexTextures ) {\n\n\t\t\treturn 1024;\n\n\t\t} else {\n\n\t\t\t// default for when object is not specified\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t//\n\t\t\t//  - leave some extra space for other uniforms\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t//    (up to 54 should be safe)\n\n\t\t\tconst nVertexUniforms = maxVertexUniforms;\n\t\t\tconst nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\tconst maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\treturn maxBones;\n\n\t\t}\n\n\t}\n\n\tfunction getTextureEncodingFromMap( map ) {\n\n\t\tlet encoding;\n\n\t\tif ( map && map.isTexture ) {\n\n\t\t\tencoding = map.encoding;\n\n\t\t} else if ( map && map.isWebGLRenderTarget ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLPrograms.getTextureEncodingFromMap: don\\'t use render targets as textures. Use their .texture property instead.' );\n\t\t\tencoding = map.texture.encoding;\n\n\t\t} else {\n\n\t\t\tencoding = LinearEncoding;\n\n\t\t}\n\n\t\tif ( isWebGL2 && map && map.isTexture && map.format === RGBAFormat && map.type === UnsignedByteType && map.encoding === sRGBEncoding ) {\n\n\t\t\tencoding = LinearEncoding; // disable inline decode for sRGB textures in WebGL 2\n\n\t\t}\n\n\t\treturn encoding;\n\n\t}\n\n\tfunction getParameters( material, lights, shadows, scene, object ) {\n\n\t\tconst fog = scene.fog;\n\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\n\n\t\tconst shaderID = shaderIDs[ material.type ];\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tconst maxBones = object.isSkinnedMesh ? getMaxBones( object ) : 0;\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet vertexShader, fragmentShader;\n\n\t\tif ( shaderID ) {\n\n\t\t\tconst shader = ShaderLib[ shaderID ];\n\n\t\t\tvertexShader = shader.vertexShader;\n\t\t\tfragmentShader = shader.fragmentShader;\n\n\t\t} else {\n\n\t\t\tvertexShader = material.vertexShader;\n\t\t\tfragmentShader = material.fragmentShader;\n\n\t\t}\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tconst useAlphaTest = material.alphaTest > 0;\n\t\tconst useClearcoat = material.clearcoat > 0;\n\n\t\tconst parameters = {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tshaderID: shaderID,\n\t\t\tshaderName: material.type,\n\n\t\t\tvertexShader: vertexShader,\n\t\t\tfragmentShader: fragmentShader,\n\t\t\tdefines: material.defines,\n\n\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\tglslVersion: material.glslVersion,\n\n\t\t\tprecision: precision,\n\n\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\n\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\toutputEncoding: ( currentRenderTarget !== null ) ? getTextureEncodingFromMap( currentRenderTarget.texture ) : renderer.outputEncoding,\n\t\t\tmap: !! material.map,\n\t\t\tmapEncoding: getTextureEncodingFromMap( material.map ),\n\t\t\tmatcap: !! material.matcap,\n\t\t\tmatcapEncoding: getTextureEncodingFromMap( material.matcap ),\n\t\t\tenvMap: !! envMap,\n\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\tenvMapEncoding: getTextureEncodingFromMap( envMap ),\n\t\t\tenvMapCubeUV: ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\tlightMap: !! material.lightMap,\n\t\t\tlightMapEncoding: getTextureEncodingFromMap( material.lightMap ),\n\t\t\taoMap: !! material.aoMap,\n\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap ),\n\t\t\tbumpMap: !! material.bumpMap,\n\t\t\tnormalMap: !! material.normalMap,\n\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\n\t\t\tclearcoat: useClearcoat,\n\t\t\tclearcoatMap: useClearcoat && !! material.clearcoatMap,\n\t\t\tclearcoatRoughnessMap: useClearcoat && !! material.clearcoatRoughnessMap,\n\t\t\tclearcoatNormalMap: useClearcoat && !! material.clearcoatNormalMap,\n\n\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\tspecularMap: !! material.specularMap,\n\t\t\tspecularIntensityMap: !! material.specularIntensityMap,\n\t\t\tspecularTintMap: !! material.specularTintMap,\n\t\t\tspecularTintMapEncoding: getTextureEncodingFromMap( material.specularTintMap ),\n\n\t\t\talphaMap: !! material.alphaMap,\n\t\t\talphaTest: useAlphaTest,\n\n\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\tsheen: material.sheen > 0,\n\n\t\t\ttransmission: material.transmission > 0,\n\t\t\ttransmissionMap: !! material.transmissionMap,\n\t\t\tthicknessMap: !! material.thicknessMap,\n\n\t\t\tcombine: material.combine,\n\n\t\t\tvertexTangents: ( !! material.normalMap && !! object.geometry && !! object.geometry.attributes.tangent ),\n\t\t\tvertexColors: material.vertexColors,\n\t\t\tvertexAlphas: material.vertexColors === true && !! object.geometry && !! object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4,\n\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.displacementMap || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularTintMap,\n\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || material.transmission > 0 || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularTintMap ) && !! material.displacementMap,\n\n\t\t\tfog: !! fog,\n\t\t\tuseFog: material.fog,\n\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\tflatShading: !! material.flatShading,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tskinning: object.isSkinnedMesh === true && maxBones > 0,\n\t\t\tmaxBones: maxBones,\n\t\t\tuseVertexTexture: floatVertexTextures,\n\n\t\t\tmorphTargets: !! object.geometry && !! object.geometry.morphAttributes.position,\n\t\t\tmorphNormals: !! object.geometry && !! object.geometry.morphAttributes.normal,\n\t\t\tmorphTargetsCount: ( !! object.geometry && !! object.geometry.morphAttributes.position ) ? object.geometry.morphAttributes.position.length : 0,\n\n\t\t\tnumDirLights: lights.directional.length,\n\t\t\tnumPointLights: lights.point.length,\n\t\t\tnumSpotLights: lights.spot.length,\n\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\n\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\tnumClipIntersection: clipping.numIntersection,\n\n\t\t\tformat: material.format,\n\t\t\tdithering: material.dithering,\n\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\tflipSided: material.side === BackSide,\n\n\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,\n\n\t\t\tindex0AttributeName: material.index0AttributeName,\n\n\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\n\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has( 'EXT_frag_depth' ),\n\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has( 'WEBGL_draw_buffers' ),\n\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has( 'EXT_shader_texture_lod' ),\n\n\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\n\t\t};\n\n\t\treturn parameters;\n\n\t}\n\n\tfunction getProgramCacheKey( parameters ) {\n\n\t\tconst array = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tarray.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tarray.push( parameters.fragmentShader );\n\t\t\tarray.push( parameters.vertexShader );\n\n\t\t}\n\n\t\tif ( parameters.defines !== undefined ) {\n\n\t\t\tfor ( const name in parameters.defines ) {\n\n\t\t\t\tarray.push( name );\n\t\t\t\tarray.push( parameters.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( parameters.isRawShaderMaterial === false ) {\n\n\t\t\tfor ( let i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t}\n\n\t\t\tarray.push( renderer.outputEncoding );\n\t\t\tarray.push( renderer.gammaFactor );\n\n\t\t}\n\n\t\tarray.push( parameters.customProgramCacheKey );\n\n\t\treturn array.join();\n\n\t}\n\n\tfunction getUniforms( material ) {\n\n\t\tconst shaderID = shaderIDs[ material.type ];\n\t\tlet uniforms;\n\n\t\tif ( shaderID ) {\n\n\t\t\tconst shader = ShaderLib[ shaderID ];\n\t\t\tuniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t} else {\n\n\t\t\tuniforms = material.uniforms;\n\n\t\t}\n\n\t\treturn uniforms;\n\n\t}\n\n\tfunction acquireProgram( parameters, cacheKey ) {\n\n\t\tlet program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( let p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tconst preexistingProgram = programs[ p ];\n\n\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t}\n\n\tfunction releaseProgram( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tconst i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tgetParameters: getParameters,\n\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\tgetUniforms: getUniforms,\n\t\tacquireProgram: acquireProgram,\n\t\treleaseProgram: releaseProgram,\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tprograms: programs\n\t};\n\n}\n\nfunction WebGLProperties() {\n\n\tlet properties = new WeakMap();\n\n\tfunction get( object ) {\n\n\t\tlet map = properties.get( object );\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tproperties.set( object, map );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\tfunction remove( object ) {\n\n\t\tproperties.delete( object );\n\n\t}\n\n\tfunction update( object, key, value ) {\n\n\t\tproperties.get( object )[ key ] = value;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tproperties = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction painterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.program !== b.program ) {\n\n\t\treturn a.program.id - b.program.id;\n\n\t} else if ( a.material.id !== b.material.id ) {\n\n\t\treturn a.material.id - b.material.id;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn a.z - b.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nfunction reversePainterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn b.z - a.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\n\nfunction WebGLRenderList( properties ) {\n\n\tconst renderItems = [];\n\tlet renderItemsIndex = 0;\n\n\tconst opaque = [];\n\tconst transmissive = [];\n\tconst transparent = [];\n\n\tconst defaultProgram = { id: - 1 };\n\n\tfunction init() {\n\n\t\trenderItemsIndex = 0;\n\n\t\topaque.length = 0;\n\t\ttransmissive.length = 0;\n\t\ttransparent.length = 0;\n\n\t}\n\n\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\tlet renderItem = renderItems[ renderItemsIndex ];\n\t\tconst materialProperties = properties.get( material );\n\n\t\tif ( renderItem === undefined ) {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tprogram: materialProperties.program || defaultProgram,\n\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\tz: z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t} else {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.program = materialProperties.program || defaultProgram;\n\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\trenderItem.z = z;\n\t\t\trenderItem.group = group;\n\n\t\t}\n\n\t\trenderItemsIndex ++;\n\n\t\treturn renderItem;\n\n\t}\n\n\tfunction push( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\tif ( material.transmission > 0.0 ) {\n\n\t\t\ttransmissive.push( renderItem );\n\n\t\t} else if ( material.transparent === true ) {\n\n\t\t\ttransparent.push( renderItem );\n\n\t\t} else {\n\n\t\t\topaque.push( renderItem );\n\n\t\t}\n\n\t}\n\n\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\tif ( material.transmission > 0.0 ) {\n\n\t\t\ttransmissive.unshift( renderItem );\n\n\t\t} else if ( material.transparent === true ) {\n\n\t\t\ttransparent.unshift( renderItem );\n\n\t\t} else {\n\n\t\t\topaque.unshift( renderItem );\n\n\t\t}\n\n\t}\n\n\tfunction sort( customOpaqueSort, customTransparentSort ) {\n\n\t\tif ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );\n\t\tif ( transmissive.length > 1 ) transmissive.sort( customTransparentSort || reversePainterSortStable );\n\t\tif ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );\n\n\t}\n\n\tfunction finish() {\n\n\t\t// Clear references from inactive renderItems in the list\n\n\t\tfor ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {\n\n\t\t\tconst renderItem = renderItems[ i ];\n\n\t\t\tif ( renderItem.id === null ) break;\n\n\t\t\trenderItem.id = null;\n\t\t\trenderItem.object = null;\n\t\t\trenderItem.geometry = null;\n\t\t\trenderItem.material = null;\n\t\t\trenderItem.program = null;\n\t\t\trenderItem.group = null;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\topaque: opaque,\n\t\ttransmissive: transmissive,\n\t\ttransparent: transparent,\n\n\t\tinit: init,\n\t\tpush: push,\n\t\tunshift: unshift,\n\t\tfinish: finish,\n\n\t\tsort: sort\n\t};\n\n}\n\nfunction WebGLRenderLists( properties ) {\n\n\tlet lists = new WeakMap();\n\n\tfunction get( scene, renderCallDepth ) {\n\n\t\tlet list;\n\n\t\tif ( lists.has( scene ) === false ) {\n\n\t\t\tlist = new WebGLRenderList( properties );\n\t\t\tlists.set( scene, [ list ] );\n\n\t\t} else {\n\n\t\t\tif ( renderCallDepth >= lists.get( scene ).length ) {\n\n\t\t\t\tlist = new WebGLRenderList( properties );\n\t\t\t\tlists.get( scene ).push( list );\n\n\t\t\t} else {\n\n\t\t\t\tlist = lists.get( scene )[ renderCallDepth ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn list;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tlists = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction UniformsCache() {\n\n\tconst lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tlet uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\nfunction ShadowUniformsCache() {\n\n\tconst lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tlet uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\n\n\nlet nextVersion = 0;\n\nfunction shadowCastingLightsFirst( lightA, lightB ) {\n\n\treturn ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\n\n}\n\nfunction WebGLLights( extensions, capabilities ) {\n\n\tconst cache = new UniformsCache();\n\n\tconst shadowCache = ShadowUniformsCache();\n\n\tconst state = {\n\n\t\tversion: 0,\n\n\t\thash: {\n\t\t\tdirectionalLength: - 1,\n\t\t\tpointLength: - 1,\n\t\t\tspotLength: - 1,\n\t\t\trectAreaLength: - 1,\n\t\t\themiLength: - 1,\n\n\t\t\tnumDirectionalShadows: - 1,\n\t\t\tnumPointShadows: - 1,\n\t\t\tnumSpotShadows: - 1\n\t\t},\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tprobe: [],\n\t\tdirectional: [],\n\t\tdirectionalShadow: [],\n\t\tdirectionalShadowMap: [],\n\t\tdirectionalShadowMatrix: [],\n\t\tspot: [],\n\t\tspotShadow: [],\n\t\tspotShadowMap: [],\n\t\tspotShadowMatrix: [],\n\t\trectArea: [],\n\t\trectAreaLTC1: null,\n\t\trectAreaLTC2: null,\n\t\tpoint: [],\n\t\tpointShadow: [],\n\t\tpointShadowMap: [],\n\t\tpointShadowMatrix: [],\n\t\themi: []\n\n\t};\n\n\tfor ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );\n\n\tconst vector3 = new Vector3();\n\tconst matrix4 = new Matrix4();\n\tconst matrix42 = new Matrix4();\n\n\tfunction setup( lights, physicallyCorrectLights ) {\n\n\t\tlet r = 0, g = 0, b = 0;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );\n\n\t\tlet directionalLength = 0;\n\t\tlet pointLength = 0;\n\t\tlet spotLength = 0;\n\t\tlet rectAreaLength = 0;\n\t\tlet hemiLength = 0;\n\n\t\tlet numDirectionalShadows = 0;\n\t\tlet numPointShadows = 0;\n\t\tlet numSpotShadows = 0;\n\n\t\tlights.sort( shadowCastingLightsFirst );\n\n\t\t// artist-friendly light intensity scaling factor\n\t\tconst scaleFactor = ( physicallyCorrectLights !== true ) ? Math.PI : 1;\n\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\n\t\t\tconst color = light.color;\n\t\t\tconst intensity = light.intensity;\n\t\t\tconst distance = light.distance;\n\n\t\t\tconst shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\tr += color.r * intensity * scaleFactor;\n\t\t\t\tg += color.g * intensity * scaleFactor;\n\t\t\t\tb += color.b * intensity * scaleFactor;\n\n\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\tfor ( let j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t}\n\n\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.directionalShadow[ directionalLength ] = shadowUniforms;\n\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity * scaleFactor );\n\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.spotShadow[ spotLength ] = shadowUniforms;\n\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );\n\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\tstate.pointShadow[ pointLength ] = shadowUniforms;\n\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity * scaleFactor );\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity * scaleFactor );\n\n\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( rectAreaLength > 0 ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\t// WebGL 2\n\n\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\n\t\t\t} else {\n\n\t\t\t\t// WebGL 1\n\n\t\t\t\tif ( extensions.has( 'OES_texture_float_linear' ) === true ) {\n\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\n\t\t\t\t} else if ( extensions.has( 'OES_texture_half_float_linear' ) === true ) {\n\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.ambient[ 0 ] = r;\n\t\tstate.ambient[ 1 ] = g;\n\t\tstate.ambient[ 2 ] = b;\n\n\t\tconst hash = state.hash;\n\n\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\thash.pointLength !== pointLength ||\n\t\t\thash.spotLength !== spotLength ||\n\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\thash.hemiLength !== hemiLength ||\n\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\thash.numSpotShadows !== numSpotShadows ) {\n\n\t\t\tstate.directional.length = directionalLength;\n\t\t\tstate.spot.length = spotLength;\n\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\tstate.point.length = pointLength;\n\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\n\t\t\thash.directionalLength = directionalLength;\n\t\t\thash.pointLength = pointLength;\n\t\t\thash.spotLength = spotLength;\n\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\thash.hemiLength = hemiLength;\n\n\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\thash.numPointShadows = numPointShadows;\n\t\t\thash.numSpotShadows = numSpotShadows;\n\n\t\t\tstate.version = nextVersion ++;\n\n\t\t}\n\n\t}\n\n\tfunction setupView( lights, camera ) {\n\n\t\tlet directionalLength = 0;\n\t\tlet pointLength = 0;\n\t\tlet spotLength = 0;\n\t\tlet rectAreaLength = 0;\n\t\tlet hemiLength = 0;\n\n\t\tconst viewMatrix = camera.matrixWorldInverse;\n\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\n\t\t\tif ( light.isDirectionalLight ) {\n\n\t\t\t\tconst uniforms = state.directional[ directionalLength ];\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tconst uniforms = state.spot[ spotLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tconst uniforms = state.rectArea[ rectAreaLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\tmatrix42.identity();\n\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tconst uniforms = state.point[ pointLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tconst uniforms = state.hemi[ hemiLength ];\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tsetup: setup,\n\t\tsetupView: setupView,\n\t\tstate: state\n\t};\n\n}\n\nfunction WebGLRenderState( extensions, capabilities ) {\n\n\tconst lights = new WebGLLights( extensions, capabilities );\n\n\tconst lightsArray = [];\n\tconst shadowsArray = [];\n\n\tfunction init() {\n\n\t\tlightsArray.length = 0;\n\t\tshadowsArray.length = 0;\n\n\t}\n\n\tfunction pushLight( light ) {\n\n\t\tlightsArray.push( light );\n\n\t}\n\n\tfunction pushShadow( shadowLight ) {\n\n\t\tshadowsArray.push( shadowLight );\n\n\t}\n\n\tfunction setupLights( physicallyCorrectLights ) {\n\n\t\tlights.setup( lightsArray, physicallyCorrectLights );\n\n\t}\n\n\tfunction setupLightsView( camera ) {\n\n\t\tlights.setupView( lightsArray, camera );\n\n\t}\n\n\tconst state = {\n\t\tlightsArray: lightsArray,\n\t\tshadowsArray: shadowsArray,\n\n\t\tlights: lights\n\t};\n\n\treturn {\n\t\tinit: init,\n\t\tstate: state,\n\t\tsetupLights: setupLights,\n\t\tsetupLightsView: setupLightsView,\n\n\t\tpushLight: pushLight,\n\t\tpushShadow: pushShadow\n\t};\n\n}\n\nfunction WebGLRenderStates( extensions, capabilities ) {\n\n\tlet renderStates = new WeakMap();\n\n\tfunction get( scene, renderCallDepth = 0 ) {\n\n\t\tlet renderState;\n\n\t\tif ( renderStates.has( scene ) === false ) {\n\n\t\t\trenderState = new WebGLRenderState( extensions, capabilities );\n\t\t\trenderStates.set( scene, [ renderState ] );\n\n\t\t} else {\n\n\t\t\tif ( renderCallDepth >= renderStates.get( scene ).length ) {\n\n\t\t\t\trenderState = new WebGLRenderState( extensions, capabilities );\n\t\t\t\trenderStates.get( scene ).push( renderState );\n\n\t\t\t} else {\n\n\t\t\t\trenderState = renderStates.get( scene )[ renderCallDepth ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn renderState;\n\n\t}\n\n\tfunction dispose() {\n\n\t\trenderStates = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\n/**\n * parameters = {\n *\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nclass MeshDepthMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n/**\n * parameters = {\n *\n *  referencePosition: <float>,\n *  nearDistance: <float>,\n *  farDistance: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>\n *\n * }\n */\n\nclass MeshDistanceMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.referencePosition.copy( source.referencePosition );\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\nconst vertex = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\nconst fragment = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\nuniform float samples;\\n#include <packing>\\nvoid main() {\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\\n\\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\\n\\tfor ( float i = 0.0; i < samples; i ++ ) {\\n\\t\\tfloat uvOffset = uvStart + i * uvStride;\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean / samples;\\n\\tsquared_mean = squared_mean / samples;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\nfunction WebGLShadowMap( _renderer, _objects, _capabilities ) {\n\n\tlet _frustum = new Frustum();\n\n\tconst _shadowMapSize = new Vector2(),\n\t\t_viewportSize = new Vector2(),\n\n\t\t_viewport = new Vector4(),\n\n\t\t_depthMaterial = new MeshDepthMaterial( { depthPacking: RGBADepthPacking } ),\n\t\t_distanceMaterial = new MeshDistanceMaterial(),\n\n\t\t_materialCache = {},\n\n\t\t_maxTextureSize = _capabilities.maxTextureSize;\n\n\tconst shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n\tconst shadowMaterialVertical = new ShaderMaterial( {\n\n\t\tuniforms: {\n\t\t\tshadow_pass: { value: null },\n\t\t\tresolution: { value: new Vector2() },\n\t\t\tradius: { value: 4.0 },\n\t\t\tsamples: { value: 8.0 }\n\t\t},\n\n\t\tvertexShader: vertex,\n\t\tfragmentShader: fragment\n\n\t} );\n\n\tconst shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\n\tconst fullScreenTri = new BufferGeometry();\n\tfullScreenTri.setAttribute(\n\t\t'position',\n\t\tnew BufferAttribute(\n\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\n\t\t\t3\n\t\t)\n\t);\n\n\tconst fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n\n\tconst scope = this;\n\n\tthis.enabled = false;\n\n\tthis.autoUpdate = true;\n\tthis.needsUpdate = false;\n\n\tthis.type = PCFShadowMap;\n\n\tthis.render = function ( lights, scene, camera ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\tif ( lights.length === 0 ) return;\n\n\t\tconst currentRenderTarget = _renderer.getRenderTarget();\n\t\tconst activeCubeFace = _renderer.getActiveCubeFace();\n\t\tconst activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\tconst _state = _renderer.state;\n\n\t\t// Set GL state for depth map.\n\t\t_state.setBlending( NoBlending );\n\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t_state.buffers.depth.setTest( true );\n\t\t_state.setScissorTest( false );\n\n\t\t// render depth map\n\n\t\tfor ( let i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\t\t\tconst shadow = light.shadow;\n\n\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;\n\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\tconst shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t\tif ( _shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize ) {\n\n\t\t\t\tif ( _shadowMapSize.x > _maxTextureSize ) {\n\n\t\t\t\t\t_viewportSize.x = Math.floor( _maxTextureSize / shadowFrameExtents.x );\n\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _shadowMapSize.y > _maxTextureSize ) {\n\n\t\t\t\t\t_viewportSize.y = Math.floor( _maxTextureSize / shadowFrameExtents.y );\n\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\tconst pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\n\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\n\t\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\tconst pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\n\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t_renderer.clear();\n\n\t\t\tconst viewportCount = shadow.getViewportCount();\n\n\t\t\tfor ( let vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\t\tconst viewport = shadow.getViewport( vp );\n\n\t\t\t\t_viewport.set(\n\t\t\t\t\t_viewportSize.x * viewport.x,\n\t\t\t\t\t_viewportSize.y * viewport.y,\n\t\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t\t);\n\n\t\t\t\t_state.viewport( _viewport );\n\n\t\t\t\tshadow.updateMatrices( light, vp );\n\n\t\t\t\t_frustum = shadow.getFrustum();\n\n\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\n\n\t\t\t}\n\n\t\t\t// do blur pass for VSM\n\n\t\t\tif ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\tVSMPass( shadow, camera );\n\n\t\t\t}\n\n\t\t\tshadow.needsUpdate = false;\n\n\t\t}\n\n\t\tscope.needsUpdate = false;\n\n\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t};\n\n\tfunction VSMPass( shadow, camera ) {\n\n\t\tconst geometry = _objects.update( fullScreenMesh );\n\n\t\t// vertical pass\n\n\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\tshadowMaterialVertical.uniforms.samples.value = shadow.blurSamples;\n\t\t_renderer.setRenderTarget( shadow.mapPass );\n\t\t_renderer.clear();\n\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n\n\t\t// horizontal pass\n\n\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\t\tshadowMaterialHorizontal.uniforms.samples.value = shadow.blurSamples;\n\t\t_renderer.setRenderTarget( shadow.map );\n\t\t_renderer.clear();\n\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null );\n\n\t}\n\n\tfunction getDepthMaterial( object, geometry, material, light, shadowCameraNear, shadowCameraFar, type ) {\n\n\t\tlet result = null;\n\n\t\tconst customMaterial = ( light.isPointLight === true ) ? object.customDistanceMaterial : object.customDepthMaterial;\n\n\t\tif ( customMaterial !== undefined ) {\n\n\t\t\tresult = customMaterial;\n\n\t\t} else {\n\n\t\t\tresult = ( light.isPointLight === true ) ? _distanceMaterial : _depthMaterial;\n\n\t\t}\n\n\t\tif ( ( _renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0 ) ||\n\t\t\t( material.displacementMap && material.displacementScale !== 0 ) ||\n\t\t\t( material.alphaMap && material.alphaTest > 0 ) ) {\n\n\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t// appropriate state\n\n\t\t\tconst keyA = result.uuid, keyB = material.uuid;\n\n\t\t\tlet materialsForVariant = _materialCache[ keyA ];\n\n\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t}\n\n\t\t\tlet cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult = cachedMaterial;\n\n\t\t}\n\n\t\tresult.visible = material.visible;\n\t\tresult.wireframe = material.wireframe;\n\n\t\tif ( type === VSMShadowMap ) {\n\n\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\n\n\t\t} else {\n\n\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t}\n\n\t\tresult.alphaMap = material.alphaMap;\n\t\tresult.alphaTest = material.alphaTest;\n\n\t\tresult.clipShadows = material.clipShadows;\n\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\tresult.displacementMap = material.displacementMap;\n\t\tresult.displacementScale = material.displacementScale;\n\t\tresult.displacementBias = material.displacementBias;\n\n\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\tresult.linewidth = material.linewidth;\n\n\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\n\n\t\t\tresult.referencePosition.setFromMatrixPosition( light.matrixWorld );\n\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction renderObject( object, camera, shadowCamera, light, type ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tconst visible = object.layers.test( camera.layers );\n\n\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\tconst geometry = _objects.update( object );\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\tfor ( let k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ k ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\tconst depthMaterial = getDepthMaterial( object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\tconst depthMaterial = getDepthMaterial( object, geometry, material, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\n\n\t\t}\n\n\t}\n\n}\n\nfunction WebGLState( gl, extensions, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tfunction ColorBuffer() {\n\n\t\tlet locked = false;\n\n\t\tconst color = new Vector4();\n\t\tlet currentColorMask = null;\n\t\tconst currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\treturn {\n\n\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t}\n\n\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentColorMask = null;\n\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction DepthBuffer() {\n\n\t\tlet locked = false;\n\n\t\tlet currentDepthMask = null;\n\t\tlet currentDepthFunc = null;\n\t\tlet currentDepthClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\tenable( 2929 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdisable( 2929 );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 512 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 519 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 513 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 514 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 518 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 516 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 517 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentDepthMask = null;\n\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction StencilBuffer() {\n\n\t\tlet locked = false;\n\n\t\tlet currentStencilMask = null;\n\t\tlet currentStencilFunc = null;\n\t\tlet currentStencilRef = null;\n\t\tlet currentStencilFuncMask = null;\n\t\tlet currentStencilFail = null;\n\t\tlet currentStencilZFail = null;\n\t\tlet currentStencilZPass = null;\n\t\tlet currentStencilClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\tenable( 2960 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( 2960 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t     currentStencilRef !== stencilRef ||\n\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\tif ( currentStencilFail !== stencilFail ||\n\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentStencilMask = null;\n\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\tcurrentStencilRef = null;\n\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\tcurrentStencilFail = null;\n\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tconst colorBuffer = new ColorBuffer();\n\tconst depthBuffer = new DepthBuffer();\n\tconst stencilBuffer = new StencilBuffer();\n\n\tlet enabledCapabilities = {};\n\n\tlet xrFramebuffer = null;\n\tlet currentBoundFramebuffers = {};\n\n\tlet currentProgram = null;\n\n\tlet currentBlendingEnabled = false;\n\tlet currentBlending = null;\n\tlet currentBlendEquation = null;\n\tlet currentBlendSrc = null;\n\tlet currentBlendDst = null;\n\tlet currentBlendEquationAlpha = null;\n\tlet currentBlendSrcAlpha = null;\n\tlet currentBlendDstAlpha = null;\n\tlet currentPremultipledAlpha = false;\n\n\tlet currentFlipSided = null;\n\tlet currentCullFace = null;\n\n\tlet currentLineWidth = null;\n\n\tlet currentPolygonOffsetFactor = null;\n\tlet currentPolygonOffsetUnits = null;\n\n\tconst maxTextures = gl.getParameter( 35661 );\n\n\tlet lineWidthAvailable = false;\n\tlet version = 0;\n\tconst glVersion = gl.getParameter( 7938 );\n\n\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^WebGL (\\d)/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^OpenGL ES (\\d)/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t}\n\n\tlet currentTextureSlot = null;\n\tlet currentBoundTextures = {};\n\n\tconst scissorParam = gl.getParameter( 3088 );\n\tconst viewportParam = gl.getParameter( 2978 );\n\n\tconst currentScissor = new Vector4().fromArray( scissorParam );\n\tconst currentViewport = new Vector4().fromArray( viewportParam );\n\n\tfunction createTexture( type, target, count ) {\n\n\t\tconst data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\tconst texture = gl.createTexture();\n\n\t\tgl.bindTexture( type, texture );\n\t\tgl.texParameteri( type, 10241, 9728 );\n\t\tgl.texParameteri( type, 10240, 9728 );\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tconst emptyTextures = {};\n\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\n\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\n\n\t// init\n\n\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\tdepthBuffer.setClear( 1 );\n\tstencilBuffer.setClear( 0 );\n\n\tenable( 2929 );\n\tdepthBuffer.setFunc( LessEqualDepth );\n\n\tsetFlipSided( false );\n\tsetCullFace( CullFaceBack );\n\tenable( 2884 );\n\n\tsetBlending( NoBlending );\n\n\t//\n\n\tfunction enable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\tgl.enable( id );\n\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t}\n\n\t}\n\n\tfunction disable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\tgl.disable( id );\n\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t}\n\n\t}\n\n\tfunction bindXRFramebuffer( framebuffer ) {\n\n\t\tif ( framebuffer !== xrFramebuffer ) {\n\n\t\t\tgl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\txrFramebuffer = framebuffer;\n\n\t\t}\n\n\t}\n\n\tfunction bindFramebuffer( target, framebuffer ) {\n\n\t\tif ( framebuffer === null && xrFramebuffer !== null ) framebuffer = xrFramebuffer; // use active XR framebuffer if available\n\n\t\tif ( currentBoundFramebuffers[ target ] !== framebuffer ) {\n\n\t\t\tgl.bindFramebuffer( target, framebuffer );\n\n\t\t\tcurrentBoundFramebuffers[ target ] = framebuffer;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t// 36009 is equivalent to 36160\n\n\t\t\t\tif ( target === 36009 ) {\n\n\t\t\t\t\tcurrentBoundFramebuffers[ 36160 ] = framebuffer;\n\n\t\t\t\t}\n\n\t\t\t\tif ( target === 36160 ) {\n\n\t\t\t\t\tcurrentBoundFramebuffers[ 36009 ] = framebuffer;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tfunction useProgram( program ) {\n\n\t\tif ( currentProgram !== program ) {\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tcurrentProgram = program;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tconst equationToGL = {\n\t\t[ AddEquation ]: 32774,\n\t\t[ SubtractEquation ]: 32778,\n\t\t[ ReverseSubtractEquation ]: 32779\n\t};\n\n\tif ( isWebGL2 ) {\n\n\t\tequationToGL[ MinEquation ] = 32775;\n\t\tequationToGL[ MaxEquation ] = 32776;\n\n\t} else {\n\n\t\tconst extension = extensions.get( 'EXT_blend_minmax' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\n\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\n\n\t\t}\n\n\t}\n\n\tconst factorToGL = {\n\t\t[ ZeroFactor ]: 0,\n\t\t[ OneFactor ]: 1,\n\t\t[ SrcColorFactor ]: 768,\n\t\t[ SrcAlphaFactor ]: 770,\n\t\t[ SrcAlphaSaturateFactor ]: 776,\n\t\t[ DstColorFactor ]: 774,\n\t\t[ DstAlphaFactor ]: 772,\n\t\t[ OneMinusSrcColorFactor ]: 769,\n\t\t[ OneMinusSrcAlphaFactor ]: 771,\n\t\t[ OneMinusDstColorFactor ]: 775,\n\t\t[ OneMinusDstAlphaFactor ]: 773\n\t};\n\n\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\tif ( blending === NoBlending ) {\n\n\t\t\tif ( currentBlendingEnabled === true ) {\n\n\t\t\t\tdisable( 3042 );\n\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( currentBlendingEnabled === false ) {\n\n\t\t\tenable( 3042 );\n\t\t\tcurrentBlendingEnabled = true;\n\n\t\t}\n\n\t\tif ( blending !== CustomBlending ) {\n\n\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\tgl.blendEquation( 32774 );\n\n\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t}\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 1, 771, 1, 771 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 1, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 0, 769, 771 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 768, 0, 770 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 770, 771, 1, 771 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 770, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 0, 769 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 0, 768 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\tcurrentBlendDst = null;\n\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\tcurrentBlending = blending;\n\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// custom blending\n\n\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t}\n\n\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\tcurrentBlendDst = blendDst;\n\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t}\n\n\t\tcurrentBlending = blending;\n\t\tcurrentPremultipledAlpha = null;\n\n\t}\n\n\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\tmaterial.side === DoubleSide\n\t\t\t? disable( 2884 )\n\t\t\t: enable( 2884 );\n\n\t\tlet flipSided = ( material.side === BackSide );\n\t\tif ( frontFaceCW ) flipSided = ! flipSided;\n\n\t\tsetFlipSided( flipSided );\n\n\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t? setBlending( NoBlending )\n\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\tdepthBuffer.setTest( material.depthTest );\n\t\tdepthBuffer.setMask( material.depthWrite );\n\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\tconst stencilWrite = material.stencilWrite;\n\t\tstencilBuffer.setTest( stencilWrite );\n\t\tif ( stencilWrite ) {\n\n\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t}\n\n\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\tmaterial.alphaToCoverage === true\n\t\t\t? enable( 32926 )\n\t\t\t: disable( 32926 );\n\n\t}\n\n\t//\n\n\tfunction setFlipSided( flipSided ) {\n\n\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( 2304 );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( 2305 );\n\n\t\t\t}\n\n\t\t\tcurrentFlipSided = flipSided;\n\n\t\t}\n\n\t}\n\n\tfunction setCullFace( cullFace ) {\n\n\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\tenable( 2884 );\n\n\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( 1029 );\n\n\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( 1028 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( 1032 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( 2884 );\n\n\t\t}\n\n\t\tcurrentCullFace = cullFace;\n\n\t}\n\n\tfunction setLineWidth( width ) {\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\n\n\t\t\tcurrentLineWidth = width;\n\n\t\t}\n\n\t}\n\n\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tenable( 32823 );\n\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( 32823 );\n\n\t\t}\n\n\t}\n\n\tfunction setScissorTest( scissorTest ) {\n\n\t\tif ( scissorTest ) {\n\n\t\t\tenable( 3089 );\n\n\t\t} else {\n\n\t\t\tdisable( 3089 );\n\n\t\t}\n\n\t}\n\n\t// texture\n\n\tfunction activeTexture( webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) webglSlot = 33984 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t}\n\n\t}\n\n\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\tif ( currentTextureSlot === null ) {\n\n\t\t\tactiveTexture();\n\n\t\t}\n\n\t\tlet boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t}\n\n\tfunction unbindTexture() {\n\n\t\tconst boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\tboundTexture.type = undefined;\n\t\t\tboundTexture.texture = undefined;\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction scissor( scissor ) {\n\n\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\tcurrentScissor.copy( scissor );\n\n\t\t}\n\n\t}\n\n\tfunction viewport( viewport ) {\n\n\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\tcurrentViewport.copy( viewport );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction reset() {\n\n\t\t// reset state\n\n\t\tgl.disable( 3042 );\n\t\tgl.disable( 2884 );\n\t\tgl.disable( 2929 );\n\t\tgl.disable( 32823 );\n\t\tgl.disable( 3089 );\n\t\tgl.disable( 2960 );\n\t\tgl.disable( 32926 );\n\n\t\tgl.blendEquation( 32774 );\n\t\tgl.blendFunc( 1, 0 );\n\t\tgl.blendFuncSeparate( 1, 0, 1, 0 );\n\n\t\tgl.colorMask( true, true, true, true );\n\t\tgl.clearColor( 0, 0, 0, 0 );\n\n\t\tgl.depthMask( true );\n\t\tgl.depthFunc( 513 );\n\t\tgl.clearDepth( 1 );\n\n\t\tgl.stencilMask( 0xffffffff );\n\t\tgl.stencilFunc( 519, 0, 0xffffffff );\n\t\tgl.stencilOp( 7680, 7680, 7680 );\n\t\tgl.clearStencil( 0 );\n\n\t\tgl.cullFace( 1029 );\n\t\tgl.frontFace( 2305 );\n\n\t\tgl.polygonOffset( 0, 0 );\n\n\t\tgl.activeTexture( 33984 );\n\n\t\tgl.bindFramebuffer( 36160, null );\n\n\t\tif ( isWebGL2 === true ) {\n\n\t\t\tgl.bindFramebuffer( 36009, null );\n\t\t\tgl.bindFramebuffer( 36008, null );\n\n\t\t}\n\n\t\tgl.useProgram( null );\n\n\t\tgl.lineWidth( 1 );\n\n\t\tgl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );\n\t\tgl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );\n\n\t\t// reset internals\n\n\t\tenabledCapabilities = {};\n\n\t\tcurrentTextureSlot = null;\n\t\tcurrentBoundTextures = {};\n\n\t\txrFramebuffer = null;\n\t\tcurrentBoundFramebuffers = {};\n\n\t\tcurrentProgram = null;\n\n\t\tcurrentBlendingEnabled = false;\n\t\tcurrentBlending = null;\n\t\tcurrentBlendEquation = null;\n\t\tcurrentBlendSrc = null;\n\t\tcurrentBlendDst = null;\n\t\tcurrentBlendEquationAlpha = null;\n\t\tcurrentBlendSrcAlpha = null;\n\t\tcurrentBlendDstAlpha = null;\n\t\tcurrentPremultipledAlpha = false;\n\n\t\tcurrentFlipSided = null;\n\t\tcurrentCullFace = null;\n\n\t\tcurrentLineWidth = null;\n\n\t\tcurrentPolygonOffsetFactor = null;\n\t\tcurrentPolygonOffsetUnits = null;\n\n\t\tcurrentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );\n\t\tcurrentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );\n\n\t\tcolorBuffer.reset();\n\t\tdepthBuffer.reset();\n\t\tstencilBuffer.reset();\n\n\t}\n\n\treturn {\n\n\t\tbuffers: {\n\t\t\tcolor: colorBuffer,\n\t\t\tdepth: depthBuffer,\n\t\t\tstencil: stencilBuffer\n\t\t},\n\n\t\tenable: enable,\n\t\tdisable: disable,\n\n\t\tbindFramebuffer: bindFramebuffer,\n\t\tbindXRFramebuffer: bindXRFramebuffer,\n\n\t\tuseProgram: useProgram,\n\n\t\tsetBlending: setBlending,\n\t\tsetMaterial: setMaterial,\n\n\t\tsetFlipSided: setFlipSided,\n\t\tsetCullFace: setCullFace,\n\n\t\tsetLineWidth: setLineWidth,\n\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\tsetScissorTest: setScissorTest,\n\n\t\tactiveTexture: activeTexture,\n\t\tbindTexture: bindTexture,\n\t\tunbindTexture: unbindTexture,\n\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\ttexImage2D: texImage2D,\n\t\ttexImage3D: texImage3D,\n\n\t\tscissor: scissor,\n\t\tviewport: viewport,\n\n\t\treset: reset\n\n\t};\n\n}\n\nfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\tconst maxTextures = capabilities.maxTextures;\n\tconst maxCubemapSize = capabilities.maxCubemapSize;\n\tconst maxTextureSize = capabilities.maxTextureSize;\n\tconst maxSamples = capabilities.maxSamples;\n\n\tconst _videoTextures = new WeakMap();\n\tlet _canvas;\n\n\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\tlet useOffscreenCanvas = false;\n\n\ttry {\n\n\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;\n\n\t} catch ( err ) {\n\n\t\t// Ignore any errors\n\n\t}\n\n\tfunction createCanvas( width, height ) {\n\n\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\treturn useOffscreenCanvas ?\n\t\t\tnew OffscreenCanvas( width, height ) : createElementNS( 'canvas' );\n\n\t}\n\n\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\tlet scale = 1;\n\n\t\t// handle case if texture exceeds max size\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t}\n\n\t\t// only perform resize if necessary\n\n\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t// only perform resize for certain image types\n\n\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\tconst floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;\n\n\t\t\t\tconst width = floor( scale * image.width );\n\t\t\t\tconst height = floor( scale * image.height );\n\n\t\t\t\tif ( _canvas === undefined ) _canvas = createCanvas( width, height );\n\n\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\tconst canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\tcanvas.width = width;\n\t\t\t\tcanvas.height = height;\n\n\t\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\treturn canvas;\n\n\t\t\t} else {\n\n\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t}\n\n\t\t\t\treturn image;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction isPowerOfTwo$1( image ) {\n\n\t\treturn isPowerOfTwo( image.width ) && isPowerOfTwo( image.height );\n\n\t}\n\n\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\tif ( isWebGL2 ) return false;\n\n\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t}\n\n\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t}\n\n\tfunction generateMipmap( target, texture, width, height, depth = 1 ) {\n\n\t\t_gl.generateMipmap( target );\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\ttextureProperties.__maxMipLevel = Math.log2( Math.max( width, height, depth ) );\n\n\t}\n\n\tfunction getInternalFormat( internalFormatName, glFormat, glType, encoding ) {\n\n\t\tif ( isWebGL2 === false ) return glFormat;\n\n\t\tif ( internalFormatName !== null ) {\n\n\t\t\tif ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t}\n\n\t\tlet internalFormat = glFormat;\n\n\t\tif ( glFormat === 6403 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 33326;\n\t\t\tif ( glType === 5131 ) internalFormat = 33325;\n\t\t\tif ( glType === 5121 ) internalFormat = 33321;\n\n\t\t}\n\n\t\tif ( glFormat === 6407 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 34837;\n\t\t\tif ( glType === 5131 ) internalFormat = 34843;\n\t\t\tif ( glType === 5121 ) internalFormat = 32849;\n\n\t\t}\n\n\t\tif ( glFormat === 6408 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 34836;\n\t\t\tif ( glType === 5131 ) internalFormat = 34842;\n\t\t\tif ( glType === 5121 ) internalFormat = ( encoding === sRGBEncoding ) ? 35907 : 32856;\n\n\t\t}\n\n\t\tif ( internalFormat === 33325 || internalFormat === 33326 ||\n\t\t\tinternalFormat === 34842 || internalFormat === 34836 ) {\n\n\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t}\n\n\t\treturn internalFormat;\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback( f ) {\n\n\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\treturn 9728;\n\n\t\t}\n\n\t\treturn 9729;\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t_videoTextures.delete( texture );\n\n\t\t}\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tconst renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\tproperties.remove( texture );\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( ! renderTarget ) return;\n\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\t\t\tif ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\n\n\t\t\tfor ( let i = 0, il = texture.length; i < il; i ++ ) {\n\n\t\t\t\tconst attachmentProperties = properties.get( texture[ i ] );\n\n\t\t\t\tif ( attachmentProperties.__webglTexture ) {\n\n\t\t\t\t\t_gl.deleteTexture( attachmentProperties.__webglTexture );\n\n\t\t\t\t\tinfo.memory.textures --;\n\n\t\t\t\t}\n\n\t\t\t\tproperties.remove( texture[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tproperties.remove( texture );\n\t\tproperties.remove( renderTarget );\n\n\t}\n\n\t//\n\n\tlet textureUnits = 0;\n\n\tfunction resetTextureUnits() {\n\n\t\ttextureUnits = 0;\n\n\t}\n\n\tfunction allocateTextureUnit() {\n\n\t\tconst textureUnit = textureUnits;\n\n\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t}\n\n\t\ttextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\t//\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tconst image = texture.image;\n\n\t\t\tif ( image === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTexture2DArray( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 35866, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTexture3D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 32879, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTextureCube( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadCubeTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t}\n\n\tconst wrappingToGL = {\n\t\t[ RepeatWrapping ]: 10497,\n\t\t[ ClampToEdgeWrapping ]: 33071,\n\t\t[ MirroredRepeatWrapping ]: 33648\n\t};\n\n\tconst filterToGL = {\n\t\t[ NearestFilter ]: 9728,\n\t\t[ NearestMipmapNearestFilter ]: 9984,\n\t\t[ NearestMipmapLinearFilter ]: 9986,\n\n\t\t[ LinearFilter ]: 9729,\n\t\t[ LinearMipmapNearestFilter ]: 9985,\n\t\t[ LinearMipmapLinearFilter ]: 9987\n\t};\n\n\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\tif ( supportsMips ) {\n\n\t\t\t_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );\n\t\t\t_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );\n\n\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );\n\t\t\t_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, 10242, 33071 );\n\t\t\t_gl.texParameteri( textureType, 10243, 33071 );\n\n\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 32882, 33071 );\n\n\t\t\t}\n\n\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\n\n\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2\n\t\t\tif ( isWebGL2 === false && ( texture.type === HalfFloatType && extensions.has( 'OES_texture_half_float_linear' ) === false ) ) return; // verify extension for WebGL 1 only\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction initTexture( textureProperties, texture ) {\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfo.memory.textures ++;\n\n\t\t}\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tlet textureType = 3553;\n\n\t\tif ( texture.isDataTexture2DArray ) textureType = 35866;\n\t\tif ( texture.isDataTexture3D ) textureType = 32879;\n\n\t\tinitTexture( textureProperties, texture );\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\n\n\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\t\t_gl.pixelStorei( 37443, 0 );\n\n\t\tconst needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo$1( texture.image ) === false;\n\t\tconst image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\n\t\tconst supportsMips = isPowerOfTwo$1( image ) || isWebGL2,\n\t\t\tglFormat = utils.convert( texture.format );\n\n\t\tlet glType = utils.convert( texture.type ),\n\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\n\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\tlet mipmap;\n\t\tconst mipmaps = texture.mipmaps;\n\n\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t// populate depth texture with dummy data\n\n\t\t\tglInternalFormat = 6402;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t} else if ( texture.type === UnsignedIntType ) {\n\n\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t} else if ( texture.type === UnsignedInt248Type ) {\n\n\t\t\t\t\tglInternalFormat = 35056;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tglInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\tconsole.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// validation checks for WebGL 1\n\n\t\t\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( texture.format === DepthStencilFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tglInternalFormat = 34041;\n\n\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t}\n\n\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\tstate.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t} else if ( texture.isDataTexture2DArray ) {\n\n\t\t\tstate.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t} else if ( texture.isDataTexture3D ) {\n\n\t\t\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t} else {\n\n\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\tgenerateMipmap( textureType, texture, image.width, image.height );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\tfunction uploadCubeTexture( textureProperties, texture, slot ) {\n\n\t\tif ( texture.image.length !== 6 ) return;\n\n\t\tinitTexture( textureProperties, texture );\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\t\t_gl.pixelStorei( 37443, 0 );\n\n\t\tconst isCompressed = ( texture && ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture ) );\n\t\tconst isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\tconst cubeImage = [];\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t} else {\n\n\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst image = cubeImage[ 0 ],\n\t\t\tsupportsMips = isPowerOfTwo$1( image ) || isWebGL2,\n\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\tglType = utils.convert( texture.type ),\n\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\n\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\tlet mipmaps;\n\n\t\tif ( isCompressed ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t} else {\n\n\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\t\t\t\t\t\tconst mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\n\t\t}\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t// We assume images for cube map have the same size.\n\t\t\tgenerateMipmap( 34067, texture, image.width, image.height );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget ) {\n\n\t\tconst glFormat = utils.convert( texture.format );\n\t\tconst glType = utils.convert( texture.type );\n\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\n\t\tif ( textureTarget === 32879 || textureTarget === 35866 ) {\n\n\t\t\tstate.texImage3D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null );\n\n\t\t} else {\n\n\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\n\t\t}\n\n\t\tstate.bindFramebuffer( 36160, framebuffer );\n\t\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( texture ).__webglTexture, 0 );\n\t\tstate.bindFramebuffer( 36160, null );\n\n\t}\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t_gl.bindRenderbuffer( 36161, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\tlet glInternalFormat = 33189;\n\n\t\t\tif ( isMultisample ) {\n\n\t\t\t\tconst depthTexture = renderTarget.depthTexture;\n\n\t\t\t\tif ( depthTexture && depthTexture.isDepthTexture ) {\n\n\t\t\t\t\tif ( depthTexture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t} else if ( depthTexture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\n\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\tif ( isMultisample ) {\n\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\n\t\t\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\n\n\t\t} else {\n\n\t\t\t// Use the first texture for MRT so far\n\t\t\tconst texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[ 0 ] : renderTarget.texture;\n\n\t\t\tconst glFormat = utils.convert( texture.format );\n\t\t\tconst glType = utils.convert( texture.type );\n\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\n\t\t\tif ( isMultisample ) {\n\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\tconst isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n\n\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t}\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tconst webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\n\n\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t}\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( 36160, null );\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets !== true ) {\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tinfo.memory.textures ++;\n\n\t\t}\n\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\t\tconst isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );\n\t\tconst isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );\n\t\tconst isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;\n\t\tconst supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;\n\n\t\t// Handles WebGL2 RGBFormat fallback - #18858\n\n\t\tif ( isWebGL2 && texture.format === RGBFormat && ( texture.type === FloatType || texture.type === HalfFloatType ) ) {\n\n\t\t\ttexture.format = RGBAFormat;\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.' );\n\n\t\t}\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tif ( capabilities.drawBuffers ) {\n\n\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst attachmentProperties = properties.get( textures[ i ] );\n\n\t\t\t\t\t\tif ( attachmentProperties.__webglTexture === undefined ) {\n\n\t\t\t\t\t\t\tattachmentProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( isMultisample ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );\n\n\t\t\t\t\tconst glFormat = utils.convert( texture.format );\n\t\t\t\t\tconst glType = utils.convert( texture.type );\n\t\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\t\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );\n\t\t\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.bindFramebuffer( 36160, null );\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, 36064, 34069 + i );\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( 34067, texture, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else if ( isMultipleRenderTargets ) {\n\n\t\t\tconst textures = renderTarget.texture;\n\n\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\tconst attachment = textures[ i ];\n\t\t\t\tconst attachmentProperties = properties.get( attachment );\n\n\t\t\t\tstate.bindTexture( 3553, attachmentProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 3553, attachment, supportsMips );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, 36064 + i, 3553 );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( attachment, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 3553, attachment, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else {\n\n\t\t\tlet glTextureType = 3553;\n\n\t\t\tif ( isRenderTarget3D ) {\n\n\t\t\t\t// Render targets containing layers, i.e: Texture 3D and 2d arrays\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tconst isTexture3D = texture.isDataTexture3D;\n\t\t\t\t\tglTextureType = isTexture3D ? 32879 : 35866;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( glTextureType, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( glTextureType, texture, supportsMips );\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, 36064, glTextureType );\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( glTextureType, texture, renderTarget.width, renderTarget.height, renderTarget.depth );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tconst supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;\n\n\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];\n\n\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\tconst texture = textures[ i ];\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tconst target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n\t\t\t\tconst webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\n\t\t\t\tstate.unbindTexture();\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\tif ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\tconst width = renderTarget.width;\n\t\t\t\tconst height = renderTarget.height;\n\t\t\t\tlet mask = 16384;\n\n\t\t\t\tif ( renderTarget.depthBuffer ) mask |= 256;\n\t\t\t\tif ( renderTarget.stencilBuffer ) mask |= 1024;\n\n\t\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\tstate.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\tstate.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\n\n\t\t\t\tstate.bindFramebuffer( 36008, null );\n\t\t\t\tstate.bindFramebuffer( 36009, renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\treturn ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?\n\t\t\tMath.min( maxSamples, renderTarget.samples ) : 0;\n\n\t}\n\n\tfunction updateVideoTexture( texture ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\t// Check the last frame we updated the VideoTexture\n\n\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t_videoTextures.set( texture, frame );\n\t\t\ttexture.update();\n\n\t\t}\n\n\t}\n\n\t// backwards compatibility\n\n\tlet warnedTexture2D = false;\n\tlet warnedTextureCube = false;\n\n\tfunction safeSetTexture2D( texture, slot ) {\n\n\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\tif ( warnedTexture2D === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLTextures.safeSetTexture2D: don\\'t use render targets as textures. Use their .texture property instead.' );\n\t\t\t\twarnedTexture2D = true;\n\n\t\t\t}\n\n\t\t\ttexture = texture.texture;\n\n\t\t}\n\n\t\tsetTexture2D( texture, slot );\n\n\t}\n\n\tfunction safeSetTextureCube( texture, slot ) {\n\n\t\tif ( texture && texture.isWebGLCubeRenderTarget ) {\n\n\t\t\tif ( warnedTextureCube === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLTextures.safeSetTextureCube: don\\'t use cube render targets as textures. Use their .texture property instead.' );\n\t\t\t\twarnedTextureCube = true;\n\n\t\t\t}\n\n\t\t\ttexture = texture.texture;\n\n\t\t}\n\n\n\t\tsetTextureCube( texture, slot );\n\n\t}\n\n\t//\n\n\tthis.allocateTextureUnit = allocateTextureUnit;\n\tthis.resetTextureUnits = resetTextureUnits;\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTexture2DArray = setTexture2DArray;\n\tthis.setTexture3D = setTexture3D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\n\tthis.safeSetTexture2D = safeSetTexture2D;\n\tthis.safeSetTextureCube = safeSetTextureCube;\n\n}\n\nfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tfunction convert( p ) {\n\n\t\tlet extension;\n\n\t\tif ( p === UnsignedByteType ) return 5121;\n\t\tif ( p === UnsignedShort4444Type ) return 32819;\n\t\tif ( p === UnsignedShort5551Type ) return 32820;\n\t\tif ( p === UnsignedShort565Type ) return 33635;\n\n\t\tif ( p === ByteType ) return 5120;\n\t\tif ( p === ShortType ) return 5122;\n\t\tif ( p === UnsignedShortType ) return 5123;\n\t\tif ( p === IntType ) return 5124;\n\t\tif ( p === UnsignedIntType ) return 5125;\n\t\tif ( p === FloatType ) return 5126;\n\n\t\tif ( p === HalfFloatType ) {\n\n\t\t\tif ( isWebGL2 ) return 5131;\n\n\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.HALF_FLOAT_OES;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === AlphaFormat ) return 6406;\n\t\tif ( p === RGBFormat ) return 6407;\n\t\tif ( p === RGBAFormat ) return 6408;\n\t\tif ( p === LuminanceFormat ) return 6409;\n\t\tif ( p === LuminanceAlphaFormat ) return 6410;\n\t\tif ( p === DepthFormat ) return 6402;\n\t\tif ( p === DepthStencilFormat ) return 34041;\n\t\tif ( p === RedFormat ) return 6403;\n\n\t\t// WebGL2 formats.\n\n\t\tif ( p === RedIntegerFormat ) return 36244;\n\t\tif ( p === RGFormat ) return 33319;\n\t\tif ( p === RGIntegerFormat ) return 33320;\n\t\tif ( p === RGBIntegerFormat ) return 36248;\n\t\tif ( p === RGBAIntegerFormat ) return 36249;\n\n\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_ETC2_Format ) return extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\tif ( p === RGBA_ETC2_EAC_Format ) return extension.COMPRESSED_RGBA8_ETC2_EAC;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ||\n\t\t\tp === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format ||\n\t\t\tp === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format ||\n\t\t\tp === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format ||\n\t\t\tp === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format ||\n\t\t\tp === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\t// TODO Complete?\n\n\t\t\t\treturn p;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGBA_BPTC_Format ) {\n\n\t\t\textension = extensions.get( 'EXT_texture_compression_bptc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\t// TODO Complete?\n\n\t\t\t\treturn p;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\tif ( isWebGL2 ) return 34042;\n\n\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { convert: convert };\n\n}\n\nclass ArrayCamera extends PerspectiveCamera {\n\n\tconstructor( array = [] ) {\n\n\t\tsuper();\n\n\t\tthis.cameras = array;\n\n\t}\n\n}\n\nArrayCamera.prototype.isArrayCamera = true;\n\nclass Group extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'Group';\n\n\t}\n\n}\n\nGroup.prototype.isGroup = true;\n\nconst _moveEvent = { type: 'move' };\n\nclass WebXRController {\n\n\tconstructor() {\n\n\t\tthis._targetRay = null;\n\t\tthis._grip = null;\n\t\tthis._hand = null;\n\n\t}\n\n\tgetHandSpace() {\n\n\t\tif ( this._hand === null ) {\n\n\t\t\tthis._hand = new Group();\n\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\tthis._hand.visible = false;\n\n\t\t\tthis._hand.joints = {};\n\t\t\tthis._hand.inputState = { pinching: false };\n\n\t\t}\n\n\t\treturn this._hand;\n\n\t}\n\n\tgetTargetRaySpace() {\n\n\t\tif ( this._targetRay === null ) {\n\n\t\t\tthis._targetRay = new Group();\n\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\tthis._targetRay.visible = false;\n\t\t\tthis._targetRay.hasLinearVelocity = false;\n\t\t\tthis._targetRay.linearVelocity = new Vector3();\n\t\t\tthis._targetRay.hasAngularVelocity = false;\n\t\t\tthis._targetRay.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._targetRay;\n\n\t}\n\n\tgetGripSpace() {\n\n\t\tif ( this._grip === null ) {\n\n\t\t\tthis._grip = new Group();\n\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\tthis._grip.visible = false;\n\t\t\tthis._grip.hasLinearVelocity = false;\n\t\t\tthis._grip.linearVelocity = new Vector3();\n\t\t\tthis._grip.hasAngularVelocity = false;\n\t\t\tthis._grip.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._grip;\n\n\t}\n\n\tdispatchEvent( event ) {\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.dispatchEvent( event );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect( inputSource ) {\n\n\t\tthis.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.visible = false;\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.visible = false;\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.visible = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tupdate( inputSource, frame, referenceSpace ) {\n\n\t\tlet inputPose = null;\n\t\tlet gripPose = null;\n\t\tlet handPose = null;\n\n\t\tconst targetRay = this._targetRay;\n\t\tconst grip = this._grip;\n\t\tconst hand = this._hand;\n\n\t\tif ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {\n\n\t\t\tif ( targetRay !== null ) {\n\n\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\ttargetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\ttargetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );\n\n\t\t\t\t\tif ( inputPose.linearVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = true;\n\t\t\t\t\t\ttargetRay.linearVelocity.copy( inputPose.linearVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( inputPose.angularVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = true;\n\t\t\t\t\t\ttargetRay.angularVelocity.copy( inputPose.angularVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.dispatchEvent( _moveEvent );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hand && inputSource.hand ) {\n\n\t\t\t\thandPose = true;\n\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\n\n\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\tconst jointPose = frame.getJointPose( inputjoint, referenceSpace );\n\n\t\t\t\t\tif ( hand.joints[ inputjoint.jointName ] === undefined ) {\n\n\t\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\t\tconst joint = new Group();\n\t\t\t\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\t\t\t\tjoint.visible = false;\n\t\t\t\t\t\thand.joints[ inputjoint.jointName ] = joint;\n\t\t\t\t\t\t// ??\n\t\t\t\t\t\thand.add( joint );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst joint = hand.joints[ inputjoint.jointName ];\n\n\t\t\t\t\tif ( jointPose !== null ) {\n\n\t\t\t\t\t\tjoint.matrix.fromArray( jointPose.transform.matrix );\n\t\t\t\t\t\tjoint.matrix.decompose( joint.position, joint.rotation, joint.scale );\n\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tjoint.visible = jointPose !== null;\n\n\t\t\t\t}\n\n\t\t\t\t// Custom events\n\n\t\t\t\t// Check pinchz\n\t\t\t\tconst indexTip = hand.joints[ 'index-finger-tip' ];\n\t\t\t\tconst thumbTip = hand.joints[ 'thumb-tip' ];\n\t\t\t\tconst distance = indexTip.position.distanceTo( thumbTip.position );\n\n\t\t\t\tconst distanceToPinch = 0.02;\n\t\t\t\tconst threshold = 0.005;\n\n\t\t\t\tif ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( grip !== null && inputSource.gripSpace ) {\n\n\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\tgrip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\tgrip.matrix.decompose( grip.position, grip.rotation, grip.scale );\n\n\t\t\t\t\t\tif ( gripPose.linearVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = true;\n\t\t\t\t\t\t\tgrip.linearVelocity.copy( gripPose.linearVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( gripPose.angularVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = true;\n\t\t\t\t\t\t\tgrip.angularVelocity.copy( gripPose.angularVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( targetRay !== null ) {\n\n\t\t\ttargetRay.visible = ( inputPose !== null );\n\n\t\t}\n\n\t\tif ( grip !== null ) {\n\n\t\t\tgrip.visible = ( gripPose !== null );\n\n\t\t}\n\n\t\tif ( hand !== null ) {\n\n\t\t\thand.visible = ( handPose !== null );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass WebXRManager extends EventDispatcher {\n\n\tconstructor( renderer, gl ) {\n\n\t\tsuper();\n\n\t\tconst scope = this;\n\t\tconst state = renderer.state;\n\n\t\tlet session = null;\n\t\tlet framebufferScaleFactor = 1.0;\n\n\t\tlet referenceSpace = null;\n\t\tlet referenceSpaceType = 'local-floor';\n\n\t\tlet pose = null;\n\t\tlet glBinding = null;\n\t\tlet glFramebuffer = null;\n\t\tlet glProjLayer = null;\n\t\tlet glBaseLayer = null;\n\t\tlet isMultisample = false;\n\t\tlet glMultisampledFramebuffer = null;\n\t\tlet glColorRenderbuffer = null;\n\t\tlet glDepthRenderbuffer = null;\n\t\tlet xrFrame = null;\n\t\tlet depthStyle = null;\n\t\tlet clearStyle = null;\n\t\tconst msaartcSupported = renderer.extensions.has( 'EXT_multisampled_render_to_texture' );\n\t\tlet msaaExt = null;\n\n\t\tconst controllers = [];\n\t\tconst inputSourcesMap = new Map();\n\n\t\t//\n\n\t\tconst cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable( 1 );\n\t\tcameraL.viewport = new Vector4();\n\n\t\tconst cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable( 2 );\n\t\tcameraR.viewport = new Vector4();\n\n\t\tconst cameras = [ cameraL, cameraR ];\n\n\t\tconst cameraVR = new ArrayCamera();\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\tlet _currentDepthNear = null;\n\t\tlet _currentDepthFar = null;\n\n\t\t//\n\n\t\tthis.cameraAutoUpdate = true;\n\t\tthis.enabled = false;\n\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getTargetRaySpace();\n\n\t\t};\n\n\t\tthis.getControllerGrip = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getGripSpace();\n\n\t\t};\n\n\t\tthis.getHand = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getHandSpace();\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tconst controller = inputSourcesMap.get( event.inputSource );\n\n\t\t\tif ( controller ) {\n\n\t\t\t\tcontroller.dispatchEvent( { type: event.type, data: event.inputSource } );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\tinputSourcesMap.forEach( function ( controller, inputSource ) {\n\n\t\t\t\tcontroller.disconnect( inputSource );\n\n\t\t\t} );\n\n\t\t\tinputSourcesMap.clear();\n\n\t\t\t_currentDepthNear = null;\n\t\t\t_currentDepthFar = null;\n\n\t\t\t// restore framebuffer/rendering state\n\n\t\t\tstate.bindXRFramebuffer( null );\n\t\t\trenderer.setRenderTarget( renderer.getRenderTarget() );\n\n\t\t\tif ( glFramebuffer ) gl.deleteFramebuffer( glFramebuffer );\n\t\t\tif ( glMultisampledFramebuffer ) gl.deleteFramebuffer( glMultisampledFramebuffer );\n\t\t\tif ( glColorRenderbuffer ) gl.deleteRenderbuffer( glColorRenderbuffer );\n\t\t\tif ( glDepthRenderbuffer ) gl.deleteRenderbuffer( glDepthRenderbuffer );\n\t\t\tglFramebuffer = null;\n\t\t\tglMultisampledFramebuffer = null;\n\t\t\tglColorRenderbuffer = null;\n\t\t\tglDepthRenderbuffer = null;\n\t\t\tglBaseLayer = null;\n\t\t\tglProjLayer = null;\n\t\t\tglBinding = null;\n\t\t\tsession = null;\n\n\t\t\t//\n\n\t\t\tanimation.stop();\n\n\t\t\tscope.isPresenting = false;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\n\t\t\treturn referenceSpace;\n\n\t\t};\n\n\t\tthis.getBaseLayer = function () {\n\n\t\t\treturn glProjLayer !== null ? glProjLayer : glBaseLayer;\n\n\t\t};\n\n\t\tthis.getBinding = function () {\n\n\t\t\treturn glBinding;\n\n\t\t};\n\n\t\tthis.getFrame = function () {\n\n\t\t\treturn xrFrame;\n\n\t\t};\n\n\t\tthis.getSession = function () {\n\n\t\t\treturn session;\n\n\t\t};\n\n\t\tthis.setSession = async function ( value ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\t\t\t\tsession.addEventListener( 'inputsourceschange', onInputSourcesChange );\n\n\t\t\t\tconst attributes = gl.getContextAttributes();\n\n\t\t\t\tif ( attributes.xrCompatible !== true ) {\n\n\t\t\t\t\tawait gl.makeXRCompatible();\n\n\t\t\t\t}\n\n\t\t\t\tif ( session.renderState.layers === undefined ) {\n\n\t\t\t\t\tconst layerInit = {\n\t\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBaseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\t\t\tsession.updateRenderState( { baseLayer: glBaseLayer } );\n\n\t\t\t\t} else if ( gl instanceof WebGLRenderingContext ) {\n\n\t\t\t\t\t// Use old style webgl layer because we can't use MSAA\n\t\t\t\t\t// WebGL2 support.\n\n\t\t\t\t\tconst layerInit = {\n\t\t\t\t\t\tantialias: true,\n\t\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBaseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\t\t\tsession.updateRenderState( { layers: [ glBaseLayer ] } );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tisMultisample = attributes.antialias;\n\t\t\t\t\tlet depthFormat = null;\n\n\n\t\t\t\t\tif ( attributes.depth ) {\n\n\t\t\t\t\t\tclearStyle = 256;\n\n\t\t\t\t\t\tif ( attributes.stencil ) clearStyle |= 1024;\n\n\t\t\t\t\t\tdepthStyle = attributes.stencil ? 33306 : 36096;\n\t\t\t\t\t\tdepthFormat = attributes.stencil ? 35056 : 33190;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst projectionlayerInit = {\n\t\t\t\t\t\tcolorFormat: attributes.alpha ? 32856 : 32849,\n\t\t\t\t\t\tdepthFormat: depthFormat,\n\t\t\t\t\t\tscaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBinding = new XRWebGLBinding( session, gl );\n\n\t\t\t\t\tglProjLayer = glBinding.createProjectionLayer( projectionlayerInit );\n\n\t\t\t\t\tglFramebuffer = gl.createFramebuffer();\n\n\t\t\t\t\tsession.updateRenderState( { layers: [ glProjLayer ] } );\n\n\t\t\t\t\tif ( isMultisample && msaartcSupported ) {\n\n\t\t\t\t\t\tmsaaExt = renderer.extensions.get( 'EXT_multisampled_render_to_texture' );\n\n\t\t\t\t\t} else if ( isMultisample ) {\n\n\t\t\t\t\t\tglMultisampledFramebuffer = gl.createFramebuffer();\n\t\t\t\t\t\tglColorRenderbuffer = gl.createRenderbuffer();\n\t\t\t\t\t\tgl.bindRenderbuffer( 36161, glColorRenderbuffer );\n\t\t\t\t\t\tgl.renderbufferStorageMultisample(\n\t\t\t\t\t\t\t36161,\n\t\t\t\t\t\t\t4,\n\t\t\t\t\t\t\t32856,\n\t\t\t\t\t\t\tglProjLayer.textureWidth,\n\t\t\t\t\t\t\tglProjLayer.textureHeight );\n\t\t\t\t\t\tstate.bindFramebuffer( 36160, glMultisampledFramebuffer );\n\t\t\t\t\t\tgl.framebufferRenderbuffer( 36160, 36064, 36161, glColorRenderbuffer );\n\t\t\t\t\t\tgl.bindRenderbuffer( 36161, null );\n\n\t\t\t\t\t\tif ( depthFormat !== null ) {\n\n\t\t\t\t\t\t\tglDepthRenderbuffer = gl.createRenderbuffer();\n\t\t\t\t\t\t\tgl.bindRenderbuffer( 36161, glDepthRenderbuffer );\n\t\t\t\t\t\t\tgl.renderbufferStorageMultisample( 36161, 4, depthFormat, glProjLayer.textureWidth, glProjLayer.textureHeight );\n\t\t\t\t\t\t\tgl.framebufferRenderbuffer( 36160, depthStyle, 36161, glDepthRenderbuffer );\n\t\t\t\t\t\t\tgl.bindRenderbuffer( 36161, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.bindFramebuffer( 36160, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treferenceSpace = await session.requestReferenceSpace( referenceSpaceType );\n\n\t\t\t\tanimation.setContext( session );\n\t\t\t\tanimation.start();\n\n\t\t\t\tscope.isPresenting = true;\n\n\t\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction onInputSourcesChange( event ) {\n\n\t\t\tconst inputSources = session.inputSources;\n\n\t\t\t// Assign inputSources to available controllers\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tinputSourcesMap.set( inputSources[ i ], controllers[ i ] );\n\n\t\t\t}\n\n\t\t\t// Notify disconnected\n\n\t\t\tfor ( let i = 0; i < event.removed.length; i ++ ) {\n\n\t\t\t\tconst inputSource = event.removed[ i ];\n\t\t\t\tconst controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tcontroller.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\t\tinputSourcesMap.delete( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Notify connected\n\n\t\t\tfor ( let i = 0; i < event.added.length; i ++ ) {\n\n\t\t\t\tconst inputSource = event.added[ i ];\n\t\t\t\tconst controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tcontroller.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst cameraLPos = new Vector3();\n\t\tconst cameraRPos = new Vector3();\n\n\t\t/**\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\t\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\t\tconst ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\t\tconst projL = cameraL.projectionMatrix.elements;\n\t\t\tconst projR = cameraR.projectionMatrix.elements;\n\n\t\t\t// VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\t\t\tconst near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\t\tconst far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\t\tconst topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\t\tconst bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\t\tconst leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\t\tconst rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\t\tconst left = near * leftFov;\n\t\t\tconst right = near * rightFov;\n\n\t\t\t// Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\t\tconst zOffset = ipd / ( - leftFov + rightFov );\n\t\t\tconst xOffset = zOffset * - leftFov;\n\n\t\t\t// TODO: Better way to apply this offset?\n\t\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.translateX( xOffset );\n\t\t\tcamera.translateZ( zOffset );\n\t\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t\t\t// Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\t\t\tconst near2 = near + zOffset;\n\t\t\tconst far2 = far + zOffset;\n\t\t\tconst left2 = left - xOffset;\n\t\t\tconst right2 = right + ( ipd - xOffset );\n\t\t\tconst top2 = topFov * far / far2 * near2;\n\t\t\tconst bottom2 = bottomFov * far / far2 * near2;\n\n\t\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\n\t\t}\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t\t}\n\n\t\tthis.updateCamera = function ( camera ) {\n\n\t\t\tif ( session === null ) return;\n\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {\n\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\t\tsession.updateRenderState( {\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t} );\n\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\n\t\t\t}\n\n\t\t\tconst parent = camera.parent;\n\t\t\tconst cameras = cameraVR.cameras;\n\n\t\t\tupdateCamera( cameraVR, parent );\n\n\t\t\tfor ( let i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\tcameraVR.matrixWorld.decompose( cameraVR.position, cameraVR.quaternion, cameraVR.scale );\n\n\t\t\t// update user camera and its children\n\n\t\t\tcamera.position.copy( cameraVR.position );\n\t\t\tcamera.quaternion.copy( cameraVR.quaternion );\n\t\t\tcamera.scale.copy( cameraVR.scale );\n\t\t\tcamera.matrix.copy( cameraVR.matrix );\n\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\n\n\t\t\tconst children = camera.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t\t// update projection matrix for proper view frustum culling\n\n\t\t\tif ( cameras.length === 2 ) {\n\n\t\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t\t} else {\n\n\t\t\t\t// assume single camera setup (AR)\n\n\t\t\t\tcameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getCamera = function () {\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\tthis.getFoveation = function () {\n\n\t\t\tif ( glProjLayer !== null ) {\n\n\t\t\t\treturn glProjLayer.fixedFoveation;\n\n\t\t\t}\n\n\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\treturn glBaseLayer.fixedFoveation;\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t};\n\n\t\tthis.setFoveation = function ( foveation ) {\n\n\t\t\t// 0 = no foveation = full resolution\n\t\t\t// 1 = maximum foveation = the edges render at lower resolution\n\n\t\t\tif ( glProjLayer !== null ) {\n\n\t\t\t\tglProjLayer.fixedFoveation = foveation;\n\n\t\t\t}\n\n\t\t\tif ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {\n\n\t\t\t\tglBaseLayer.fixedFoveation = foveation;\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getViewerPose( referenceSpace );\n\t\t\txrFrame = frame;\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tconst views = pose.views;\n\n\t\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\t\tstate.bindXRFramebuffer( glBaseLayer.framebuffer );\n\n\t\t\t\t}\n\n\t\t\t\tlet cameraVRNeedsUpdate = false;\n\n\t\t\t\t// check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\tif ( views.length !== cameraVR.cameras.length ) {\n\n\t\t\t\t\tcameraVR.cameras.length = 0;\n\n\t\t\t\t\tcameraVRNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tconst view = views[ i ];\n\n\t\t\t\t\tlet viewport = null;\n\n\t\t\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\t\t\tviewport = glBaseLayer.getViewport( view );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst glSubImage = glBinding.getViewSubImage( glProjLayer, view );\n\n\t\t\t\t\t\tstate.bindXRFramebuffer( glFramebuffer );\n\n\t\t\t\t\t\tif ( isMultisample && msaartcSupported ) {\n\n\t\t\t\t\t\t\tif ( glSubImage.depthStencilTexture !== undefined ) {\n\n\t\t\t\t\t\t\t\tmsaaExt.framebufferTexture2DMultisampleEXT( 36160, depthStyle, 3553, glSubImage.depthStencilTexture, 0, 4 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmsaaExt.framebufferTexture2DMultisampleEXT( 36160, 36064, 3553, glSubImage.colorTexture, 0, 4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( glSubImage.depthStencilTexture !== undefined ) {\n\n\t\t\t\t\t\t\t\tgl.framebufferTexture2D( 36160, depthStyle, 3553, glSubImage.depthStencilTexture, 0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.framebufferTexture2D( 36160, 36064, 3553, glSubImage.colorTexture, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tviewport = glSubImage.viewport;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst camera = cameras[ i ];\n\n\t\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( cameraVRNeedsUpdate === true ) {\n\n\t\t\t\t\t\tcameraVR.cameras.push( camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( isMultisample && ! msaartcSupported ) {\n\n\t\t\t\t\tstate.bindXRFramebuffer( glMultisampledFramebuffer );\n\n\t\t\t\t\tif ( clearStyle !== null ) gl.clear( clearStyle );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst inputSources = session.inputSources;\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tconst controller = controllers[ i ];\n\t\t\t\tconst inputSource = inputSources[ i ];\n\n\t\t\t\tcontroller.update( inputSource, frame, referenceSpace );\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );\n\n\t\t\tif ( isMultisample && ! msaartcSupported ) {\n\n\t\t\t\tconst width = glProjLayer.textureWidth;\n\t\t\t\tconst height = glProjLayer.textureHeight;\n\n\t\t\t\tstate.bindFramebuffer( 36008, glMultisampledFramebuffer );\n\t\t\t\tstate.bindFramebuffer( 36009, glFramebuffer );\n\t\t\t\t// Invalidate the depth here to avoid flush of the depth data to main memory.\n\t\t\t\tgl.invalidateFramebuffer( 36008, [ depthStyle ] );\n\t\t\t\tgl.invalidateFramebuffer( 36009, [ depthStyle ] );\n\t\t\t\tgl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, 16384, 9728 );\n\t\t\t\t// Invalidate the MSAA buffer because it's not needed anymore.\n\t\t\t\tgl.invalidateFramebuffer( 36008, [ 36064 ] );\n\t\t\t\tstate.bindFramebuffer( 36008, null );\n\t\t\t\tstate.bindFramebuffer( 36009, null );\n\n\t\t\t\tstate.bindFramebuffer( 36160, glMultisampledFramebuffer );\n\n\t\t\t}\n\n\t\t\txrFrame = null;\n\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t}\n\n}\n\nfunction WebGLMaterials( properties ) {\n\n\tfunction refreshFogUniforms( uniforms, fog ) {\n\n\t\tuniforms.fogColor.value.copy( fog.color );\n\n\t\tif ( fog.isFog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {\n\n\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsLambert( uniforms, material );\n\n\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsToon( uniforms, material );\n\n\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\trefreshUniformsPhysical( uniforms, material, transmissionRenderTarget );\n\n\t\t\t} else {\n\n\t\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t\t}\n\n\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsMatcap( uniforms, material );\n\n\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsDepth( uniforms, material );\n\n\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsDistance( uniforms, material );\n\n\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsNormal( uniforms, material );\n\n\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\trefreshUniformsLine( uniforms, material );\n\n\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\trefreshUniformsDash( uniforms, material );\n\n\t\t\t}\n\n\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\trefreshUniformsPoints( uniforms, material, pixelRatio, height );\n\n\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\trefreshUniformsSprites( uniforms, material );\n\n\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\tuniforms.color.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t} else if ( material.isShaderMaterial ) {\n\n\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.color ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t}\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.specularMap ) {\n\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\tconst envMap = properties.get( material ).envMap;\n\n\t\tif ( envMap ) {\n\n\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\tuniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.ior.value = material.ior;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\tconst maxMipLevel = properties.get( envMap ).__maxMipLevel;\n\n\t\t\tif ( maxMipLevel !== undefined ) {\n\n\t\t\t\tuniforms.maxMipLevel.value = maxMipLevel;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. specular map\n\t\t// 3. displacementMap map\n\t\t// 4. normal map\n\t\t// 5. bump map\n\t\t// 6. roughnessMap map\n\t\t// 7. metalnessMap map\n\t\t// 8. alphaMap map\n\t\t// 9. emissiveMap map\n\t\t// 10. clearcoat map\n\t\t// 11. clearcoat normal map\n\t\t// 12. clearcoat roughnessMap map\n\t\t// 13. specular intensity map\n\t\t// 14. specular tint map\n\t\t// 15. transmission map\n\t\t// 16. thickness map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.specularMap ) {\n\n\t\t\tuvScaleMap = material.specularMap;\n\n\t\t} else if ( material.displacementMap ) {\n\n\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t} else if ( material.normalMap ) {\n\n\t\t\tuvScaleMap = material.normalMap;\n\n\t\t} else if ( material.bumpMap ) {\n\n\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t} else if ( material.roughnessMap ) {\n\n\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t} else if ( material.metalnessMap ) {\n\n\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t} else if ( material.emissiveMap ) {\n\n\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t} else if ( material.clearcoatMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatMap;\n\n\t\t} else if ( material.clearcoatNormalMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\n\t\t} else if ( material.clearcoatRoughnessMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\n\t\t} else if ( material.specularIntensityMap ) {\n\n\t\t\tuvScaleMap = material.specularIntensityMap;\n\n\t\t} else if ( material.specularTintMap ) {\n\n\t\t\tuvScaleMap = material.specularTintMap;\n\n\t\t} else if ( material.transmissionMap ) {\n\n\t\t\tuvScaleMap = material.transmissionMap;\n\n\t\t} else if ( material.thicknessMap ) {\n\n\t\t\tuvScaleMap = material.thicknessMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities for uv2\n\t\t// 1. ao map\n\t\t// 2. light map\n\n\t\tlet uv2ScaleMap;\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuv2ScaleMap = material.aoMap;\n\n\t\t} else if ( material.lightMap ) {\n\n\t\t\tuv2ScaleMap = material.lightMap;\n\n\t\t}\n\n\t\tif ( uv2ScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uv2ScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uv2ScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuv2ScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\n\t}\n\n\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints( uniforms, material, pixelRatio, height ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * pixelRatio;\n\t\tuniforms.scale.value = height * 0.5;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. alpha map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.rotation.value = material.rotation;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. alpha map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\tuniforms.specular.value.copy( material.specular );\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\tif ( material.gradientMap ) {\n\n\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\tuniforms.roughness.value = material.roughness;\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t}\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tconst envMap = properties.get( material ).envMap;\n\n\t\tif ( envMap ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {\n\n\t\trefreshUniformsStandard( uniforms, material );\n\n\t\tuniforms.ior.value = material.ior; // also part of uniforms common\n\n\t\tif ( material.sheen > 0 ) {\n\n\t\t\tuniforms.sheenTint.value.copy( material.sheenTint ).multiplyScalar( material.sheen );\n\n\t\t\tuniforms.sheenRoughness.value = material.sheenRoughness;\n\n\t\t}\n\n\t\tif ( material.clearcoat > 0 ) {\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\n\t\t\tif ( material.clearcoatMap ) {\n\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatRoughnessMap ) {\n\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.transmission > 0 ) {\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\t\t\tuniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n\t\t\tuniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );\n\n\t\t\tif ( material.transmissionMap ) {\n\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\n\t\t\t}\n\n\t\t\tuniforms.thickness.value = material.thickness;\n\n\t\t\tif ( material.thicknessMap ) {\n\n\t\t\t\tuniforms.thicknessMap.value = material.thicknessMap;\n\n\t\t\t}\n\n\t\t\tuniforms.attenuationDistance.value = material.attenuationDistance;\n\t\t\tuniforms.attenuationTint.value.copy( material.attenuationTint );\n\n\t\t}\n\n\t\tuniforms.specularIntensity.value = material.specularIntensity;\n\t\tuniforms.specularTint.value.copy( material.specularTint );\n\n\t\tif ( material.specularIntensityMap ) {\n\n\t\t\tuniforms.specularIntensityMap.value = material.specularIntensityMap;\n\n\t\t}\n\n\t\tif ( material.specularTintMap ) {\n\n\t\t\tuniforms.specularTintMap.value = material.specularTintMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\tif ( material.matcap ) {\n\n\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\tuniforms.farDistance.value = material.farDistance;\n\n\t}\n\n\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\trefreshFogUniforms: refreshFogUniforms,\n\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t};\n\n}\n\nfunction createCanvasElement() {\n\n\tconst canvas = createElementNS( 'canvas' );\n\tcanvas.style.display = 'block';\n\treturn canvas;\n\n}\n\nfunction WebGLRenderer( parameters = {} ) {\n\n\tconst _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\n\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\tlet currentRenderList = null;\n\tlet currentRenderState = null;\n\n\t// render() can be called from within a callback triggered by another render.\n\t// We track this so that the nested render call gets its list and state isolated from the parent render call.\n\n\tconst renderListStack = [];\n\tconst renderStateStack = [];\n\n\t// public properties\n\n\tthis.domElement = _canvas;\n\n\t// Debug configuration container\n\tthis.debug = {\n\n\t\t/**\n\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t * @type {boolean}\n\t\t */\n\t\tcheckShaderErrors: true\n\t};\n\n\t// clearing\n\n\tthis.autoClear = true;\n\tthis.autoClearColor = true;\n\tthis.autoClearDepth = true;\n\tthis.autoClearStencil = true;\n\n\t// scene graph\n\n\tthis.sortObjects = true;\n\n\t// user-defined clipping\n\n\tthis.clippingPlanes = [];\n\tthis.localClippingEnabled = false;\n\n\t// physically based shading\n\n\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\tthis.outputEncoding = LinearEncoding;\n\n\t// physical lights\n\n\tthis.physicallyCorrectLights = false;\n\n\t// tone mapping\n\n\tthis.toneMapping = NoToneMapping;\n\tthis.toneMappingExposure = 1.0;\n\n\t// internal properties\n\n\tconst _this = this;\n\n\tlet _isContextLost = false;\n\n\t// internal state cache\n\n\tlet _currentActiveCubeFace = 0;\n\tlet _currentActiveMipmapLevel = 0;\n\tlet _currentRenderTarget = null;\n\tlet _currentMaterialId = - 1;\n\n\tlet _currentCamera = null;\n\n\tconst _currentViewport = new Vector4();\n\tconst _currentScissor = new Vector4();\n\tlet _currentScissorTest = null;\n\n\t//\n\n\tlet _width = _canvas.width;\n\tlet _height = _canvas.height;\n\n\tlet _pixelRatio = 1;\n\tlet _opaqueSort = null;\n\tlet _transparentSort = null;\n\n\tconst _viewport = new Vector4( 0, 0, _width, _height );\n\tconst _scissor = new Vector4( 0, 0, _width, _height );\n\tlet _scissorTest = false;\n\n\t//\n\n\tconst _currentDrawBuffers = [];\n\n\t// frustum\n\n\tconst _frustum = new Frustum();\n\n\t// clipping\n\n\tlet _clippingEnabled = false;\n\tlet _localClippingEnabled = false;\n\n\t// transmission\n\n\tlet _transmissionRenderTarget = null;\n\n\t// camera matrices cache\n\n\tconst _projScreenMatrix = new Matrix4();\n\n\tconst _vector3 = new Vector3();\n\n\tconst _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };\n\n\tfunction getTargetPixelRatio() {\n\n\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t}\n\n\t// initialize\n\n\tlet _gl = _context;\n\n\tfunction getContext( contextNames, contextAttributes ) {\n\n\t\tfor ( let i = 0; i < contextNames.length; i ++ ) {\n\n\t\t\tconst contextName = contextNames[ i ];\n\t\t\tconst context = _canvas.getContext( contextName, contextAttributes );\n\t\t\tif ( context !== null ) return context;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\ttry {\n\n\t\tconst contextAttributes = {\n\t\t\talpha: _alpha,\n\t\t\tdepth: _depth,\n\t\t\tstencil: _stencil,\n\t\t\tantialias: _antialias,\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\tpowerPreference: _powerPreference,\n\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t};\n\n\t\t// event listeners must be registered before WebGL context is created, see #12753\n\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\tif ( _gl === null ) {\n\n\t\t\tconst contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];\n\n\t\t\tif ( _this.isWebGL1Renderer === true ) {\n\n\t\t\t\tcontextNames.shift();\n\n\t\t\t}\n\n\t\t\t_gl = getContext( contextNames, contextAttributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( getContext( contextNames ) ) {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t};\n\n\t\t}\n\n\t} catch ( error ) {\n\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\tthrow error;\n\n\t}\n\n\tlet extensions, capabilities, state, info;\n\tlet properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;\n\tlet programCache, materials, renderLists, renderStates, clipping, shadowMap;\n\n\tlet background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\tlet utils, bindingStates;\n\n\tfunction initGLContext() {\n\n\t\textensions = new WebGLExtensions( _gl );\n\n\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\textensions.init( capabilities );\n\n\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\tstate = new WebGLState( _gl, extensions, capabilities );\n\n\t\t_currentDrawBuffers[ 0 ] = 1029;\n\n\t\tinfo = new WebGLInfo( _gl );\n\t\tproperties = new WebGLProperties();\n\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\tcubemaps = new WebGLCubeMaps( _this );\n\t\tcubeuvmaps = new WebGLCubeUVMaps( _this );\n\t\tattributes = new WebGLAttributes( _gl, capabilities );\n\t\tbindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );\n\t\tgeometries = new WebGLGeometries( _gl, attributes, info, bindingStates );\n\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\tmorphtargets = new WebGLMorphtargets( _gl, capabilities, textures );\n\t\tclipping = new WebGLClipping( properties );\n\t\tprogramCache = new WebGLPrograms( _this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping );\n\t\tmaterials = new WebGLMaterials( properties );\n\t\trenderLists = new WebGLRenderLists( properties );\n\t\trenderStates = new WebGLRenderStates( extensions, capabilities );\n\t\tbackground = new WebGLBackground( _this, cubemaps, state, objects, _premultipliedAlpha );\n\t\tshadowMap = new WebGLShadowMap( _this, objects, capabilities );\n\n\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\tinfo.programs = programCache.programs;\n\n\t\t_this.capabilities = capabilities;\n\t\t_this.extensions = extensions;\n\t\t_this.properties = properties;\n\t\t_this.renderLists = renderLists;\n\t\t_this.shadowMap = shadowMap;\n\t\t_this.state = state;\n\t\t_this.info = info;\n\n\t}\n\n\tinitGLContext();\n\n\t// xr\n\n\tconst xr = new WebXRManager( _this, _gl );\n\n\tthis.xr = xr;\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _gl;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _gl.getContextAttributes();\n\n\t};\n\n\tthis.forceContextLoss = function () {\n\n\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.loseContext();\n\n\t};\n\n\tthis.forceContextRestore = function () {\n\n\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.restoreContext();\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value === undefined ) return;\n\n\t\t_pixelRatio = value;\n\n\t\tthis.setSize( _width, _height, false );\n\n\t};\n\n\tthis.getSize = function ( target ) {\n\n\t\treturn target.set( _width, _height );\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\tif ( xr.isPresenting ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_canvas.width = Math.floor( width * _pixelRatio );\n\t\t_canvas.height = Math.floor( height * _pixelRatio );\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t};\n\n\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_pixelRatio = pixelRatio;\n\n\t\t_canvas.width = Math.floor( width * pixelRatio );\n\t\t_canvas.height = Math.floor( height * pixelRatio );\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getCurrentViewport = function ( target ) {\n\n\t\treturn target.copy( _currentViewport );\n\n\t};\n\n\tthis.getViewport = function ( target ) {\n\n\t\treturn target.copy( _viewport );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t} else {\n\n\t\t\t_viewport.set( x, y, width, height );\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t};\n\n\tthis.getScissor = function ( target ) {\n\n\t\treturn target.copy( _scissor );\n\n\t};\n\n\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t} else {\n\n\t\t\t_scissor.set( x, y, width, height );\n\n\t\t}\n\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t};\n\n\tthis.getScissorTest = function () {\n\n\t\treturn _scissorTest;\n\n\t};\n\n\tthis.setScissorTest = function ( boolean ) {\n\n\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t};\n\n\tthis.setOpaqueSort = function ( method ) {\n\n\t\t_opaqueSort = method;\n\n\t};\n\n\tthis.setTransparentSort = function ( method ) {\n\n\t\t_transparentSort = method;\n\n\t};\n\n\t// Clearing\n\n\tthis.getClearColor = function ( target ) {\n\n\t\treturn target.copy( background.getClearColor() );\n\n\t};\n\n\tthis.setClearColor = function () {\n\n\t\tbackground.setClearColor.apply( background, arguments );\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn background.getClearAlpha();\n\n\t};\n\n\tthis.setClearAlpha = function () {\n\n\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t};\n\n\tthis.clear = function ( color, depth, stencil ) {\n\n\t\tlet bits = 0;\n\n\t\tif ( color === undefined || color ) bits |= 16384;\n\t\tif ( depth === undefined || depth ) bits |= 256;\n\t\tif ( stencil === undefined || stencil ) bits |= 1024;\n\n\t\t_gl.clear( bits );\n\n\t};\n\n\tthis.clearColor = function () {\n\n\t\tthis.clear( true, false, false );\n\n\t};\n\n\tthis.clearDepth = function () {\n\n\t\tthis.clear( false, true, false );\n\n\t};\n\n\tthis.clearStencil = function () {\n\n\t\tthis.clear( false, false, true );\n\n\t};\n\n\t//\n\n\tthis.dispose = function () {\n\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\trenderLists.dispose();\n\t\trenderStates.dispose();\n\t\tproperties.dispose();\n\t\tcubemaps.dispose();\n\t\tcubeuvmaps.dispose();\n\t\tobjects.dispose();\n\t\tbindingStates.dispose();\n\n\t\txr.dispose();\n\n\t\txr.removeEventListener( 'sessionstart', onXRSessionStart );\n\t\txr.removeEventListener( 'sessionend', onXRSessionEnd );\n\n\t\tif ( _transmissionRenderTarget ) {\n\n\t\t\t_transmissionRenderTarget.dispose();\n\t\t\t_transmissionRenderTarget = null;\n\n\t\t}\n\n\t\tanimation.stop();\n\n\t};\n\n\t// Events\n\n\tfunction onContextLost( event ) {\n\n\t\tevent.preventDefault();\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t_isContextLost = true;\n\n\t}\n\n\tfunction onContextRestore( /* event */ ) {\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t_isContextLost = false;\n\n\t\tconst infoAutoReset = info.autoReset;\n\t\tconst shadowMapEnabled = shadowMap.enabled;\n\t\tconst shadowMapAutoUpdate = shadowMap.autoUpdate;\n\t\tconst shadowMapNeedsUpdate = shadowMap.needsUpdate;\n\t\tconst shadowMapType = shadowMap.type;\n\n\t\tinitGLContext();\n\n\t\tinfo.autoReset = infoAutoReset;\n\t\tshadowMap.enabled = shadowMapEnabled;\n\t\tshadowMap.autoUpdate = shadowMapAutoUpdate;\n\t\tshadowMap.needsUpdate = shadowMapNeedsUpdate;\n\t\tshadowMap.type = shadowMapType;\n\n\t}\n\n\tfunction onMaterialDispose( event ) {\n\n\t\tconst material = event.target;\n\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\tdeallocateMaterial( material );\n\n\t}\n\n\t// Buffer deallocation\n\n\tfunction deallocateMaterial( material ) {\n\n\t\treleaseMaterialProgramReferences( material );\n\n\t\tproperties.remove( material );\n\n\t}\n\n\n\tfunction releaseMaterialProgramReferences( material ) {\n\n\t\tconst programs = properties.get( material ).programs;\n\n\t\tif ( programs !== undefined ) {\n\n\t\t\tprograms.forEach( function ( program ) {\n\n\t\t\t\tprogramCache.releaseProgram( program );\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t// Buffer rendering\n\n\tfunction renderObjectImmediate( object, program ) {\n\n\t\tobject.render( function ( object ) {\n\n\t\t\t_this.renderBufferImmediate( object, program );\n\n\t\t} );\n\n\t}\n\n\tthis.renderBufferImmediate = function ( object, program ) {\n\n\t\tbindingStates.initAttributes();\n\n\t\tconst buffers = properties.get( object );\n\n\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tif ( object.hasPositions ) {\n\n\t\t\t_gl.bindBuffer( 34962, buffers.position );\n\t\t\t_gl.bufferData( 34962, object.positionArray, 35048 );\n\n\t\t\tbindingStates.enableAttribute( programAttributes.position.location );\n\t\t\t_gl.vertexAttribPointer( programAttributes.position.location, 3, 5126, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasNormals ) {\n\n\t\t\t_gl.bindBuffer( 34962, buffers.normal );\n\t\t\t_gl.bufferData( 34962, object.normalArray, 35048 );\n\n\t\t\tbindingStates.enableAttribute( programAttributes.normal.location );\n\t\t\t_gl.vertexAttribPointer( programAttributes.normal.location, 3, 5126, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasUvs ) {\n\n\t\t\t_gl.bindBuffer( 34962, buffers.uv );\n\t\t\t_gl.bufferData( 34962, object.uvArray, 35048 );\n\n\t\t\tbindingStates.enableAttribute( programAttributes.uv.location );\n\t\t\t_gl.vertexAttribPointer( programAttributes.uv.location, 2, 5126, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasColors ) {\n\n\t\t\t_gl.bindBuffer( 34962, buffers.color );\n\t\t\t_gl.bufferData( 34962, object.colorArray, 35048 );\n\n\t\t\tbindingStates.enableAttribute( programAttributes.color.location );\n\t\t\t_gl.vertexAttribPointer( programAttributes.color.location, 3, 5126, false, 0, 0 );\n\n\t\t}\n\n\t\tbindingStates.disableUnusedAttributes();\n\n\t\t_gl.drawArrays( 4, 0, object.count );\n\n\t\tobject.count = 0;\n\n\t};\n\n\tthis.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\n\n\t\tif ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\tconst frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\tconst program = setProgram( camera, scene, material, object );\n\n\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t//\n\n\t\tlet index = geometry.index;\n\t\tconst position = geometry.attributes.position;\n\n\t\t//\n\n\t\tif ( index === null ) {\n\n\t\t\tif ( position === undefined || position.count === 0 ) return;\n\n\t\t} else if ( index.count === 0 ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t//\n\n\t\tlet rangeFactor = 1;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\trangeFactor = 2;\n\n\t\t}\n\n\t\tif ( geometry.morphAttributes.position !== undefined || geometry.morphAttributes.normal !== undefined ) {\n\n\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t}\n\n\t\tbindingStates.setup( object, material, program, geometry, index );\n\n\t\tlet attribute;\n\t\tlet renderer = bufferRenderer;\n\n\t\tif ( index !== null ) {\n\n\t\t\tattribute = attributes.get( index );\n\n\t\t\trenderer = indexedBufferRenderer;\n\t\t\trenderer.setIndex( attribute );\n\n\t\t}\n\n\t\t//\n\n\t\tconst dataCount = ( index !== null ) ? index.count : position.count;\n\n\t\tconst rangeStart = geometry.drawRange.start * rangeFactor;\n\t\tconst rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\tconst groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\tconst groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\tconst drawStart = Math.max( rangeStart, groupStart );\n\t\tconst drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\tconst drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\tif ( drawCount === 0 ) return;\n\n\t\t//\n\n\t\tif ( object.isMesh ) {\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t}\n\n\t\t} else if ( object.isLine ) {\n\n\t\t\tlet lineWidth = material.linewidth;\n\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\trenderer.setMode( 2 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( 3 );\n\n\t\t\t}\n\n\t\t} else if ( object.isPoints ) {\n\n\t\t\trenderer.setMode( 0 );\n\n\t\t} else if ( object.isSprite ) {\n\n\t\t\trenderer.setMode( 4 );\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh ) {\n\n\t\t\trenderer.renderInstances( drawStart, drawCount, object.count );\n\n\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\tconst instanceCount = Math.min( geometry.instanceCount, geometry._maxInstanceCount );\n\n\t\t\trenderer.renderInstances( drawStart, drawCount, instanceCount );\n\n\t\t} else {\n\n\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t}\n\n\t};\n\n\t// Compile\n\n\tthis.compile = function ( scene, camera ) {\n\n\t\tcurrentRenderState = renderStates.get( scene );\n\t\tcurrentRenderState.init();\n\n\t\trenderStateStack.push( currentRenderState );\n\n\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\tif ( object.isLight && object.layers.test( camera.layers ) ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\tcurrentRenderState.setupLights( _this.physicallyCorrectLights );\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tconst material = object.material;\n\n\t\t\tif ( material ) {\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0; i < material.length; i ++ ) {\n\n\t\t\t\t\t\tconst material2 = material[ i ];\n\n\t\t\t\t\t\tgetProgram( material2, scene, object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgetProgram( material, scene, object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\trenderStateStack.pop();\n\t\tcurrentRenderState = null;\n\n\t};\n\n\t// Animation Loop\n\n\tlet onAnimationFrameCallback = null;\n\n\tfunction onAnimationFrame( time ) {\n\n\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\n\n\t}\n\n\tfunction onXRSessionStart() {\n\n\t\tanimation.stop();\n\n\t}\n\n\tfunction onXRSessionEnd() {\n\n\t\tanimation.start();\n\n\t}\n\n\tconst animation = new WebGLAnimation();\n\tanimation.setAnimationLoop( onAnimationFrame );\n\n\tif ( typeof window !== 'undefined' ) animation.setContext( window );\n\n\tthis.setAnimationLoop = function ( callback ) {\n\n\t\tonAnimationFrameCallback = callback;\n\t\txr.setAnimationLoop( callback );\n\n\t\t( callback === null ) ? animation.stop() : animation.start();\n\n\t};\n\n\txr.addEventListener( 'sessionstart', onXRSessionStart );\n\txr.addEventListener( 'sessionend', onXRSessionEnd );\n\n\t// Rendering\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( _isContextLost === true ) return;\n\n\t\t// update scene graph\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t// update camera matrices and frustum\n\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\tif ( xr.enabled === true && xr.isPresenting === true ) {\n\n\t\t\tif ( xr.cameraAutoUpdate === true ) xr.updateCamera( camera );\n\n\t\t\tcamera = xr.getCamera(); // use XR camera for rendering\n\n\t\t}\n\n\t\t//\n\t\tif ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, _currentRenderTarget );\n\n\t\tcurrentRenderState = renderStates.get( scene, renderStateStack.length );\n\t\tcurrentRenderState.init();\n\n\t\trenderStateStack.push( currentRenderState );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\tcurrentRenderList = renderLists.get( scene, renderListStack.length );\n\t\tcurrentRenderList.init();\n\n\t\trenderListStack.push( currentRenderList );\n\n\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\tcurrentRenderList.finish();\n\n\t\tif ( _this.sortObjects === true ) {\n\n\t\t\tcurrentRenderList.sort( _opaqueSort, _transparentSort );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _clippingEnabled === true ) clipping.beginShadows();\n\n\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\tif ( _clippingEnabled === true ) clipping.endShadows();\n\n\t\t//\n\n\t\tif ( this.info.autoReset === true ) this.info.reset();\n\n\t\t//\n\n\t\tbackground.render( currentRenderList, scene );\n\n\t\t// render scene\n\n\t\tcurrentRenderState.setupLights( _this.physicallyCorrectLights );\n\n\t\tif ( camera.isArrayCamera ) {\n\n\t\t\tconst cameras = camera.cameras;\n\n\t\t\tfor ( let i = 0, l = cameras.length; i < l; i ++ ) {\n\n\t\t\t\tconst camera2 = cameras[ i ];\n\n\t\t\t\trenderScene( currentRenderList, scene, camera2, camera2.viewport );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderScene( currentRenderList, scene, camera );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );\n\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\tstate.buffers.depth.setTest( true );\n\t\tstate.buffers.depth.setMask( true );\n\t\tstate.buffers.color.setMask( true );\n\n\t\tstate.setPolygonOffset( false );\n\n\t\t// _gl.finish();\n\n\t\tbindingStates.resetDefaultState();\n\t\t_currentMaterialId = - 1;\n\t\t_currentCamera = null;\n\n\t\trenderStateStack.pop();\n\n\t\tif ( renderStateStack.length > 0 ) {\n\n\t\t\tcurrentRenderState = renderStateStack[ renderStateStack.length - 1 ];\n\n\t\t} else {\n\n\t\t\tcurrentRenderState = null;\n\n\t\t}\n\n\t\trenderListStack.pop();\n\n\t\tif ( renderListStack.length > 0 ) {\n\n\t\t\tcurrentRenderList = renderListStack[ renderListStack.length - 1 ];\n\n\t\t} else {\n\n\t\t\tcurrentRenderList = null;\n\n\t\t}\n\n\t};\n\n\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tconst visible = object.layers.test( camera.layers );\n\n\t\tif ( visible ) {\n\n\t\t\tif ( object.isGroup ) {\n\n\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\tif ( object.autoUpdate === true ) object.update( camera );\n\n\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );\n\n\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t// update skeleton only once in a frame\n\n\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\n\n\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\n\n\t\t}\n\n\t}\n\n\tfunction renderScene( currentRenderList, scene, camera, viewport ) {\n\n\t\tconst opaqueObjects = currentRenderList.opaque;\n\t\tconst transmissiveObjects = currentRenderList.transmissive;\n\t\tconst transparentObjects = currentRenderList.transparent;\n\n\t\tcurrentRenderState.setupLightsView( camera );\n\n\t\tif ( transmissiveObjects.length > 0 ) renderTransmissionPass( opaqueObjects, scene, camera );\n\n\t\tif ( viewport ) state.viewport( _currentViewport.copy( viewport ) );\n\n\t\tif ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );\n\t\tif ( transmissiveObjects.length > 0 ) renderObjects( transmissiveObjects, scene, camera );\n\t\tif ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );\n\n\t}\n\n\tfunction renderTransmissionPass( opaqueObjects, scene, camera ) {\n\n\t\tif ( _transmissionRenderTarget === null ) {\n\n\t\t\tconst needsAntialias = _antialias === true && capabilities.isWebGL2 === true;\n\t\t\tconst renderTargetType = needsAntialias ? WebGLMultisampleRenderTarget : WebGLRenderTarget;\n\n\t\t\t_transmissionRenderTarget = new renderTargetType( 1024, 1024, {\n\t\t\t\tgenerateMipmaps: true,\n\t\t\t\ttype: utils.convert( HalfFloatType ) !== null ? HalfFloatType : UnsignedByteType,\n\t\t\t\tminFilter: LinearMipmapLinearFilter,\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\twrapS: ClampToEdgeWrapping,\n\t\t\t\twrapT: ClampToEdgeWrapping\n\t\t\t} );\n\n\t\t}\n\n\t\tconst currentRenderTarget = _this.getRenderTarget();\n\t\t_this.setRenderTarget( _transmissionRenderTarget );\n\t\t_this.clear();\n\n\t\t// Turn off the features which can affect the frag color for opaque objects pass.\n\t\t// Otherwise they are applied twice in opaque objects pass and transmission objects pass.\n\t\tconst currentToneMapping = _this.toneMapping;\n\t\t_this.toneMapping = NoToneMapping;\n\n\t\trenderObjects( opaqueObjects, scene, camera );\n\n\t\t_this.toneMapping = currentToneMapping;\n\n\t\ttextures.updateMultisampleRenderTarget( _transmissionRenderTarget );\n\t\ttextures.updateRenderTargetMipmap( _transmissionRenderTarget );\n\n\t\t_this.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\tfunction renderObjects( renderList, scene, camera ) {\n\n\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\tfor ( let i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\tconst renderItem = renderList[ i ];\n\n\t\t\tconst object = renderItem.object;\n\t\t\tconst geometry = renderItem.geometry;\n\t\t\tconst material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\tconst group = renderItem.group;\n\n\t\t\tif ( object.layers.test( camera.layers ) ) {\n\n\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\n\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\tmaterial.onBeforeRender( _this, scene, camera, geometry, object, group );\n\n\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\tconst program = setProgram( camera, scene, material, object );\n\n\t\t\tstate.setMaterial( material );\n\n\t\t\tbindingStates.reset();\n\n\t\t\trenderObjectImmediate( object, program );\n\n\t\t} else {\n\n\t\t\tif ( material.transparent === true && material.side === DoubleSide ) {\n\n\t\t\t\tmaterial.side = BackSide;\n\t\t\t\tmaterial.needsUpdate = true;\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\t\tmaterial.side = FrontSide;\n\t\t\t\tmaterial.needsUpdate = true;\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\t\tmaterial.side = DoubleSide;\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t}\n\n\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\n\t}\n\n\tfunction getProgram( material, scene, object ) {\n\n\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tconst lights = currentRenderState.state.lights;\n\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tconst lightsStateVersion = lights.state.version;\n\n\t\tconst parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );\n\t\tconst programCacheKey = programCache.getProgramCacheKey( parameters );\n\n\t\tlet programs = materialProperties.programs;\n\n\t\t// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\n\n\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\tmaterialProperties.fog = scene.fog;\n\t\tmaterialProperties.envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || materialProperties.environment );\n\n\t\tif ( programs === undefined ) {\n\n\t\t\t// new material\n\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tprograms = new Map();\n\t\t\tmaterialProperties.programs = programs;\n\n\t\t}\n\n\t\tlet program = programs.get( programCacheKey );\n\n\t\tif ( program !== undefined ) {\n\n\t\t\t// early out if program and light state is identical\n\n\t\t\tif ( materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion ) {\n\n\t\t\t\tupdateCommonMaterialProperties( material, parameters );\n\n\t\t\t\treturn program;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tparameters.uniforms = programCache.getUniforms( material );\n\n\t\t\tmaterial.onBuild( parameters, _this );\n\n\t\t\tmaterial.onBeforeCompile( parameters, _this );\n\n\t\t\tprogram = programCache.acquireProgram( parameters, programCacheKey );\n\t\t\tprograms.set( programCacheKey, program );\n\n\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\n\t\t}\n\n\t\tconst uniforms = materialProperties.uniforms;\n\n\t\tif ( ( ! material.isShaderMaterial && ! material.isRawShaderMaterial ) || material.clipping === true ) {\n\n\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\n\t\t}\n\n\t\tupdateCommonMaterialProperties( material, parameters );\n\n\t\t// store the light setup it was created for\n\n\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t}\n\n\t\tconst progUniforms = program.getUniforms();\n\t\tconst uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\tmaterialProperties.currentProgram = program;\n\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\treturn program;\n\n\t}\n\n\tfunction updateCommonMaterialProperties( material, parameters ) {\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\tmaterialProperties.instancing = parameters.instancing;\n\t\tmaterialProperties.skinning = parameters.skinning;\n\t\tmaterialProperties.morphTargets = parameters.morphTargets;\n\t\tmaterialProperties.morphNormals = parameters.morphNormals;\n\t\tmaterialProperties.morphTargetsCount = parameters.morphTargetsCount;\n\t\tmaterialProperties.numClippingPlanes = parameters.numClippingPlanes;\n\t\tmaterialProperties.numIntersection = parameters.numClipIntersection;\n\t\tmaterialProperties.vertexAlphas = parameters.vertexAlphas;\n\t\tmaterialProperties.vertexTangents = parameters.vertexTangents;\n\n\t}\n\n\tfunction setProgram( camera, scene, material, object ) {\n\n\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\ttextures.resetTextureUnits();\n\n\t\tconst fog = scene.fog;\n\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\tconst encoding = ( _currentRenderTarget === null ) ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\n\t\tconst vertexAlphas = material.vertexColors === true && !! object.geometry && !! object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4;\n\t\tconst vertexTangents = !! material.normalMap && !! object.geometry && !! object.geometry.attributes.tangent;\n\t\tconst morphTargets = !! object.geometry && !! object.geometry.morphAttributes.position;\n\t\tconst morphNormals = !! object.geometry && !! object.geometry.morphAttributes.normal;\n\t\tconst morphTargetsCount = ( !! object.geometry && !! object.geometry.morphAttributes.position ) ? object.geometry.morphAttributes.position.length : 0;\n\n\t\tconst materialProperties = properties.get( material );\n\t\tconst lights = currentRenderState.state.lights;\n\n\t\tif ( _clippingEnabled === true ) {\n\n\t\t\tif ( _localClippingEnabled === true || camera !== _currentCamera ) {\n\n\t\t\t\tconst useCache =\n\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t// (#8465, #8379)\n\t\t\t\tclipping.setState( material, camera, useCache );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tlet needsProgramChange = false;\n\n\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\tif ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.outputEncoding !== encoding ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( object.isInstancedMesh && materialProperties.instancing === false ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( ! object.isInstancedMesh && materialProperties.instancing === true ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( object.isSkinnedMesh && materialProperties.skinning === false ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( ! object.isSkinnedMesh && materialProperties.skinning === true ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.envMap !== envMap ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t( materialProperties.numClippingPlanes !== clipping.numPlanes ||\n\t\t\t\tmaterialProperties.numIntersection !== clipping.numIntersection ) ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.vertexAlphas !== vertexAlphas ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.vertexTangents !== vertexTangents ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.morphTargets !== morphTargets ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.morphNormals !== morphNormals ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tneedsProgramChange = true;\n\t\t\tmaterialProperties.__version = material.version;\n\n\t\t}\n\n\t\t//\n\n\t\tlet program = materialProperties.currentProgram;\n\n\t\tif ( needsProgramChange === true ) {\n\n\t\t\tprogram = getProgram( material, scene, object );\n\n\t\t}\n\n\t\tlet refreshProgram = false;\n\t\tlet refreshMaterial = false;\n\t\tlet refreshLights = false;\n\n\t\tconst p_uniforms = program.getUniforms(),\n\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\trefreshProgram = true;\n\t\t\trefreshMaterial = true;\n\t\t\trefreshLights = true;\n\n\t\t}\n\n\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t_currentMaterialId = material.id;\n\n\t\t\trefreshMaterial = true;\n\n\t\t}\n\n\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t}\n\n\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t}\n\n\t\t\t// load material specific uniforms\n\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\tconst uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\tmaterial.isShadowMaterial ||\n\t\t\t\tobject.isSkinnedMesh ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// skinning uniforms must be set even if material didn't change\n\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\tconst skeleton = object.skeleton;\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\tif ( skeleton.boneTexture === null ) skeleton.computeBoneTexture();\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t}\n\n\t\tif ( refreshMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t// values\n\t\t\t\t//\n\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t// the GL state when required\n\n\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t}\n\n\t\t\t// refresh uniforms common to several materials\n\n\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\tmaterials.refreshFogUniforms( m_uniforms, fog );\n\n\t\t\t}\n\n\t\t\tmaterials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget );\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\n\t\t}\n\n\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t}\n\n\t\t// common matrices\n\n\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\treturn program;\n\n\t}\n\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\tuniforms.directionalLights.needsUpdate = value;\n\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\tuniforms.pointLights.needsUpdate = value;\n\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\tuniforms.spotLights.needsUpdate = value;\n\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t}\n\n\tfunction materialNeedsLights( material ) {\n\n\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\n\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t}\n\n\tthis.getActiveCubeFace = function () {\n\n\t\treturn _currentActiveCubeFace;\n\n\t};\n\n\tthis.getActiveMipmapLevel = function () {\n\n\t\treturn _currentActiveMipmapLevel;\n\n\t};\n\n\tthis.getRenderTarget = function () {\n\n\t\treturn _currentRenderTarget;\n\n\t};\n\n\tthis.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {\n\n\t\t_currentRenderTarget = renderTarget;\n\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t}\n\n\t\tlet framebuffer = null;\n\t\tlet isCube = false;\n\t\tlet isRenderTarget3D = false;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tconst texture = renderTarget.texture;\n\n\t\t\tif ( texture.isDataTexture3D || texture.isDataTexture2DArray ) {\n\n\t\t\t\tisRenderTarget3D = true;\n\n\t\t\t}\n\n\t\t\tconst __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace ];\n\t\t\t\tisCube = true;\n\n\t\t\t} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t}\n\n\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t} else {\n\n\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t}\n\n\t\tconst framebufferBound = state.bindFramebuffer( 36160, framebuffer );\n\n\t\tif ( framebufferBound && capabilities.drawBuffers ) {\n\n\t\t\tlet needsUpdate = false;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\n\n\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\tif ( _currentDrawBuffers.length !== textures.length || _currentDrawBuffers[ 0 ] !== 36064 ) {\n\n\t\t\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t_currentDrawBuffers[ i ] = 36064 + i;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_currentDrawBuffers.length = textures.length;\n\n\t\t\t\t\t\tneedsUpdate = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( _currentDrawBuffers.length !== 1 || _currentDrawBuffers[ 0 ] !== 36064 ) {\n\n\t\t\t\t\t\t_currentDrawBuffers[ 0 ] = 36064;\n\t\t\t\t\t\t_currentDrawBuffers.length = 1;\n\n\t\t\t\t\t\tneedsUpdate = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( _currentDrawBuffers.length !== 1 || _currentDrawBuffers[ 0 ] !== 1029 ) {\n\n\t\t\t\t\t_currentDrawBuffers[ 0 ] = 1029;\n\t\t\t\t\t_currentDrawBuffers.length = 1;\n\n\t\t\t\t\tneedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\t\t_gl.drawBuffers( _currentDrawBuffers );\n\n\t\t\t\t} else {\n\n\t\t\t\t\textensions.get( 'WEBGL_draw_buffers' ).drawBuffersWEBGL( _currentDrawBuffers );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport );\n\t\tstate.scissor( _currentScissor );\n\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\tif ( isCube ) {\n\n\t\t\tconst textureProperties = properties.get( renderTarget.texture );\n\t\t\t_gl.framebufferTexture2D( 36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );\n\n\t\t} else if ( isRenderTarget3D ) {\n\n\t\t\tconst textureProperties = properties.get( renderTarget.texture );\n\t\t\tconst layer = activeCubeFace || 0;\n\t\t\t_gl.framebufferTextureLayer( 36160, 36064, textureProperties.__webglTexture, activeMipmapLevel || 0, layer );\n\n\t\t}\n\n\t\t_currentMaterialId = - 1; // reset current material to ensure correct uniform bindings\n\n\t};\n\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tlet framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n\n\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t}\n\n\t\tif ( framebuffer ) {\n\n\t\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\t\ttry {\n\n\t\t\t\tconst texture = renderTarget.texture;\n\t\t\t\tconst textureFormat = texture.format;\n\t\t\t\tconst textureType = texture.type;\n\n\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tconst halfFloatSupportedByExt = ( textureType === HalfFloatType ) && ( extensions.has( 'EXT_color_buffer_half_float' ) || ( capabilities.isWebGL2 && extensions.has( 'EXT_color_buffer_float' ) ) );\n\n\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.has( 'OES_texture_float' ) || extensions.has( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t! halfFloatSupportedByExt ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {\n\n\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t}\n\n\t\t\t} finally {\n\n\t\t\t\t// restore framebuffer of current render target if necessary\n\n\t\t\t\tconst framebuffer = ( _currentRenderTarget !== null ) ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;\n\t\t\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.copyFramebufferToTexture = function ( position, texture, level = 0 ) {\n\n\t\tconst levelScale = Math.pow( 2, - level );\n\t\tconst width = Math.floor( texture.image.width * levelScale );\n\t\tconst height = Math.floor( texture.image.height * levelScale );\n\n\t\tlet glFormat = utils.convert( texture.format );\n\n\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1120100\n\t\t\t// Not needed in Chrome 93+\n\n\t\t\tif ( glFormat === 6407 ) glFormat = 32849;\n\t\t\tif ( glFormat === 6408 ) glFormat = 32856;\n\n\t\t}\n\n\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level = 0 ) {\n\n\t\tconst width = srcTexture.image.width;\n\t\tconst height = srcTexture.image.height;\n\t\tconst glFormat = utils.convert( dstTexture.format );\n\t\tconst glType = utils.convert( dstTexture.type );\n\n\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\t// As another texture upload may have changed pixelStorei\n\t\t// parameters, make sure they are correct for the dstTexture\n\t\t_gl.pixelStorei( 37440, dstTexture.flipY );\n\t\t_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );\n\t\t_gl.pixelStorei( 3317, dstTexture.unpackAlignment );\n\n\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t_gl.texSubImage2D( 3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t} else {\n\n\t\t\tif ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\t_gl.compressedTexSubImage2D( 3553, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Generate mipmaps only when copying level 0\n\t\tif ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( 3553 );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.copyTextureToTexture3D = function ( sourceBox, position, srcTexture, dstTexture, level = 0 ) {\n\n\t\tif ( _this.isWebGL1Renderer ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst width = sourceBox.max.x - sourceBox.min.x + 1;\n\t\tconst height = sourceBox.max.y - sourceBox.min.y + 1;\n\t\tconst depth = sourceBox.max.z - sourceBox.min.z + 1;\n\t\tconst glFormat = utils.convert( dstTexture.format );\n\t\tconst glType = utils.convert( dstTexture.type );\n\t\tlet glTarget;\n\n\t\tif ( dstTexture.isDataTexture3D ) {\n\n\t\t\ttextures.setTexture3D( dstTexture, 0 );\n\t\t\tglTarget = 32879;\n\n\t\t} else if ( dstTexture.isDataTexture2DArray ) {\n\n\t\t\ttextures.setTexture2DArray( dstTexture, 0 );\n\t\t\tglTarget = 35866;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\t_gl.pixelStorei( 37440, dstTexture.flipY );\n\t\t_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );\n\t\t_gl.pixelStorei( 3317, dstTexture.unpackAlignment );\n\n\t\tconst unpackRowLen = _gl.getParameter( 3314 );\n\t\tconst unpackImageHeight = _gl.getParameter( 32878 );\n\t\tconst unpackSkipPixels = _gl.getParameter( 3316 );\n\t\tconst unpackSkipRows = _gl.getParameter( 3315 );\n\t\tconst unpackSkipImages = _gl.getParameter( 32877 );\n\n\t\tconst image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ 0 ] : srcTexture.image;\n\n\t\t_gl.pixelStorei( 3314, image.width );\n\t\t_gl.pixelStorei( 32878, image.height );\n\t\t_gl.pixelStorei( 3316, sourceBox.min.x );\n\t\t_gl.pixelStorei( 3315, sourceBox.min.y );\n\t\t_gl.pixelStorei( 32877, sourceBox.min.z );\n\n\t\tif ( srcTexture.isDataTexture || srcTexture.isDataTexture3D ) {\n\n\t\t\t_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data );\n\n\t\t} else {\n\n\t\t\tif ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.' );\n\t\t\t\t_gl.compressedTexSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.pixelStorei( 3314, unpackRowLen );\n\t\t_gl.pixelStorei( 32878, unpackImageHeight );\n\t\t_gl.pixelStorei( 3316, unpackSkipPixels );\n\t\t_gl.pixelStorei( 3315, unpackSkipRows );\n\t\t_gl.pixelStorei( 32877, unpackSkipImages );\n\n\t\t// Generate mipmaps only when copying level 0\n\t\tif ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( glTarget );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.initTexture = function ( texture ) {\n\n\t\ttextures.setTexture2D( texture, 0 );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.resetState = function () {\n\n\t\t_currentActiveCubeFace = 0;\n\t\t_currentActiveMipmapLevel = 0;\n\t\t_currentRenderTarget = null;\n\n\t\tstate.reset();\n\t\tbindingStates.reset();\n\n\t};\n\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t}\n\n}\n\nclass Scene extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.environment = null;\n\t\tthis.fog = null;\n\n\t\tthis.overrideMaterial = null;\n\n\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\tif ( source.environment !== null ) this.environment = source.environment.clone();\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n\t\treturn data;\n\n\t}\n\n}\n\nScene.prototype.isScene = true;\n\nconst Cache = {\n\n\tenabled: false,\n\n\tfiles: {},\n\n\tadd: function ( key, file ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\tget: function ( key ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.files = {};\n\n\t}\n\n};\n\nclass LoadingManager {\n\n\tconstructor( onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tlet isLoading = false;\n\t\tlet itemsLoaded = 0;\n\t\tlet itemsTotal = 0;\n\t\tlet urlModifier = undefined;\n\t\tconst handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tconst index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( let i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tconst regex = handlers[ i ];\n\t\t\t\tconst loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) regex.lastIndex = 0; // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n}\n\nconst DefaultLoadingManager = new LoadingManager();\n\nclass Loader {\n\n\tconstructor( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.withCredentials = false;\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\t\tthis.requestHeader = {};\n\n\t}\n\n\tload( /* url, onLoad, onProgress, onError */ ) {}\n\n\tloadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tscope.load( url, resolve, onProgress, reject );\n\n\t\t} );\n\n\t}\n\n\tparse( /* data */ ) {}\n\n\tsetCrossOrigin( crossOrigin ) {\n\n\t\tthis.crossOrigin = crossOrigin;\n\t\treturn this;\n\n\t}\n\n\tsetWithCredentials( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t}\n\n\tsetPath( path ) {\n\n\t\tthis.path = path;\n\t\treturn this;\n\n\t}\n\n\tsetResourcePath( resourcePath ) {\n\n\t\tthis.resourcePath = resourcePath;\n\t\treturn this;\n\n\t}\n\n\tsetRequestHeader( requestHeader ) {\n\n\t\tthis.requestHeader = requestHeader;\n\t\treturn this;\n\n\t}\n\n}\n\nclass ImageLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst image = createElementNS( 'img' );\n\n\t\tfunction onImageLoad() {\n\n\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\tCache.add( url, this );\n\n\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction onImageError( event ) {\n\n\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\timage.src = url;\n\n\t\treturn image;\n\n\t}\n\n}\n\nclass CubeTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( urls, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new CubeTexture();\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass TextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new Texture();\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass Light extends Object3D {\n\n\tconstructor( color, intensity = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity;\n\n\t}\n\n\tdispose() {\n\n\t\t// Empty here in base class; some subclasses override.\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n\t\treturn data;\n\n\t}\n\n}\n\nLight.prototype.isLight = true;\n\nclass LoaderUtils {\n\n\tstatic decodeText( array ) {\n\n\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\treturn new TextDecoder().decode( array );\n\n\t\t}\n\n\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\tlet s = '';\n\n\t\tfor ( let i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t// Implicitly assumes little-endian.\n\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t}\n\n\t\ttry {\n\n\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t} catch ( e ) { // see #16358\n\n\t\t\treturn s;\n\n\t\t}\n\n\t}\n\n\tstatic extractUrlBase( url ) {\n\n\t\tconst index = url.lastIndexOf( '/' );\n\n\t\tif ( index === - 1 ) return './';\n\n\t\treturn url.substr( 0, index + 1 );\n\n\t}\n\n}\n\n// Characters [].:/ are reserved for track binding syntax.\nconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\n// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n// only latin characters, and the unicode \\p{L} is not yet supported. So\n// instead, we exclude reserved characters and match everything else.\nconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\nconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n// Parent directories, delimited by '/' or ':'. Currently unused, but must\n// be matched to parse the rest of the track name.\nconst _directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\nconst _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n// Object on target node, and accessor. May not contain reserved\n// characters. Accessor may contain any character except closing bracket.\nconst _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n// Property and accessor. May not contain reserved characters. Accessor may\n// contain any non-bracket characters.\nconst _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\n//\n\nLoader.prototype.extractUrlBase = function ( url ) {\n\n\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n\treturn LoaderUtils.extractUrlBase( url );\n\n};\n\nLoader.Handlers = {\n\n\tadd: function ( /* regex, loader */ ) {\n\n\t\tconsole.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );\n\n\t},\n\n\tget: function ( /* file */ ) {\n\n\t\tconsole.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );\n\n\t}\n\n};\n\n//\n\nBox3.prototype.center = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\treturn this.getCenter( optionalTarget );\n\n};\n\nBox3.prototype.empty = function () {\n\n\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\treturn this.isEmpty();\n\n};\n\nBox3.prototype.isIntersectionBox = function ( box ) {\n\n\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\treturn this.intersectsBox( box );\n\n};\n\nBox3.prototype.isIntersectionSphere = function ( sphere ) {\n\n\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\treturn this.intersectsSphere( sphere );\n\n};\n\nBox3.prototype.size = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\treturn this.getSize( optionalTarget );\n\n};\n\n//\n\nSphere.prototype.empty = function () {\n\n\tconsole.warn( 'THREE.Sphere: .empty() has been renamed to .isEmpty().' );\n\treturn this.isEmpty();\n\n};\n\n//\n\nFrustum.prototype.setFromMatrix = function ( m ) {\n\n\tconsole.warn( 'THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().' );\n\treturn this.setFromProjectionMatrix( m );\n\n};\n\n//\n\nMatrix3.prototype.flattenToArrayOffset = function ( array, offset ) {\n\n\tconsole.warn( 'THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.' );\n\treturn this.toArray( array, offset );\n\n};\n\nMatrix3.prototype.multiplyVector3 = function ( vector ) {\n\n\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\treturn vector.applyMatrix3( this );\n\n};\n\nMatrix3.prototype.multiplyVector3Array = function ( /* a */ ) {\n\n\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n};\n\nMatrix3.prototype.applyToBufferAttribute = function ( attribute ) {\n\n\tconsole.warn( 'THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.' );\n\treturn attribute.applyMatrix3( this );\n\n};\n\nMatrix3.prototype.applyToVector3Array = function ( /* array, offset, length */ ) {\n\n\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n};\n\nMatrix3.prototype.getInverse = function ( matrix ) {\n\n\tconsole.warn( 'THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.' );\n\treturn this.copy( matrix ).invert();\n\n};\n\n//\n\nMatrix4.prototype.extractPosition = function ( m ) {\n\n\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\treturn this.copyPosition( m );\n\n};\n\nMatrix4.prototype.flattenToArrayOffset = function ( array, offset ) {\n\n\tconsole.warn( 'THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.' );\n\treturn this.toArray( array, offset );\n\n};\n\nMatrix4.prototype.getPosition = function () {\n\n\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\treturn new Vector3().setFromMatrixColumn( this, 3 );\n\n};\n\nMatrix4.prototype.setRotationFromQuaternion = function ( q ) {\n\n\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\treturn this.makeRotationFromQuaternion( q );\n\n};\n\nMatrix4.prototype.multiplyToArray = function () {\n\n\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n};\n\nMatrix4.prototype.multiplyVector3 = function ( vector ) {\n\n\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\treturn vector.applyMatrix4( this );\n\n};\n\nMatrix4.prototype.multiplyVector4 = function ( vector ) {\n\n\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\treturn vector.applyMatrix4( this );\n\n};\n\nMatrix4.prototype.multiplyVector3Array = function ( /* a */ ) {\n\n\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n};\n\nMatrix4.prototype.rotateAxis = function ( v ) {\n\n\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\tv.transformDirection( this );\n\n};\n\nMatrix4.prototype.crossVector = function ( vector ) {\n\n\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\treturn vector.applyMatrix4( this );\n\n};\n\nMatrix4.prototype.translate = function () {\n\n\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n};\n\nMatrix4.prototype.rotateX = function () {\n\n\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n};\n\nMatrix4.prototype.rotateY = function () {\n\n\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n};\n\nMatrix4.prototype.rotateZ = function () {\n\n\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n};\n\nMatrix4.prototype.rotateByAxis = function () {\n\n\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n};\n\nMatrix4.prototype.applyToBufferAttribute = function ( attribute ) {\n\n\tconsole.warn( 'THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.' );\n\treturn attribute.applyMatrix4( this );\n\n};\n\nMatrix4.prototype.applyToVector3Array = function ( /* array, offset, length */ ) {\n\n\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n};\n\nMatrix4.prototype.makeFrustum = function ( left, right, bottom, top, near, far ) {\n\n\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n};\n\nMatrix4.prototype.getInverse = function ( matrix ) {\n\n\tconsole.warn( 'THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.' );\n\treturn this.copy( matrix ).invert();\n\n};\n\n//\n\nPlane.prototype.isIntersectionLine = function ( line ) {\n\n\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\treturn this.intersectsLine( line );\n\n};\n\n//\n\nQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\treturn vector.applyQuaternion( this );\n\n};\n\nQuaternion.prototype.inverse = function ( ) {\n\n\tconsole.warn( 'THREE.Quaternion: .inverse() has been renamed to invert().' );\n\treturn this.invert();\n\n};\n\n//\n\nRay.prototype.isIntersectionBox = function ( box ) {\n\n\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\treturn this.intersectsBox( box );\n\n};\n\nRay.prototype.isIntersectionPlane = function ( plane ) {\n\n\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\treturn this.intersectsPlane( plane );\n\n};\n\nRay.prototype.isIntersectionSphere = function ( sphere ) {\n\n\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\treturn this.intersectsSphere( sphere );\n\n};\n\n//\n\nTriangle.prototype.area = function () {\n\n\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\n\treturn this.getArea();\n\n};\n\nTriangle.prototype.barycoordFromPoint = function ( point, target ) {\n\n\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\treturn this.getBarycoord( point, target );\n\n};\n\nTriangle.prototype.midpoint = function ( target ) {\n\n\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\n\treturn this.getMidpoint( target );\n\n};\n\nTriangle.prototypenormal = function ( target ) {\n\n\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\treturn this.getNormal( target );\n\n};\n\nTriangle.prototype.plane = function ( target ) {\n\n\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\n\treturn this.getPlane( target );\n\n};\n\nTriangle.barycoordFromPoint = function ( point, a, b, c, target ) {\n\n\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\treturn Triangle.getBarycoord( point, a, b, c, target );\n\n};\n\nTriangle.normal = function ( a, b, c, target ) {\n\n\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\treturn Triangle.getNormal( a, b, c, target );\n\n};\n\n//\n\nVector2.prototype.fromAttribute = function ( attribute, index, offset ) {\n\n\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\treturn this.fromBufferAttribute( attribute, index, offset );\n\n};\n\nVector2.prototype.distanceToManhattan = function ( v ) {\n\n\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\treturn this.manhattanDistanceTo( v );\n\n};\n\nVector2.prototype.lengthManhattan = function () {\n\n\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\treturn this.manhattanLength();\n\n};\n\n//\n\nVector3.prototype.setEulerFromRotationMatrix = function () {\n\n\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n};\n\nVector3.prototype.setEulerFromQuaternion = function () {\n\n\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n};\n\nVector3.prototype.getPositionFromMatrix = function ( m ) {\n\n\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\treturn this.setFromMatrixPosition( m );\n\n};\n\nVector3.prototype.getScaleFromMatrix = function ( m ) {\n\n\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\treturn this.setFromMatrixScale( m );\n\n};\n\nVector3.prototype.getColumnFromMatrix = function ( index, matrix ) {\n\n\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\treturn this.setFromMatrixColumn( matrix, index );\n\n};\n\nVector3.prototype.applyProjection = function ( m ) {\n\n\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\treturn this.applyMatrix4( m );\n\n};\n\nVector3.prototype.fromAttribute = function ( attribute, index, offset ) {\n\n\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\treturn this.fromBufferAttribute( attribute, index, offset );\n\n};\n\nVector3.prototype.distanceToManhattan = function ( v ) {\n\n\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\treturn this.manhattanDistanceTo( v );\n\n};\n\nVector3.prototype.lengthManhattan = function () {\n\n\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\treturn this.manhattanLength();\n\n};\n\n//\n\nVector4.prototype.fromAttribute = function ( attribute, index, offset ) {\n\n\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\treturn this.fromBufferAttribute( attribute, index, offset );\n\n};\n\nVector4.prototype.lengthManhattan = function () {\n\n\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\treturn this.manhattanLength();\n\n};\n\n//\n\nObject3D.prototype.getChildByName = function ( name ) {\n\n\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\treturn this.getObjectByName( name );\n\n};\n\nObject3D.prototype.renderDepth = function () {\n\n\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n};\n\nObject3D.prototype.translate = function ( distance, axis ) {\n\n\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\treturn this.translateOnAxis( axis, distance );\n\n};\n\nObject3D.prototype.getWorldRotation = function () {\n\n\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\n\n};\n\nObject3D.prototype.applyMatrix = function ( matrix ) {\n\n\tconsole.warn( 'THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().' );\n\treturn this.applyMatrix4( matrix );\n\n};\n\nObject.defineProperties( Object3D.prototype, {\n\n\teulerOrder: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\treturn this.rotation.order;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\tthis.rotation.order = value;\n\n\t\t}\n\t},\n\tuseQuaternion: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t}\n\t}\n\n} );\n\nMesh.prototype.setDrawMode = function () {\n\n\tconsole.error( 'THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n};\n\nObject.defineProperties( Mesh.prototype, {\n\n\tdrawMode: {\n\t\tget: function () {\n\n\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.' );\n\t\t\treturn TrianglesDrawMode;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n\t\t}\n\t}\n\n} );\n\n//\n\nPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\tconsole.warn( 'THREE.PerspectiveCamera.setLens is deprecated. ' +\n\t\t\t'Use .setFocalLength and .filmGauge for a photographic setup.' );\n\n\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\tthis.setFocalLength( focalLength );\n\n};\n\n//\n\nObject.defineProperties( Light.prototype, {\n\tonlyShadow: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t}\n\t},\n\tshadowCameraFov: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\tthis.shadow.camera.fov = value;\n\n\t\t}\n\t},\n\tshadowCameraLeft: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\tthis.shadow.camera.left = value;\n\n\t\t}\n\t},\n\tshadowCameraRight: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\tthis.shadow.camera.right = value;\n\n\t\t}\n\t},\n\tshadowCameraTop: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\tthis.shadow.camera.top = value;\n\n\t\t}\n\t},\n\tshadowCameraBottom: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t}\n\t},\n\tshadowCameraNear: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\tthis.shadow.camera.near = value;\n\n\t\t}\n\t},\n\tshadowCameraFar: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\tthis.shadow.camera.far = value;\n\n\t\t}\n\t},\n\tshadowCameraVisible: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t}\n\t},\n\tshadowBias: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\tthis.shadow.bias = value;\n\n\t\t}\n\t},\n\tshadowDarkness: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t}\n\t},\n\tshadowMapWidth: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t}\n\t},\n\tshadowMapHeight: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t}\n\t}\n} );\n\n//\n\nObject.defineProperties( BufferAttribute.prototype, {\n\n\tlength: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\treturn this.array.length;\n\n\t\t}\n\t},\n\tdynamic: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t},\n\t\tset: function ( /* value */ ) {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\tthis.setUsage( DynamicDrawUsage );\n\n\t\t}\n\t}\n\n} );\n\nBufferAttribute.prototype.setDynamic = function ( value ) {\n\n\tconsole.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\treturn this;\n\n};\n\nBufferAttribute.prototype.copyIndicesArray = function ( /* indices */ ) {\n\n\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\n\n},\n\nBufferAttribute.prototype.setArray = function ( /* array */ ) {\n\n\tconsole.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n};\n\n//\n\nBufferGeometry.prototype.addIndex = function ( index ) {\n\n\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\tthis.setIndex( index );\n\n};\n\nBufferGeometry.prototype.addAttribute = function ( name, attribute ) {\n\n\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );\n\n\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\treturn this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t}\n\n\tif ( name === 'index' ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\tthis.setIndex( attribute );\n\n\t\treturn this;\n\n\t}\n\n\treturn this.setAttribute( name, attribute );\n\n};\n\nBufferGeometry.prototype.addDrawCall = function ( start, count, indexOffset ) {\n\n\tif ( indexOffset !== undefined ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t}\n\n\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\tthis.addGroup( start, count );\n\n};\n\nBufferGeometry.prototype.clearDrawCalls = function () {\n\n\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\tthis.clearGroups();\n\n};\n\nBufferGeometry.prototype.computeOffsets = function () {\n\n\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n};\n\nBufferGeometry.prototype.removeAttribute = function ( name ) {\n\n\tconsole.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );\n\n\treturn this.deleteAttribute( name );\n\n};\n\nBufferGeometry.prototype.applyMatrix = function ( matrix ) {\n\n\tconsole.warn( 'THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\treturn this.applyMatrix4( matrix );\n\n};\n\nObject.defineProperties( BufferGeometry.prototype, {\n\n\tdrawcalls: {\n\t\tget: function () {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\n\t\t}\n\t},\n\toffsets: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nScene.prototype.dispose = function () {\n\n\tconsole.error( 'THREE.Scene: .dispose() has been removed.' );\n\n};\n\n//\n\nObject.defineProperties( Material.prototype, {\n\n\twrapAround: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t}\n\t},\n\n\toverdraw: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t}\n\t},\n\n\twrapRGB: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\treturn new Color();\n\n\t\t}\n\t},\n\n\tshading: {\n\t\tget: function () {\n\n\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t}\n\t},\n\n\tstencilMask: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\treturn this.stencilFuncMask;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\tthis.stencilFuncMask = value;\n\n\t\t}\n\t},\n\n\tvertexTangents: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .vertexTangents has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .vertexTangents has been removed.' );\n\n\t\t}\n\t},\n\n} );\n\nObject.defineProperties( ShaderMaterial.prototype, {\n\n\tderivatives: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\treturn this.extensions.derivatives;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\tthis.extensions.derivatives = value;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nWebGLRenderer.prototype.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );\n\tthis.setRenderTarget( renderTarget );\n\tthis.clear( color, depth, stencil );\n\n};\n\nWebGLRenderer.prototype.animate = function ( callback ) {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\n\tthis.setAnimationLoop( callback );\n\n};\n\nWebGLRenderer.prototype.getCurrentRenderTarget = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\treturn this.getRenderTarget();\n\n};\n\nWebGLRenderer.prototype.getMaxAnisotropy = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\treturn this.capabilities.getMaxAnisotropy();\n\n};\n\nWebGLRenderer.prototype.getPrecision = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\treturn this.capabilities.precision;\n\n};\n\nWebGLRenderer.prototype.resetGLState = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\treturn this.state.reset();\n\n};\n\nWebGLRenderer.prototype.supportsFloatTextures = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\treturn this.extensions.get( 'OES_texture_float' );\n\n};\n\nWebGLRenderer.prototype.supportsHalfFloatTextures = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\treturn this.extensions.get( 'OES_texture_half_float' );\n\n};\n\nWebGLRenderer.prototype.supportsStandardDerivatives = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n};\n\nWebGLRenderer.prototype.supportsCompressedTextureS3TC = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n};\n\nWebGLRenderer.prototype.supportsCompressedTexturePVRTC = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n};\n\nWebGLRenderer.prototype.supportsBlendMinMax = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n};\n\nWebGLRenderer.prototype.supportsVertexTextures = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\treturn this.capabilities.vertexTextures;\n\n};\n\nWebGLRenderer.prototype.supportsInstancedArrays = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n};\n\nWebGLRenderer.prototype.enableScissorTest = function ( boolean ) {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\tthis.setScissorTest( boolean );\n\n};\n\nWebGLRenderer.prototype.initMaterial = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.addPrePlugin = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.addPostPlugin = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.updateShadowMap = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.setFaceCulling = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.allocTextureUnit = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.setTexture = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.setTexture2D = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.setTextureCube = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.getActiveMipMapLevel = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );\n\treturn this.getActiveMipmapLevel();\n\n};\n\nObject.defineProperties( WebGLRenderer.prototype, {\n\n\tshadowMapEnabled: {\n\t\tget: function () {\n\n\t\t\treturn this.shadowMap.enabled;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\tthis.shadowMap.enabled = value;\n\n\t\t}\n\t},\n\tshadowMapType: {\n\t\tget: function () {\n\n\t\t\treturn this.shadowMap.type;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\tthis.shadowMap.type = value;\n\n\t\t}\n\t},\n\tshadowMapCullFace: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function ( /* value */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t},\n\tcontext: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );\n\t\t\treturn this.getContext();\n\n\t\t}\n\t},\n\tvr: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .vr has been renamed to .xr' );\n\t\t\treturn this.xr;\n\n\t\t}\n\t},\n\tgammaInput: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\t\t\treturn false;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\n\t\t}\n\t},\n\tgammaOutput: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\treturn false;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\tthis.outputEncoding = ( value === true ) ? sRGBEncoding : LinearEncoding;\n\n\t\t}\n\t},\n\ttoneMappingWhitePoint: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );\n\t\t\treturn 1.0;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );\n\n\t\t}\n\t},\n\n} );\n\nObject.defineProperties( WebGLShadowMap.prototype, {\n\n\tcullFace: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function ( /* cullFace */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t},\n\trenderReverseSided: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t},\n\trenderSingleSided: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t}\n\n} );\n\n//\n\nObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\twrapS: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\treturn this.texture.wrapS;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\tthis.texture.wrapS = value;\n\n\t\t}\n\t},\n\twrapT: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\treturn this.texture.wrapT;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\tthis.texture.wrapT = value;\n\n\t\t}\n\t},\n\tmagFilter: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\treturn this.texture.magFilter;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\tthis.texture.magFilter = value;\n\n\t\t}\n\t},\n\tminFilter: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\treturn this.texture.minFilter;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\tthis.texture.minFilter = value;\n\n\t\t}\n\t},\n\tanisotropy: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\treturn this.texture.anisotropy;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\tthis.texture.anisotropy = value;\n\n\t\t}\n\t},\n\toffset: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\treturn this.texture.offset;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\tthis.texture.offset = value;\n\n\t\t}\n\t},\n\trepeat: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\treturn this.texture.repeat;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\tthis.texture.repeat = value;\n\n\t\t}\n\t},\n\tformat: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\treturn this.texture.format;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\tthis.texture.format = value;\n\n\t\t}\n\t},\n\ttype: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\treturn this.texture.type;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\tthis.texture.type = value;\n\n\t\t}\n\t},\n\tgenerateMipmaps: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\treturn this.texture.generateMipmaps;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\treturn this.update( renderer, scene );\n\n};\n\nCubeCamera.prototype.clear = function ( renderer, color, depth, stencil ) {\n\n\tconsole.warn( 'THREE.CubeCamera: .clear() is now .renderTarget.clear().' );\n\treturn this.renderTarget.clear( renderer, color, depth, stencil );\n\n};\n\nImageUtils.crossOrigin = undefined;\n\nImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\n\n\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\tconst loader = new TextureLoader();\n\tloader.setCrossOrigin( this.crossOrigin );\n\n\tconst texture = loader.load( url, onLoad, undefined, onError );\n\n\tif ( mapping ) texture.mapping = mapping;\n\n\treturn texture;\n\n};\n\nImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\n\n\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\tconst loader = new CubeTextureLoader();\n\tloader.setCrossOrigin( this.crossOrigin );\n\n\tconst texture = loader.load( urls, onLoad, undefined, onError );\n\n\tif ( mapping ) texture.mapping = mapping;\n\n\treturn texture;\n\n};\n\nImageUtils.loadCompressedTexture = function () {\n\n\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n};\n\nImageUtils.loadCompressedTextureCube = function () {\n\n\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n};\n\nif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t/* eslint-disable no-undef */\n\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\trevision: REVISION,\n\t} } ) );\n\t/* eslint-enable no-undef */\n\n}\n\nif ( typeof window !== 'undefined' ) {\n\n\tif ( window.__THREE__ ) {\n\n\t\tconsole.warn( 'WARNING: Multiple instances of Three.js being imported.' );\n\n\t} else {\n\n\t\twindow.__THREE__ = REVISION;\n\n\t}\n\n}\n\nexport { Mesh, MeshBasicMaterial, Object3D, PerspectiveCamera, PlaneGeometry as PlaneBufferGeometry, Scene, TextureLoader, Vector2, Vector3, WebGLRenderer };\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\n\nexport const SceneObject = 'SceneObject';\n\nexport class SceneObjectSystem extends System {\n\n  constructor () {\n    super([SceneObject]);\n  }\n\n  _root = null;\n  /**\n   * @return {import('three').Scene}\n   */\n  get root () { return this._root; }\n  set root (val) {\n    if (!(this._root = val)) return;\n\n    for (const entity of this.buffered) {\n      this.onEntityAdded(entity);\n    }\n    this.buffered = [];\n  }\n\n  buffered = [];\n\n  onEntityAdded (entity) {\n    if (!this.root && entity.parent) {\n      this.buffered.push(entity);\n    } else {\n      const object3d = entity[SceneObject];\n      (entity.parent?.[SceneObject] || this.root).add(object3d);\n      if (entity.pos) Object.assign(object3d.position, entity.pos);\n      entity.pos = object3d.position;\n\n      if (entity.scale) Object.assign(object3d.scale, entity.scale);\n      entity.scale = object3d.scale;\n    }\n  }\n\n  onEntityRemoved (entity, deletedComponents) {\n    // Assuming root is already set\n    this.root.remove(entity[SceneObject] || deletedComponents.get(SceneObject));\n  }\n\n}\n\n\nexport class RootInitSystem extends System {\n\n  constructor () {\n    super(['scene']);\n  }\n\n  onEntityAdded (entity) {\n    /** @type {LDEngine} */\n    const world = this.getEngine();\n\n    for (const system of world._systems) {\n      if (system instanceof SceneObjectSystem) {\n        system.root = entity.scene;\n        world.removeSystem(this);\n        return;\n      }\n    }\n  }\n\n}\n", "import { Mesh, MeshBasicMaterial, PlaneBufferGeometry, TextureLoader } from '../_snowpack/pkg/three.js';\nimport { SceneObject } from '../systems/core/scene-object.js';\n\nexport const createSprite = (url, name = 'sprite') => {\n\n  const map = new TextureLoader().load(url);\n\n  const material = new MeshBasicMaterial({\n    map,\n    transparent: true,\n  });\n\n  const geometry = new PlaneBufferGeometry();\n  const plane = new Mesh( geometry, material );\n  plane.name = name;\n\n  return {\n    [SceneObject]: plane,\n  };\n};\n", "\n\nexport const rand = (from, to) => {\n  if (typeof to === 'undefined') {\n    to = from;\n    from = 0;\n  }\n  return from + Math.random() * (to - from);\n};\n\nexport const rand_int = (from, to) => {\n  const r = Math.round(rand(from, to));\n  return r === 0 ? 0 : r;\n};\n\nexport const rand_bool = () => Math.random() >= 0.5;\n", "import { Vector3 } from '../_snowpack/pkg/three.js';\nimport { createSprite } from '../proto/sprite.js';\nimport { rand } from '../utils/random.js';\n\n/**\n * @param world {LDEngine}\n */\nexport const init_stars = world => {\n  for (let i = 0; i < 200; i++) {\n    const pos = new Vector3()\n      .randomDirection()\n      .setZ(0)\n      .normalize()\n      .multiplyScalar(rand(1, 500))\n      .setZ(rand(-700, -100));\n\n    world.addEntity({\n      ...createSprite('img/blank.png'),\n      pos,\n    });\n  }\n};\n", "\n\nexport const UnitPhases = {\n  Purple: 'blue',\n  Yellow: 'yellow',\n};\n\nexport const UnitPhaseToColor = {\n  [UnitPhases.Purple]: 0xFF0099,\n  [UnitPhases.Yellow]: 0x20FF00,\n}\n\nexport const invert_phase = phase => phase === UnitPhases.Purple ? UnitPhases.Yellow : UnitPhases.Purple;\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\n\n\nexport const DeathMark = 'is_dead';\nexport const DeathTime = 'death_time';\nexport const OnDeathCallback = 'OnDeath';\n\n\n\nexport class DeathSystem extends System {\n\n  constructor () {\n    super(['hp']);\n  }\n\n  justDied = new Set();\n\n  update () {\n    for (const entity of this.entities) {\n      if (entity.hp <= 0 && !entity[DeathMark]) {\n        entity.hp = 0;\n        entity[DeathMark] = true;\n        entity[DeathTime] = this.getEngine().now;\n\n        entity.rooted = true;\n\n        this.justDied.add(entity);\n      }\n    }\n\n    for (const entity of this.justDied) {\n      entity[OnDeathCallback]?.();\n    }\n    this.justDied.clear();\n  }\n\n}\n", "const components_to_predicats = (components) => {\n  return components.map(c => {\n    if (typeof c === 'function') {\n      return c;\n    }\n    return e => c in e;\n  });\n};\n\nexport const not = component => {\n  const [predicate] = components_to_predicats([component]);\n  return entity => {\n    return !predicate(entity);\n  };\n};\n\nexport const or = (...components) => {\n  const predicates = components_to_predicats(components);\n  return entity => predicates.some(p => p(entity));\n};\n\n\nexport const xor = (...components) => {\n  const predicates = components_to_predicats(components);\n  return entity => {\n    let count = 0;\n    for (const predicate of predicates) {\n      count += (predicate(entity));\n    }\n    return count === 1;\n  };\n};\n\nexport const and = (...components) => {\n  const predicates = components_to_predicats(components);\n  return entity => predicates.every(p => p(entity));\n};\n", "import { g as getDefaultExportFromCjs, c as createCommonjsModule, a as commonjsGlobal } from './common/_commonjsHelpers-8c19dec8.js';\n\nvar matter = createCommonjsModule(function (module, exports) {\n/*!\n * matter-js 0.17.1 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tmodule.exports = factory();\n})(commonjsGlobal, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 22);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n    Common._warnedOnce = {};\n    Common._decomp = null;\n    \n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result is in milliseconds and will use high-resolution timing if available.\n     * @method now\n     * @return {number} the current timestamp in milliseconds\n     */\n    Common.now = function() {\n        if (typeof window !== 'undefined' && window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        if (Date.now) {\n            return Date.now();\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Uses `Common.warn` to log the given message one time only.\n     * @method warnOnce\n     * @param ...objs {} The objects to log.\n     */\n    Common.warnOnce = function() {\n        var message = Array.prototype.slice.call(arguments).join(' ');\n\n        if (!Common._warnedOnce[message]) {\n            Common.warn(message);\n            Common._warnedOnce[message] = true;\n        }\n    };\n\n    /**\n     * Shows a deprecated console warning when the function on the given object is called.\n     * The target function will be replaced with a new function that first shows the warning\n     * and then calls the original function.\n     * @method deprecated\n     * @param {object} obj The object or module\n     * @param {string} name The property name of the function on obj\n     * @param {string} warning The one-time message to show if the function is called\n     */\n    Common.deprecated = function(obj, prop, warning) {\n        obj[prop] = Common.chain(function() {\n            Common.warnOnce('🔅 deprecated 🔅', warning);\n        }, obj[prop]);\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n     * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n     * @method setDecomp\n     * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n     */\n    Common.setDecomp = function(decomp) {\n        Common._decomp = decomp;\n    };\n\n    /**\n     * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n     * otherwise returns the global `decomp` if set.\n     * @method getDecomp\n     * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n     */\n    Common.getDecomp = function() {\n        // get user provided decomp if set\n        var decomp = Common._decomp;\n\n        try {\n            // otherwise from window global\n            if (!decomp && typeof window !== 'undefined') {\n                decomp = window.decomp;\n            }\n    \n            // otherwise from node global\n            if (!decomp && typeof commonjsGlobal !== 'undefined') {\n                decomp = commonjsGlobal.decomp;\n            }\n        } catch (e) {\n            // decomp not available\n            decomp = null;\n        }\n\n        return decomp;\n    };\n})();\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n                \n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        var events = object.events;\n        \n        if (events && Common.keys(events).length > 0) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n*\n* They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n* A composite could contain anything from a single body all the way up to a whole world.\n* \n* When making any changes to composites, use the included functions rather than changing their properties directly.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = __webpack_require__(4);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Body = __webpack_require__(6);\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {}\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {object|array} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n            .concat(Composite.allConstraints(composite))\n            .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Render = __webpack_require__(16);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(10);\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                strokeStyle: null,\n                fillStyle: null,\n                lineWidth: null,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                }\n            },\n            events: null,\n            bounds: null,\n            chamfer: null,\n            circleRadius: 0,\n            positionPrev: null,\n            anglePrev: 0,\n            parent: null,\n            axes: null,\n            area: 0,\n            mass: 0,\n            inertia: 0,\n            _original: null\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1'])),\n            defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\n            defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            if (!Object.prototype.hasOwnProperty.call(settings, property))\n                continue;\n\n            value = settings[property];\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            case 'centre':\n                Body.setCentre(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                part._original = null;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Set the centre of mass of the body. \n     * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n     * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n     * This is equal to moving `body.position` but not the `body.vertices`.\n     * Invalid if the `centre` falls outside the body's convex hull.\n     * @method setCentre\n     * @param {body} body\n     * @param {vector} centre\n     * @param {bool} relative\n     */\n    Body.setCentre = function(body, centre, relative) {\n        if (!relative) {\n            body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n            body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n            body.position.x = centre.x;\n            body.position.y = centre.y;\n        } else {\n            body.positionPrev.x += centre.x;\n            body.positionPrev.y += centre.y;\n            body.position.x += centre.x;\n            body.position.y += centre.y;\n        }\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = __webpack_require__(4);\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(10);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n     * @method pointAWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointAWorld = function(constraint) {\n        return {\n            x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + constraint.pointA.x,\n            y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + constraint.pointA.y\n        };\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n     * @method pointBWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointBWorld = function(constraint) {\n        return {\n            x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + constraint.pointB.x,\n            y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + constraint.pointB.y\n        };\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = __webpack_require__(17);\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            confirmedActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n        \n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = __webpack_require__(3);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\nvar Bounds = __webpack_require__(1);\nvar Vector = __webpack_require__(2);\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Utility to create a compound body based on set(s) of vertices.\n     * \n     * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n     * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n     * \n     * The resulting vertices are reorientated about their centre of mass,\n     * and offset such that `body.position` corresponds to this point.\n     * \n     * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n     * To later move the centre of mass see `Body.setCentre`.\n     * \n     * Note that automatic conconcave decomposition results are not always optimal. \n     * For best results, simplify the input vertices as much as possible first.\n     * By default this function applies some addtional simplification to help.\n     * \n     * Some outputs may also require further manual processing afterwards to be robust.\n     * In particular some parts may need to be overlapped to avoid collision gaps.\n     * Thin parts and sharp points should be avoided or removed where possible.\n     *\n     * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n     * \n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n     * @param {object} [options] The body options.\n     * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n     * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n     * @param {number} [minimumArea=10] Threshold when removing small parts.\n     * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n        var decomp = Common.getDecomp(),\n            canDecomp,\n            body,\n            parts,\n            isConvex,\n            isConcave,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        // check decomp is as expected\n        canDecomp = Boolean(decomp && decomp.quickDecomp);\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n        removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01;\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n            isConcave = !isConvex;\n\n            if (isConcave && !canDecomp) {\n                Common.warnOnce(\n                    'Bodies.fromVertices: Install the \\'poly-decomp\\' library and use Common.setDecomp or provide \\'decomp\\' as a global to decompose concave vertices.'\n                );\n            }\n\n            if (isConvex || !canDecomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n                if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints)\n                    decomp.removeDuplicatePoints(concave, removeDuplicatePoints);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n\n            // offset such that body.position is at the centre off mass\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = __webpack_require__(14);\nvar Pair = __webpack_require__(9);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0], \n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n            \n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA, \n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n\n        if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n        \n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n                x: minOverlap.axis.x,\n                y: minOverlap.axis.y\n            };\n        } else {\n            collision.normal = {\n                x: -minOverlap.axis.x,\n                y: -minOverlap.axis.y\n            };\n        }\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = collision.penetration || {};\n        collision.penetration.x = collision.normal.x * collision.depth;\n        collision.penetration.y = collision.normal.y * collision.depth; \n\n        // find support points, there is always either exactly one or two\n        var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n                \n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n        \n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    SAT._overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0], \n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    SAT._projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n    \n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    SAT._findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Greater than ranges e.g. `>1.2.3`\n     * - Greater than or equal ranges e.g. `>=1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var parts = pattern.exec(range);\n        var major = Number(parts[4]);\n        var minor = Number(parts[5]);\n        var patch = Number(parts[6]);\n\n        return {\n            isRange: Boolean(parts[1] || parts[2]),\n            version: parts[3],\n            range: range,\n            operator: parts[1] || parts[2] || '',\n            major: major,\n            minor: minor,\n            patch: patch,\n            parts: [major, minor, patch],\n            prerelease: parts[7],\n            number: major * 1e8 + minor * 1e4 + patch\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var r = Plugin.versionParse(range),\n            v = Plugin.versionParse(version);\n\n        if (r.isRange) {\n            if (r.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (r.operator === '>') {\n                return v.number > r.number;\n            }\n\n            if (r.operator === '>=') {\n                return v.number >= r.number;\n            }\n\n            if (r.operator === '~') {\n                return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n            }\n\n            if (r.operator === '^') {\n                if (r.major > 0) {\n                    return v.major === r.major && v.number >= r.number;\n                }\n\n                if (r.minor > 0) {\n                    return v.minor === r.minor && v.patch >= r.patch;\n                }\n\n                return v.patch === r.patch;\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Render` module is a simple canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = __webpack_require__(0);\nvar Composite = __webpack_require__(5);\nvar Bounds = __webpack_require__(1);\nvar Events = __webpack_require__(4);\nvar Vector = __webpack_require__(2);\nvar Mouse = __webpack_require__(12);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    Render._goodFps = 30;\n    Render._goodDelta = 1000 / 60;\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            timing: {\n                historySize: 60,\n                delta: 0,\n                deltaHistory: [],\n                lastTime: 0,\n                lastTimestamp: 0,\n                lastElapsed: 0,\n                timestampElapsed: 0,\n                timestampElapsedHistory: [],\n                engineDeltaHistory: [],\n                engineElapsedHistory: [],\n                elapsedHistory: []\n            },\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#14151f',\n                wireframeBackground: '#14151f',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showStats: false,\n                showPerformance: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            \n            _updateTiming(render, time);\n\n            Render.world(render, time);\n\n            if (render.options.showStats || render.options.showDebug) {\n                Render.stats(render, render.context, time);\n            }\n\n            if (render.options.showPerformance || render.options.showDebug) {\n                Render.performance(render, render.context, time);\n            }\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.setTransform(\n            render.options.pixelRatio / boundsScaleX, 0, 0, \n            render.options.pixelRatio / boundsScaleY, 0, 0\n        );\n        \n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render, time) {\n        var startTime = Common.now(),\n            engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            timing = render.timing;\n\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n\n            if (render.options.pixelRatio !== 1) {\n                render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n            }\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase)\n            Render.grid(render, engine.grid, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n\n        // log the time elapsed computing this update\n        timing.lastElapsed = Common.now() - startTime;\n    };\n\n    /**\n     * Renders statistics about the engine and world useful for debugging.\n     * @private\n     * @method stats\n     * @param {render} render\n     * @param {RenderingContext} context\n     * @param {Number} time\n     */\n    Render.stats = function(render, context, time) {\n        var engine = render.engine,\n            world = engine.world,\n            bodies = Composite.allBodies(world),\n            parts = 0,\n            width = 55,\n            height = 44,\n            x = 0,\n            y = 0;\n        \n        // count parts\n        for (var i = 0; i < bodies.length; i += 1) {\n            parts += bodies[i].parts.length;\n        }\n\n        // sections\n        var sections = {\n            'Part': parts,\n            'Body': bodies.length,\n            'Cons': Composite.allConstraints(world).length,\n            'Comp': Composite.allComposites(world).length,\n            'Pair': engine.pairs.list.length\n        };\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(x, y, width * 5.5, height);\n\n        context.font = '12px Arial';\n        context.textBaseline = 'top';\n        context.textAlign = 'right';\n\n        // sections\n        for (var key in sections) {\n            var section = sections[key];\n            // label\n            context.fillStyle = '#aaa';\n            context.fillText(key, x + width, y + 8);\n\n            // value\n            context.fillStyle = '#eee';\n            context.fillText(section, x + width, y + 26);\n\n            x += width;\n        }\n    };\n\n    /**\n     * Renders engine and render performance information.\n     * @private\n     * @method performance\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.performance = function(render, context) {\n        var engine = render.engine,\n            timing = render.timing,\n            deltaHistory = timing.deltaHistory,\n            elapsedHistory = timing.elapsedHistory,\n            timestampElapsedHistory = timing.timestampElapsedHistory,\n            engineDeltaHistory = timing.engineDeltaHistory,\n            engineElapsedHistory = timing.engineElapsedHistory,\n            lastEngineDelta = engine.timing.lastDelta;\n        \n        var deltaMean = _mean(deltaHistory),\n            elapsedMean = _mean(elapsedHistory),\n            engineDeltaMean = _mean(engineDeltaHistory),\n            engineElapsedMean = _mean(engineElapsedHistory),\n            timestampElapsedMean = _mean(timestampElapsedHistory),\n            rateMean = (timestampElapsedMean / deltaMean) || 0,\n            fps = (1000 / deltaMean) || 0;\n\n        var graphHeight = 4,\n            gap = 12,\n            width = 60,\n            height = 34,\n            x = 10,\n            y = 69;\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(0, 50, gap * 4 + width * 5 + 22, height);\n\n        // show FPS\n        Render.status(\n            context, x, y, width, graphHeight, deltaHistory.length, \n            Math.round(fps) + ' fps', \n            fps / Render._goodFps,\n            function(i) { return (deltaHistory[i] / deltaMean) - 1; }\n        );\n\n        // show engine delta\n        Render.status(\n            context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length,\n            lastEngineDelta.toFixed(2) + ' dt', \n            Render._goodDelta / lastEngineDelta,\n            function(i) { return (engineDeltaHistory[i] / engineDeltaMean) - 1; }\n        );\n\n        // show engine update time\n        Render.status(\n            context, x + (gap + width) * 2, y, width, graphHeight, engineElapsedHistory.length,\n            engineElapsedMean.toFixed(2) + ' ut', \n            1 - (engineElapsedMean / Render._goodFps),\n            function(i) { return (engineElapsedHistory[i] / engineElapsedMean) - 1; }\n        );\n\n        // show render time\n        Render.status(\n            context, x + (gap + width) * 3, y, width, graphHeight, elapsedHistory.length,\n            elapsedMean.toFixed(2) + ' rt', \n            1 - (elapsedMean / Render._goodFps),\n            function(i) { return (elapsedHistory[i] / elapsedMean) - 1; }\n        );\n\n        // show effective speed\n        Render.status(\n            context, x + (gap + width) * 4, y, width, graphHeight, timestampElapsedHistory.length, \n            rateMean.toFixed(2) + ' x', \n            rateMean * rateMean * rateMean,\n            function(i) { return (((timestampElapsedHistory[i] / deltaHistory[i]) / rateMean) || 0) - 1; }\n        );\n    };\n\n    /**\n     * Renders a label, indicator and a chart.\n     * @private\n     * @method status\n     * @param {RenderingContext} context\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} count\n     * @param {string} label\n     * @param {string} indicator\n     * @param {function} plotY\n     */\n    Render.status = function(context, x, y, width, height, count, label, indicator, plotY) {\n        // background\n        context.strokeStyle = '#888';\n        context.fillStyle = '#444';\n        context.lineWidth = 1;\n        context.fillRect(x, y + 7, width, 1);\n\n        // chart\n        context.beginPath();\n        context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n        for (var i = 0; i < width; i += 1) {\n            context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n        }\n        context.stroke();\n\n        // indicator\n        context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';\n        context.fillRect(x, y - 7, 4, 4);\n\n        // label\n        context.font = '12px Arial';\n        context.textBaseline = 'middle';\n        context.textAlign = 'right';\n        context.fillStyle = '#eee';\n        context.fillText(label, x + width, y - 5);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                            (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            i;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth,\n                0.5 + parseInt(region[2], 10) * grid.bucketHeight,\n                grid.bucketWidth,\n                grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                    Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Updates render timing.\n     * @method _updateTiming\n     * @private\n     * @param {render} render\n     * @param {number} time\n     */\n    var _updateTiming = function(render, time) {\n        var engine = render.engine,\n            timing = render.timing,\n            historySize = timing.historySize,\n            timestamp = engine.timing.timestamp;\n\n        timing.delta = time - timing.lastTime || Render._goodDelta;\n        timing.lastTime = time;\n\n        timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n        timing.lastTimestamp = timestamp;\n\n        timing.deltaHistory.unshift(timing.delta);\n        timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n\n        timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n        timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n\n        timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n        timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n\n        timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n        timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n\n        timing.elapsedHistory.unshift(timing.lastElapsed);\n        timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n    };\n\n    /**\n     * Returns the mean value of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values\n     */\n    var _mean = function(values) {\n        var result = 0;\n        for (var i = 0; i < values.length; i += 1) {\n            result += values[i];\n        }\n        return (result / values.length) || 0;\n    };\n\n    /**\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n    /**\n     * The mouse to render if `render.options.showMousePosition` is enabled.\n     *\n     * @property mouse\n     * @type mouse\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n     *\n     * @property options.pixelRatio\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is disabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.background\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeBackground\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable all debug information overlays together.  \n     * This includes and has priority over the values of:\n     *\n     * - `render.options.showStats`\n     * - `render.options.showPerformance`\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the engine stats info overlay.  \n     * From left to right, the values shown are:\n     *\n     * - body parts total\n     * - body total\n     * - constraints total\n     * - composites total\n     * - collision pairs total\n     *\n     * @property options.showStats\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable performance charts.  \n     * From left to right, the values shown are:\n     *\n     * - average render frequency (e.g. 60 fps)\n     * - exact engine delta time used for last update (e.g. 16.66ms)\n     * - average engine execution duration (e.g. 5.00ms)\n     * - average render execution duration (e.g. 0.40ms)\n     * - average effective play speed (e.g. '1.00x' is 'real-time')\n     *\n     * Each value is recorded over a fixed sample of past frames (60 frames).\n     *\n     * A chart shown below each value indicates the variance from the average over the sample.\n     * The more stable or fixed the value is the flatter the chart will appear.\n     *\n     * @property options.showPerformance\n     * @type boolean\n     * @default false\n     */\n    \n    /**\n     * A flag to enable or disable rendering entirely.\n     *\n     * @property options.enabled\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n     *\n     * @property options.wireframes\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable sleeping bodies indicators.\n     *\n     * @property options.showSleeping\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable the debug information overlay.\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision broadphase debug overlay.\n     *\n     * @property options.showBroadphase\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body bounds debug overlay.\n     *\n     * @property options.showBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body velocity debug overlay.\n     *\n     * @property options.showVelocity\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body collisions debug overlay.\n     *\n     * @property options.showCollisions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision resolver separations debug overlay.\n     *\n     * @property options.showSeparations\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body axes debug overlay.\n     *\n     * @property options.showAxes\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body positions debug overlay.\n     *\n     * @property options.showPositions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body angle debug overlay.\n     *\n     * @property options.showAngleIndicator\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body and part ids debug overlay.\n     *\n     * @property options.showIds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body vertex numbers debug overlay.\n     *\n     * @property options.showVertexNumbers\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body convex hulls debug overlay.\n     *\n     * @property options.showConvexHulls\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body internal edges debug overlay.\n     *\n     * @property options.showInternalEdges\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the mouse position debug overlay.\n     *\n     * @property options.showMousePosition\n     * @type boolean\n     * @default false\n     */\n\n})();\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n    \n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar Sleeping = __webpack_require__(7);\nvar Resolver = __webpack_require__(19);\nvar Detector = __webpack_require__(13);\nvar Pairs = __webpack_require__(20);\nvar Grid = __webpack_require__(21);\nvar Events = __webpack_require__(4);\nvar Composite = __webpack_require__(5);\nvar Constraint = __webpack_require__(8);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(options) {\n        options = options || {};\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            grid: null,\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            timing: {\n                timestamp: 0,\n                timeScale: 1,\n                lastDelta: 0,\n                lastElapsed: 0\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        engine.world = options.world || Composite.create({ label: 'World' });\n        engine.grid = Grid.create(options.grid || options.broadphase);\n        engine.pairs = Pairs.create();\n\n        // temporary back compatibility\n        engine.world.gravity = engine.gravity;\n        engine.broadphase = engine.grid;\n        engine.metrics = {};\n        \n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        var startTime = Common.now();\n\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            grid = engine.grid,\n            gridPairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n        timing.lastDelta = delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, engine.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n\n        // if world is dirty, we must flush the whole grid\n        if (world.isModified)\n            Grid.clear(grid);\n\n        // update the grid buckets based on current bodies\n        Grid.update(grid, allBodies, engine, world.isModified);\n        gridPairs = grid.pairsList;\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = Detector.collisions(gridPairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        // log the time elapsed computing this update\n        engine.timing.lastElapsed = Common.now() - startTime;\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world,\n            bodies = Composite.allBodies(world);\n\n        Pairs.clear(engine.pairs);\n        Grid.clear(engine.grid);\n        Grid.update(engine.grid, bodies, engine, true);\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n     * @deprecated use Matter.Runner.run(engine) instead\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n     * It is updated by timing from the start of the last `Engine.update` call until it ends.\n     *\n     * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n     *\n     * @property timing.lastElapsed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the `delta` value used in the last engine update.\n     *\n     * @property timing.lastDelta\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Matter.Grid` instance.\n     *\n     * @property grid\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * Replaced by and now alias for `engine.grid`.\n     *\n     * @deprecated use `engine.grid`\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n     *\n     * @property world\n     * @type composite\n     * @default a Matter.Composite instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * The gravity to apply on all bodies in `engine.world`.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n})();\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n                Vector.add(bodyA.positionImpulse, \n                    Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n        \n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\n\n(function() {\n    \n    Pairs._pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pairsList[i].confirmedActive = false;\n        }\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n\n                pair = pairsTable[pairId];\n                \n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                    pair.confirmedActive = true;\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && !pair.confirmedActive) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n    \n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n            \n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // temporary back compatibility bounds check\n            if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y))\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Matter = module.exports = __webpack_require__(23);\r\n\r\nMatter.Axes = __webpack_require__(10);\r\nMatter.Bodies = __webpack_require__(11);\r\nMatter.Body = __webpack_require__(6);\r\nMatter.Bounds = __webpack_require__(1);\r\nMatter.Common = __webpack_require__(0);\r\nMatter.Composite = __webpack_require__(5);\r\nMatter.Composites = __webpack_require__(24);\r\nMatter.Constraint = __webpack_require__(8);\r\nMatter.Contact = __webpack_require__(17);\r\nMatter.Detector = __webpack_require__(13);\r\nMatter.Engine = __webpack_require__(18);\r\nMatter.Events = __webpack_require__(4);\r\nMatter.Grid = __webpack_require__(21);\r\nMatter.Mouse = __webpack_require__(12);\r\nMatter.MouseConstraint = __webpack_require__(25);\r\nMatter.Pair = __webpack_require__(9);\r\nMatter.Pairs = __webpack_require__(20);\r\nMatter.Plugin = __webpack_require__(15);\r\nMatter.Query = __webpack_require__(26);\r\nMatter.Render = __webpack_require__(16);\r\nMatter.Resolver = __webpack_require__(19);\r\nMatter.Runner = __webpack_require__(27);\r\nMatter.SAT = __webpack_require__(14);\r\nMatter.Sleeping = __webpack_require__(7);\r\nMatter.Svg = __webpack_require__(28);\r\nMatter.Vector = __webpack_require__(2);\r\nMatter.Vertices = __webpack_require__(3);\r\nMatter.World = __webpack_require__(29);\r\n\r\n// temporary back compatibility\r\nMatter.Engine.run = Matter.Runner.run;\r\nMatter.Common.deprecated(Matter.Engine, 'run', 'Engine.run ➤ use Matter.Runner.run(engine) instead');\r\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/\r\n\r\nvar Matter = {};\r\n\r\nmodule.exports = Matter;\r\n\r\nvar Plugin = __webpack_require__(15);\r\nvar Common = __webpack_require__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * The library name.\r\n     * @property name\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.name = 'matter-js';\r\n\r\n    /**\r\n     * The library version.\r\n     * @property version\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.version =   \"0.17.1\" ;\r\n\r\n    /**\r\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n     * @property uses\r\n     * @type {Array}\r\n     */\r\n    Matter.uses = [];\r\n\r\n    /**\r\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n     * @property used\r\n     * @readOnly\r\n     * @type {Array}\r\n     */\r\n    Matter.used = [];\r\n\r\n    /**\r\n     * Installs the given plugins on the `Matter` namespace.\r\n     * This is a short-hand for `Plugin.use`, see it for more information.\r\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n     */\r\n    Matter.use = function() {\r\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method before\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.before = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathBefore(Matter, path, func);\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method after\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.after = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathAfter(Matter, path, func);\r\n    };\r\n\r\n})();\r\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = __webpack_require__(5);\nvar Constraint = __webpack_require__(8);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\nvar Bodies = __webpack_require__(11);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to newtonsCradle example\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                    { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n\n    deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle ➤ moved to newtonsCradle example');\n    \n    /**\n     * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to car example\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    deprecated(Composites, 'car', 'Composites.car ➤ moved to car example');\n\n    /**\n     * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n     * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n     * @deprecated moved to softBody and cloth examples\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n    deprecated(Composites, 'softBody', 'Composites.softBody ➤ moved to softBody and cloth examples');\n})();\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = __webpack_require__(3);\nvar Sleeping = __webpack_require__(7);\nvar Mouse = __webpack_require__(12);\nvar Events = __webpack_require__(4);\nvar Detector = __webpack_require__(13);\nvar Constraint = __webpack_require__(8);\nvar Composite = __webpack_require__(5);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = __webpack_require__(2);\nvar SAT = __webpack_require__(14);\nvar Bounds = __webpack_require__(1);\nvar Bodies = __webpack_require__(11);\nvar Vertices = __webpack_require__(3);\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {object[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            \n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, body.bounds)) {\n                        var collision = SAT.collides(part, body);\n\n                        if (collision.collided) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = __webpack_require__(4);\nvar Engine = __webpack_require__(18);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        Events.trigger(runner, 'afterTick', event);\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = __webpack_require__(1);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Composite`.\n*\n* All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n* For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n*\n* The property `world.gravity` has been moved to `engine.gravity`.\n*\n* For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n* Eventually this alias module will be marked as deprecated and then later removed in a future release.\n*\n* @class World\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = __webpack_require__(5);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * See above, aliases for back compatibility only\n     */\n    World.create = Composite.create;\n    World.add = Composite.add;\n    World.remove = Composite.remove;\n    World.clear = Composite.clear;\n    World.addComposite = Composite.addComposite;\n    World.addBody = Composite.addBody;\n    World.addConstraint = Composite.addConstraint;\n\n})();\n\n\n/***/ })\n/******/ ]);\n});\n});\n\nvar __pika_web_default_export_for_treeshaking__ = /*@__PURE__*/getDefaultExportFromCjs(matter);\n\nexport default __pika_web_default_export_for_treeshaking__;\n", "import Matter from '../../_snowpack/pkg/matter-js.js';\nimport { System } from '../../_snowpack/pkg/eaciest.js';\nimport { xor } from '../../utils/selectors.js';\n\nconst {\n  Engine,\n  Runner,\n  Render,\n  Events,\n  Bodies,\n  Composite,\n  Body,\n  World,\n} = Matter;\n\nexport const CollisionList = 'collision_list';\nexport const NewCollisionList = 'new_collision_list';\nexport const ExitCollisionList = 'exit_collision_list';\n\n\n/** @returns {Set<Entity>} */\nexport const getCollisionList = (e) => {\n  return e[CollisionList] || (e[CollisionList] = new Set);\n};\n/** @returns {Set<Entity>} */\nexport const getStartCollisionList = (e) => {\n  return e[NewCollisionList] || (e[NewCollisionList] = new Set);\n};\n/** @returns {Set<Entity>} */\nexport const getEndCollisionList = (e) => {\n  return e[ExitCollisionList] || (e[ExitCollisionList] = new Set);\n};\n\nexport const on_collision_start = (a, b) => {\n  getCollisionList(a).add(b);\n  getCollisionList(b).add(a);\n  getStartCollisionList(a).add(b);\n  getStartCollisionList(b).add(a);\n};\n\nexport const on_collision_end = (a, b) => {\n  getCollisionList(a).delete(b);\n  getCollisionList(b).delete(a);\n  getEndCollisionList(a).add(b);\n  getEndCollisionList(b).add(a);\n};\n\n\nexport const BodyLink = 'BodyLink';\nexport const getEntityBody = (obj) => obj[BodyLink];\n\n\nexport class MatterSystem extends System {\n\n  constructor () {\n    super(['pos', 'shape', xor('rigid', 'static')]);\n  }\n\n  initialize () {\n    this.engine = Engine.create({\n      gravity: { x: 0, y: 0 },\n    });\n    this.world = this.engine.world;\n\n\n    Events.on(this.engine, 'collisionStart', this.onCollisionStart);\n    Events.on(this.engine, 'collisionEnd', this.onCollisionEnd);\n\n    super.initialize();\n  }\n\n  update (dt) {\n    const start = Date.now();\n    let _start = start;\n    for (const entity of this.entities) {\n      const body = getEntityBody(entity);\n      Body.setPosition(body, entity.pos);\n    }\n    const first = Date.now() - _start;\n    _start = Date.now();\n\n    Engine.update(this.engine, dt * 1000);\n\n    if (window.debug_matter) {\n      if (!this.renderer) {\n        this.renderer = Render.create({\n          // canvas: window.document.querySelector('canvas'),\n          element: window.document.body,\n          options: {\n            pixelRatio: 2\n          },\n        });\n        this.renderer.engine = this.engine;\n      }\n\n      Render.world(this.renderer);\n    }\n\n    const engine_update = Date.now() - _start;\n    _start = Date.now();\n\n    for (const entity of this.entities) {\n      const body = getEntityBody(entity);\n      Object.assign(entity.pos, body.position);\n    }\n    const pos_assign = Date.now() - _start;\n\n    const diff = Date.now() - start;\n    if (diff > 50) {\n      this.enabled = false;\n      // eslint-disable-next-line max-len\n      console.error(`Self disabled because it took ${diff} ms to update. [first=${first}, engine_update=${engine_update}, pos_assign=${pos_assign}]`);\n    }\n  }\n\n  createBody (entity) {\n    const { pos, shape, bodyOptions = {} } = entity;\n    switch (shape) {\n      case 'circle': {\n        const radius = entity.scale ? Math.max(entity.scale.x, entity.scale.y) / 2 : 0.5;\n        return Bodies.circle(pos.x, pos.y, radius, {\n          isStatic: !!entity.static,\n          ...bodyOptions,\n        });\n      }\n    }\n  }\n\n  onEntityAdded (entity, collectionName) {\n    // Skip if already linked\n    if (getEntityBody(entity)) return;\n\n    const body = this.createBody(entity);\n    if (!body) return console.warn(`Couldn't create a body for shape ${entity.shape}`);\n\n    body[BodyLink] = entity;\n    entity[BodyLink] = body;\n\n    Composite.add(this.world, body);\n  }\n\n  removeEntity (entity, collectionName) {\n    if (this.entities.has(entity)) {\n      const body = getEntityBody(entity);\n      World.remove(this.world, body);\n    }\n    return super.removeEntity(entity, collectionName);\n  }\n\n  onCollisionStart = e => {\n    const { pairs } = e;\n\n    // console.log('collision start; pair count =', pairs.length);\n    for (const { bodyA, bodyB } of pairs) {\n      const a = getEntityBody(bodyA);\n      const b = getEntityBody(bodyB);\n      on_collision_start(a, b);\n    }\n  };\n\n  onCollisionEnd = e => {\n    const { pairs } = e;\n    // console.log('collision end; pair count =', pairs.length);\n    for (const { bodyA, bodyB } of pairs) {\n      const a = getEntityBody(bodyA);\n      const b = getEntityBody(bodyB);\n      on_collision_end(a, b);\n    }\n  };\n\n}\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\nimport { or } from '../../utils/selectors.js';\nimport { getEndCollisionList, getStartCollisionList } from './matter.js';\n\n\nexport const OnCollisionCallback = 'onCollision';\nexport const OnCollisionEndCallback = 'onCollisionEnd';\n\n\nexport class OnCollisionSystem extends System {\n\n  constructor () {\n    super(or(OnCollisionCallback, OnCollisionEndCallback));\n  }\n\n  update () {\n    for (const entity of this.entities) {\n      if (entity[OnCollisionCallback]) {\n        const list = getStartCollisionList(entity);\n        for (const other of list) {\n          entity[OnCollisionCallback](other);\n        }\n      }\n      if (entity[OnCollisionEndCallback]) {\n        const list = getEndCollisionList(entity);\n        for (const other of list) {\n          entity[OnCollisionEndCallback](other);\n        }\n      }\n    }\n  }\n\n}\n\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\nimport { DeathMark } from './death.js';\n\nexport const ReceivedDamage = 'ReceivedDamage';\nexport const OnDamageReceivedCallback = 'OnDamageReceived';\nexport const OnHealReceivedCallback = 'OnHealReceived';\n\n\nexport const add_received_damage = (entity, amount = 0) => {\n  if (typeof entity.hp !== 'number' || entity[DeathMark]) return false;\n\n  (entity[ReceivedDamage] = entity[ReceivedDamage] || []).push(amount);\n  return true;\n};\n\nexport class ReceivedDamageSystem extends System {\n  constructor () {\n    super([ReceivedDamage]);\n  }\n\n  update () {\n    for (const entity of this.getEntities()) {\n      let dmg_taken = 0;\n      if (!entity.invincible) for (const dmg of entity[ReceivedDamage]) {\n        entity.hp -= dmg;\n        dmg_taken += dmg;\n      }\n      entity.dmg_taken = dmg_taken;\n    }\n\n    for (const entity of this.getEntities()) {\n      entity.dmg_taken > 0 && entity[OnDamageReceivedCallback]?.();\n      entity.dmg_taken < 0 && entity[OnHealReceivedCallback]?.();\n\n      delete entity[ReceivedDamage];\n    }\n  }\n}\n", "import { SceneObject } from '../systems/core/scene-object.js';\n\n\nexport const set_color = (entity, color) => {\n  entity[SceneObject].material.color.set(color);\n};\n", "import { ENGINE } from '../_snowpack/pkg/eaciest.js';\n\n/**\n * @interface Entity\n * @extends import('eaciest').IEntity\n */\n\n/**\n * @param e {Entity}\n * @return {LDEngine}\n */\nexport const get_engine = e => {\n  return e?.[ENGINE];\n};\n\n/** @param e {Entity} */\nexport const destroy_entity = e => {\n  get_engine(e)?.removeEntity?.(e);\n};\n\n/** @param e {Entity} */\nexport const refresh_entity = e => {\n  get_engine(e)?.refreshEntity(e);\n};\n", "export const AudioCmd = 'AudioCmd';\n\nexport const createSoundCommand = url => {\n  return {\n    [AudioCmd]: url,\n  }\n};\n", "import { Vector3 } from '../_snowpack/pkg/three.js';\nimport { invert_phase, UnitPhaseToColor } from '../game/unit-phase.js';\nimport { DeathMark } from '../systems/game/death.js';\nimport { OnCollisionCallback } from '../systems/physics/collision-dispatching.js';\nimport { add_received_damage } from '../systems/game/received-damage.js';\nimport { set_color } from '../utils/color.js';\nimport { destroy_entity, get_engine } from '../utils/entity.js';\nimport { createSoundCommand } from './audio.js';\nimport { createSprite } from './sprite.js';\n\nconst BODY_OPTIONS = {\n  isSensor: true,\n};\n\nconst t = new Vector3;\n\nconst clearRoot = entity => entity.rooted = false;\n\nconst ShotCooldown = 200;\n\nexport const cast_bullet = (shooter, target, cooldown = ShotCooldown) => {\n  if (target[DeathMark]) return;\n\n  const last_shot_at = shooter.time_from_last_shoot;\n  if (last_shot_at && ((Date.now() - last_shot_at) < cooldown)) {\n    return;\n  }\n  shooter.time_from_last_shoot = Date.now();\n\n  shooter.rooted = true;\n  setTimeout(clearRoot, 50, shooter);\n  const world = get_engine(shooter);\n  const dir = t.copy(target).sub(shooter.pos).normalize()\n                        .clone();\n  const pos = t.multiplyScalar(0.2).add(shooter.pos)\n                        .clone();\n\n  const phase = invert_phase(invert_phase(shooter.phase));\n  const bullet = createBullet({\n    dir,\n    pos,\n    shooter,\n    phase,\n    [OnCollisionCallback] (other) {\n      if (other === shooter) return;\n\n      const damage = +(other.phase !== this.phase) * 2 - 1;\n\n      const damaged = add_received_damage(other, damage);\n\n      if (damage <= 0) {\n        world.addEntity(createSoundCommand('bulk'));\n      } else {\n        world.addEntity(createSoundCommand('zoom'));\n      }\n\n      destroy_entity(this);\n    }\n  });\n  set_color(bullet, UnitPhaseToColor[phase])\n\n  return world.addEntity(bullet);\n};\n\nexport const createBullet = (\n  props = {},\n  url = 'img/power-shot-gs.png'\n) => {\n\n  return {\n    ...createSprite(url),\n    lifespan: 2,\n    speed: 10,\n    shape: 'circle',\n    rigid: true,\n    bodyOptions: BODY_OPTIONS,\n    scale: { x: 0.5, y: 0.5 },\n    ...props,\n  }\n};\n", "import { OnDamageReceivedCallback, OnHealReceivedCallback } from '../systems/game/received-damage.js';\nimport { set_color } from '../utils/color.js';\nimport { createSprite } from './sprite.js';\n\nexport const PlayerMark = 'Player';\n\nexport const createPlayer = (props = {}) => {\n  return {\n    [PlayerMark]: true,\n\n    speed: 5,\n\n    shape: 'circle',\n\n    rigid: true,\n\n    hp: 4,\n\n    invincible: true,\n\n    [OnDamageReceivedCallback] () {\n      set_color(this, 0xFF0000);\n      setTimeout(set_color, 70, this, 0xFFFFFF);\n    },\n\n    [OnHealReceivedCallback] () {\n      set_color(this, 0x00FF00);\n      setTimeout(set_color, 70, this, 0xFFFFFF);\n    },\n\n    init () {\n      set_color(this, 0x00FF80);\n      setTimeout(() => {\n        this.invincible = false;\n        set_color(this, 0xFFFFFF);\n      }, 1000);\n    },\n\n    hasMagic: true,\n\n    ...createSprite('img/player-caster.png', 'main_sprite'),\n    ...props,\n  };\n};\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\nimport { Vector3 } from '../../_snowpack/pkg/three.js';\nimport { invert_phase, UnitPhaseToColor } from '../../game/unit-phase.js';\nimport { cast_bullet } from '../../proto/bullet.js';\nimport { PlayerMark } from '../../proto/player.js';\nimport { set_color } from '../../utils/color.js';\nimport { rand, rand_int } from '../../utils/random.js';\nimport { SceneObject } from '../core/scene-object.js';\n\n\nexport const CasterAI = 'CasterAI';\n\nconst t = new Vector3();\nconst t1 = new Vector3();\n\nexport class CasterAiSystem extends System {\n\n  constructor () {\n    super([CasterAI]);\n  }\n\n  initialize () {\n    super.initialize();\n\n    this.getEngine().hook([PlayerMark])\n      .on('onEntityAdded', player => this.player = player)\n      .execute();\n  }\n\n  update (dt) {\n    if (!this.player) return;\n\n    for (const entity of this.getEntities()) {\n      const phaseMatch = this.player.phase === entity.phase;\n\n      if (!entity.targetPos) {\n        t1.copy(entity.pos).sub(this.player.pos);\n\n        entity.targetPos = (new Vector3)\n          .randomDirection()\n          .setZ(0)\n          .normalize();\n\n        if (phaseMatch) { // run\n          entity.targetPos\n            .multiplyScalar(rand(4, 5))\n            .add(this.player.pos);\n        } else { // attack\n          entity.targetPos\n            .multiplyScalar(rand(1, 3))\n            .add(this.player.pos)\n            .add(t1.multiplyScalar(rand(0.1, 0.5)));\n        }\n      }\n\n      const bullet = cast_bullet(entity, this.player.pos, entity.cast_cooldown || 0);\n      if (bullet) {\n        entity.cast_cooldown = rand(1000, 5000);\n        bullet.speed = 7;\n\n        const target = phaseMatch ? this.getOtherAI(entity) : this.player;\n\n        if (!target) {\n          continue;\n        }\n\n        if (target.dir) {\n          const d = target.pos.distanceTo(bullet.pos);\n          const sec = d / bullet.speed;\n          t.copy(target.dir)\n            .multiplyScalar(sec * target.speed)\n            .add(target.pos)\n            .sub(bullet.pos)\n            .normalize();\n\n          bullet.dir.copy(t);\n        }\n      }\n    }\n  }\n\n  getOtherAI (caster, retries = 2) {\n    if (this.entities.size === 1) return;\n\n    let idx = rand_int(1, this.entities.size);\n    while (idx) for (const other of this.entities) {\n      if (caster === other || --idx) continue;\n      if (other.phase !== caster.phase) {\n        if (retries) {\n          return this.getOtherAI(caster, --retries);\n        }\n        return;\n      }\n      return other;\n    }\n  }\n\n\n}\n", "import { UnitPhases } from '../game/unit-phase.js';\nimport { OnDeathCallback } from '../systems/game/death.js';\nimport { CasterAI } from '../systems/game/caster-ai.js';\nimport { OnDamageReceivedCallback, OnHealReceivedCallback } from '../systems/game/received-damage.js';\nimport { set_color } from '../utils/color.js';\nimport { destroy_entity } from '../utils/entity.js';\nimport { createSprite } from './sprite.js';\n\n\nexport const createCaster = (props = {}) => {\n\n  return {\n    ...createSprite('img/caster-gs.png'),\n\n    [CasterAI]: true,\n\n    speed: 2,\n    shape: 'circle',\n    rigid: true,\n\n    hp: 4,\n\n    [OnDeathCallback] () {\n      setTimeout(destroy_entity, 0, this);\n    },\n\n    [OnDamageReceivedCallback] () {\n      set_color(this, 0xFF0000);\n      setTimeout(set_color, 70, this, 0xFFFFFF);\n    },\n\n    [OnHealReceivedCallback] () {\n      set_color(this, 0x00FF00);\n      setTimeout(set_color, 70, this, 0xFFFFFF);\n    },\n\n    phase: UnitPhases.Purple,\n\n    hasMagic: true,\n\n    ...props,\n  };\n\n};\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\nimport { Vector2, Vector3 } from '../../_snowpack/pkg/three.js';\n\nexport const MouseLeft = Symbol('MouseLeft');\nexport const MouseMiddle = Symbol('MouseMiddle');\nexport const MouseRight = Symbol('MouseRight');\n\nexport const MOUSE_MAPPING = {\n  0: MouseLeft,\n  1: MouseMiddle,\n  2: MouseRight,\n};\n\nexport const InputComponent = Symbol('InputInfo');\n\nexport class InputSystem extends System {\n\n  priority = Infinity;\n\n  constructor () {\n    super('canvas');\n  }\n\n  store = {\n    keysJustPressed: new Set,\n    keysDown: new Set,\n    keysReleased: new Set,\n    cursor: new Vector3,\n    cursorGlobal: new Vector3,\n  };\n\n  initialize () {\n    super.initialize();\n\n    this.getEngine().add({ [InputComponent]: this.store });\n\n    document.addEventListener('keydown', this.on_key_down);\n    document.addEventListener('keyup', this.on_key_up);\n  }\n\n  update () {\n    this.store.keysReleased.clear();\n    this.store.keysJustPressed.clear();\n  }\n\n  /**\n   * @param canvas {HTMLCanvasElement}\n   */\n  onEntityAdded ({ canvas }) {\n    canvas.addEventListener('contextmenu', this.on_rmb);\n\n    canvas.addEventListener('mousemove', this.on_mouse_move);\n    canvas.addEventListener('mousedown', this.on_mouse_down);\n    canvas.addEventListener('mouseup', this.on_mouse_up);\n  }\n\n  // silence context menu\n  on_rmb = (e) => e.preventDefault();\n\n  /** @param e {KeyboardEvent} */\n  on_key_down = e => this.on_down(e.code);\n  /** @param e {MouseEvent} */\n  on_mouse_down = e => this.on_down(MOUSE_MAPPING[e.button]);\n\n  /** @param e {KeyboardEvent} */\n  on_key_up = e => this.on_up(e.code);\n  /** @param e {MouseEvent} */\n  on_mouse_up = e => this.on_up(MOUSE_MAPPING[e.button]);\n\n  /** @param e {MouseEvent} */\n  on_mouse_move = e => {\n    this.store.cursor.x = e.offsetX;\n    this.store.cursor.y = e.offsetY;\n  };\n\n\n  on_down (key) {\n    if (!this.store.keysDown.has(key)) {\n      this.store.keysJustPressed.add(key);\n    }\n    this.store.keysDown.add(key);\n  }\n  on_up (key) {\n    this.store.keysDown.delete(key);\n    this.store.keysReleased.add(key);\n  }\n}\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\nimport { Vector3 } from '../../_snowpack/pkg/three.js';\nimport { invert_phase } from '../../game/unit-phase.js';\nimport { cast_bullet } from '../../proto/bullet.js';\nimport { InputComponent, MouseLeft, MouseRight } from '../core/input.js';\nimport { DeathMark } from './death.js';\n\nexport const WasdController = 'WasdController';\n\nexport class WasdControllerSystem extends System {\n\n  constructor () {\n    super({\n      pawn: [WasdController],\n      input: [InputComponent],\n    });\n  }\n\n  update () {\n    const pawn = this.getEntity('pawn');\n    const input = this.getInput();\n\n    if (!(pawn && input) || pawn[DeathMark]) return;\n\n    this.ensureDir(pawn);\n    pawn.dir.x = pawn.dir.y = 0;\n\n    if (input.keysDown.has('KeyW')) {\n      pawn.dir.y++;\n    }\n    if (input.keysDown.has('KeyS')) {\n      pawn.dir.y--;\n    }\n    if (input.keysDown.has('KeyD')) {\n      pawn.dir.x++;\n    }\n    if (input.keysDown.has('KeyA')) {\n      pawn.dir.x--;\n    }\n\n    pawn.dir.normalize();\n\n    if (input.keysDown.has(MouseLeft)) {\n      cast_bullet(pawn, input.cursorGlobal);\n    }\n\n    // if (input.keysJustPressed.has(MouseRight) && !pawn.rooted) {\n    //   pawn.phase = invert_phase(pawn.phase);\n    //   pawn.rooted = true;\n    //   setTimeout(() => pawn.rooted = false, 200);\n    // }\n  }\n\n  getInput () {\n    return this.getEntity('input')?.[InputComponent];\n  }\n\n  ensureDir (entity) {\n    entity.dir = entity.dir || new Vector3();\n  }\n}\n", "import { init_stars } from '../game/stars.js';\nimport { createCaster } from '../proto/caster.js';\nimport { createPlayer, PlayerMark } from '../proto/player.js';\nimport { CasterAI } from '../systems/game/caster-ai.js';\nimport { DeathMark } from '../systems/game/death.js';\nimport { WasdController } from '../systems/game/wasd-controller.js';\n\n\n/**\n * @param world {LDEngine}\n */\nexport const createLvl1 = (world) => {\n  init_stars(world);\n\n\n  const player = window.player = world.addEntity(createPlayer({\n    pos: { x: 1, y: -1 },\n    [WasdController]: true,\n  }));\n\n  const casterCount = 3;\n  world.addEntity(createCaster({\n    pos: { x: Math.random() * 10 - 5, y: Math.random() * 10 - 5 },\n  }));\n\n  world.hook([PlayerMark, DeathMark])\n    .on('onEntityAdded', function (entity) {\n      showEndMessage()\n    })\n    .execute();\n\n  let deadCasterCount = 0;\n  world.hook([CasterAI])\n    .on('onEntityRemoved', function () {\n      if (++deadCasterCount >= casterCount) {\n        showEndMessage(true);\n      }\n\n      if (deadCasterCount === 1) {\n        for (let i = 0; i < casterCount - 1; i++) {\n          world.addEntity(createCaster({\n            pos: { x: Math.random() * 20 - 5, y: Math.random() * 20 - 5 },\n          }));\n        }\n      }\n\n    })\n    .execute();\n}\n\n\nfunction showEndMessage (win) {\n  const container = document.createElement('div');\n  container.innerHTML = `\n      <div id=\"bg\">\n        <a href=\"#\" id=\"retry\">Retry</a>\n      </div>\n      `;\n  document.body.append(container);\n  Object.assign(container.style, {\n    position: 'fixed',\n    color: 'cyan',\n    top: 0,\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    'justify-content': 'center',\n    'align-items': 'flex-end',\n  });\n\n  const bg = document.getElementById('bg');\n  Object.assign(bg.style, {\n    width: '400px',\n    height: '300px',\n    display: 'flex',\n    'flex-direction': 'column',\n    'justify-content': 'center',\n    'align-items': 'center',\n    'background-color': '#19191b',\n    'border-radius': '25px',\n    'font-family': 'sans-serif',\n    'font-size': '46px',\n  });\n\n  if (win) {\n    const message = document.createElement('div');\n    message.innerHTML = `\n      <p>Well done!</p>\n    `;\n    bg.prepend(message);\n  }\n  const retry = document.getElementById('retry');\n  retry.onclick = () => window.location.reload();\n}\n", "import { c as createCommonjsModule, a as commonjsGlobal } from './common/_commonjsHelpers-8c19dec8.js';\n\nvar howler = createCommonjsModule(function (module, exports) {\n/*!\n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var ua = self._navigator ? self._navigator.userAgent : '';\n      var checkOpera = ua.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n      var checkSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1;\n      var safariVersion = ua.match(/Version\\/(.*?) /);\n      var isOldSafari = (checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n          document.removeEventListener('keydown', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      document.addEventListener('keydown', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                  } else {\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n          self._state = 'loading';\n\n          var listener = function() {\n            self._state = 'loaded';\n            \n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n\n              // If playing, restart playback to ensure looping updates.\n              if (self.playing(ids[i])) {\n                self.pause(ids[i], true);\n                self.play(ids[i], true);\n              }\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        if (self._sounds.length) {\n          id = self._sounds[0]._id;\n        }\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return 0;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n\n            self._emit('seek', id);\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  };\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for CommonJS libraries such as browserify.\n  {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof commonjsGlobal !== 'undefined') {\n    commonjsGlobal.HowlerGlobal = HowlerGlobal;\n    commonjsGlobal.Howler = Howler;\n    commonjsGlobal.Howl = Howl;\n    commonjsGlobal.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n});\n\nvar Howl$1 = howler.Howl;\nvar Howler$1 = howler.Howler;\nexport { Howl$1 as Howl, Howler$1 as Howler };\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\nimport { Howl, Howler } from '../../_snowpack/pkg/howler.js';\nimport { AudioCmd } from '../../proto/audio.js';\nimport { rand_int } from '../../utils/random.js';\n\n\nexport class AudioSystem extends System {\n\n  constructor () {\n    super([AudioCmd]);\n  }\n\n  initialize () {\n    super.initialize();\n    this.sounds = {};\n\n    this.sounds = {\n      switch: new Howl({\n        src: [`audio/switch.mp3`],\n      }),\n      bulk: new Howl({\n        src: [`audio/bulk.mp3`],\n      }),\n      zoom: new Howl({\n        src: [`audio/zoom.mp3`],\n      }),\n      pop: new Howl({\n        src: [`audio/pops.mp3`],\n        sprite: {\n          p0: [0, 50],\n          p1: [100, 50],\n          p2: [200, 50],\n          p3: [300, 50],\n        }\n      }),\n    };\n  }\n\n  update () {\n    const world = this.getEngine();\n    for (const entity of this.getEntities()) {\n      const sound = this.sounds[entity[AudioCmd]];\n      if (!sound) {\n        console.warn(`Sound not found: ${entity[AudioCmd]}`);\n        continue;\n      }\n\n      const sprites = Object.keys(sound._sprite);\n      if (!sprites.length) {\n        sound.play();\n      } else {\n        const spriteName = sprites[rand_int(0, sprites.length - 1)];\n        sound.play(spriteName);\n      }\n\n      world.removeEntity(entity);\n    }\n  }\n\n}\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\nimport { SceneObject } from '../core/scene-object.js';\n\nexport class DirToFlipSystem extends System {\n\n  constructor () {\n    super(['dir', SceneObject]);\n  }\n\n  onEntityAdded (entity, collectionName) {\n    entity.vis_dir = 1;\n  }\n\n  update () {\n    for (const entity of this.getEntities()) {\n      const { vis_dir } = entity;\n      const next_dir = entity.dir.x < 0 ? -1 : 1;\n      if (next_dir !== vis_dir) {\n        entity.vis_dir = next_dir;\n        entity.scale.x = -entity.scale.x;\n        const attachedCamera = entity[SceneObject].getObjectByProperty('type', 'PerspectiveCamera');\n        if (attachedCamera) {\n          attachedCamera.scale.x = -attachedCamera.scale.x;\n        }\n      }\n    }\n  }\n\n}\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\n\nexport class PerfCollectionSystem extends System {\n\n  interval = 1;\n\n  top_max = 6;\n\n  enabled = false;\n\n  update () {\n    const infos = this.getEngine().perf.collect();\n    for (let i = 0; i < this.top_max; i++) {\n      const { name, avg, sum } = infos[i];\n      window.debug_values[`Sys${i}`] = `${(avg).toFixed(5)} (${(sum).toFixed(3)}) ${name}`;\n    }\n  }\n\n}\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\n\nexport const MaxHP = 'maxHP';\n\nexport class MaxHpSystem extends System {\n  constructor () {\n    super('hp');\n  }\n\n  onEntityAdded (entity, collectionName) {\n    entity[MaxHP] = entity.hp;\n  }\n\n  update () {\n    for (const entity of this.getEntities()) {\n      entity[MaxHP] = Math.max(entity[MaxHP], entity.hp);\n    }\n  }\n}\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\nimport { UnitPhases, UnitPhaseToColor } from '../../game/unit-phase.js';\nimport { createSprite } from '../../proto/sprite.js';\nimport { set_color } from '../../utils/color.js';\n\nexport const MagicMark = 'MagicMark';\n\nexport class MagicSystem extends System {\n\n  constructor () {\n    super(['hasMagic']);\n  }\n\n  onEntityAdded (entity, collectionName) {\n    entity.magic = world.add({\n      ...createSprite('img/magic.png'),\n      parent: entity,\n      [MagicMark]: true,\n    });\n\n    if (!entity.phase) {\n      entity.phase = UnitPhases.Purple;\n    }\n  }\n\n  update () {\n    for (const entity of this.getEntities()) {\n      set_color(entity.magic, UnitPhaseToColor[entity.phase])\n    }\n  }\n\n}\n\n\nexport class PhaseToColorSystem extends System {\n\n\n\n}\n\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\nimport { invert_phase } from '../../game/unit-phase.js';\nimport { createSoundCommand } from '../../proto/audio.js';\nimport { rand } from '../../utils/random.js';\nimport { not } from '../../utils/selectors.js';\nimport { MagicMark } from './magic.js';\n\nexport class PhaseSwitchSystem extends System {\n  constructor () {\n    super(['phase', not(MagicMark)]);\n  }\n  \n  update () {\n    const now = Date.now();\n    for (const entity of this.getEntities()) {\n      if (!entity.next_switch) {\n        entity.next_switch = now + rand(3500, 17000);\n      }\n\n      if (now - entity.next_switch >= 0) {\n        entity.next_switch = now + rand(3500, 17000);\n        entity.phase = invert_phase(entity.phase);\n        // this.getEngine().addEntity(createSoundCommand('switch'));\n        delete entity.targetPos;\n      }\n    }\n  }\n}\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\nimport { createSprite } from '../../proto/sprite.js';\nimport { set_color } from '../../utils/color.js';\nimport { SceneObject } from '../core/scene-object.js';\nimport { MaxHP } from './max-hp.js';\n\nexport class HpRenderSystem extends System {\n\n  constructor () {\n    super(['hp', MaxHP]);\n  }\n\n  onEntityAdded (entity, collectionName) {\n    entity.hp_gui = world.addEntity({\n      ...createSprite('img/blank.png'),\n      parent: entity,\n      pos: { x: -0.5, y: -0.6, z: -0.1 },\n    });\n\n    set_color(entity.hp_gui, 0x00FFFF);\n    entity.hp_gui[SceneObject].geometry.translate(0.5, -0.5, 0);\n    entity.hp_gui[SceneObject].scale.y = 0.1;\n  }\n\n  update () {\n    for (const entity of this.getEntities()) {\n      const { hp_gui } = entity;\n      hp_gui.scale.x = Math.max(0, entity.hp / entity[MaxHP]);\n    }\n  }\n\n}\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\n\nexport class InitializationSystem extends System {\n  constructor () {\n    super(['init']);\n  }\n\n  onEntityAdded (entity, collectionName) {\n    entity.init?.(this.getEngine());\n  }\n}\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\nimport { Vector3 } from '../../_snowpack/pkg/three.js';\n\nconst ensureVector = v => v instanceof Vector3 ? v : Object.assign(new Vector3(), v || {});\n\nexport class TargetPosSystem extends System {\n  constructor () {\n    super(['pos', 'targetPos']);\n  }\n\n  update () {\n    for (const entity of this.getEntities()) {\n\n      if (!entity.targetPos) {\n        continue;\n      }\n\n      if (entity.targetPos.distanceTo(entity.pos) <= 0.1) {\n        delete entity.targetPos;\n        entity.dir = ensureVector(entity.dir).set(0,0,0)\n        continue;\n      }\n\n      entity.dir = ensureVector(entity.dir)\n        .copy(entity.targetPos)\n        .sub(entity.pos)\n        .normalize();\n    }\n  }\n}\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\nimport { BodyLink, getCollisionList, getEndCollisionList, getStartCollisionList } from './matter.js';\n\nexport class CollisionCleanupSystem extends System {\n\n  constructor () {\n    super(BodyLink);\n  }\n\n  update () {\n    for (const entity of this.entities) {\n      getStartCollisionList(entity).clear();\n      const continuous = getCollisionList(entity);\n      const ended = getEndCollisionList(entity);\n      for (const e of ended) {\n        continuous.delete(e);\n      }\n      ended.clear();\n    }\n  }\n\n}\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\nimport { destroy_entity } from '../../utils/entity.js';\nimport { not } from '../../utils/selectors.js';\n\nexport class LifetimeSystem extends System {\n\n  constructor () {\n    super(['lifespan', not('lifespan_exceeded')]);\n  }\n\n  update (dt) {\n    for (const entity of this.entities) {\n      const { lifespan } = entity;\n      entity.lifetime = (entity.lifetime ?? 0) + dt;\n      if (entity.lifetime >= lifespan) {\n        const shouldDestroy = entity.onLifeEnd?.() !== false;\n        if (shouldDestroy) {\n          destroy_entity(entity);\n        }\n        entity.lifespan_exceeded = true;\n      }\n    }\n  }\n}\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\nimport { InputComponent } from './input.js';\nimport { Vector3 } from '../../_snowpack/pkg/three.js';\n\nconst vec = new Vector3;\nconst pos = new Vector3;\n\nexport class InputCursorTranslationSystem extends System {\n\n  constructor () {\n    super({\n      input: [InputComponent],\n      camera: ['camera'],\n      canvas: ['canvas'],\n    });\n  }\n\n  update () {\n    const input = this.getEntity('input')?.[InputComponent];\n    const camera = this.getEntity('camera')?.camera;\n    const canvas = this.getEntity('canvas')?.canvas;\n    if (!(input && camera && canvas)) return;\n\n    camera.getWorldPosition(input.cursorGlobal);\n    // input.cursorGlobal.add(input.cursor);\n\n    vec.set(\n      ( input.cursor.x / canvas.width ) * 2 - 1,\n      - ( input.cursor.y / canvas.height ) * 2 + 1,\n      0.5 );\n\n    vec.unproject( camera );\n\n    vec.sub( input.cursorGlobal ).normalize();\n\n    var distance = - input.cursorGlobal.z / vec.z;\n\n    input.cursorGlobal.copy( input.cursorGlobal ).add( vec.multiplyScalar( distance ) );\n\n  }\n}\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\nimport { Vector3 } from '../../_snowpack/pkg/three.js';\n\nconst t = new Vector3;\n\nexport class MoveSystem extends System {\n  constructor () {\n    super(['pos', 'dir']);\n  }\n\n  update (dt) {\n    for (const entity of this.getEntities()) {\n      if (entity.rooted) continue;\n      const speed = entity.speed ?? 1;\n\n      Object.assign(t, entity.dir);\n      t.multiplyScalar(dt * speed);\n\n      entity.pos.add(t);\n    }\n  }\n}\n", "import { System } from '../../_snowpack/pkg/eaciest.js';\nimport { Object3D, PerspectiveCamera, Scene, WebGLRenderer } from '../../_snowpack/pkg/three.js';\nimport { WasdController } from '../game/wasd-controller.js';\nimport { SceneObject } from './scene-object.js';\nimport { Vector3 } from '../../_snowpack/pkg/three.js';\n\nexport class RenderSystem extends System {\n\n  // Set it to be the last\n  priority = Infinity;\n\n  constructor () {\n    super(['renderer', 'scene', 'camera']);\n  }\n\n  // enabled = false;\n\n  initialize () {\n    super.initialize();\n\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new PerspectiveCamera( 70, aspect, 0.01, 2000 );\n    camera.position.z = 10;\n\n    const scene = new Scene();\n\n    const renderer = new WebGLRenderer( {\n      antialias: false,\n      // alpha: true,\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n    document.body.append(renderer.domElement);\n\n    this.getEngine().addEntity({\n      canvas: renderer.domElement\n    });\n\n    this.getEngine().addEntity({\n      renderer,\n      camera,\n      scene,\n    });\n\n\n    this.getEngine().hook([WasdController])\n      .on('onEntityAdded', entity => {\n        const t = new Vector3();\n\n        this.getEngine().addEntity({\n          [SceneObject]: camera,\n          parent: entity,\n        })\n      })\n      .execute();\n  }\n\n  update () {\n    const e = this.getEntity();\n    e.renderer.render(e.scene, e.camera);\n  }\n\n}\n", "import { AudioSystem } from './systems/core/audio.js';\nimport { DirToFlipSystem } from './systems/game/dir-to-flip.js';\nimport { PerfCollectionSystem } from './systems/core/perf.js';\nimport { MaxHpSystem } from './systems/game/max-hp.js';\nimport { PhaseSwitchSystem } from './systems/game/phase-switch.js';\nimport { HpRenderSystem } from './systems/game/hp-render.js';\nimport { MagicSystem, PhaseToColorSystem } from './systems/game/magic.js';\nimport { InitializationSystem } from './systems/core/init.js';\nimport { TargetPosSystem } from './systems/core/target-pos.js';\nimport { CasterAiSystem } from './systems/game/caster-ai.js';\nimport { ReceivedDamageSystem } from './systems/game/received-damage.js';\nimport { DeathSystem } from './systems/game/death.js';\nimport { CollisionCleanupSystem } from './systems/physics/collision-cleanup.js';\nimport { OnCollisionSystem } from './systems/physics/collision-dispatching.js';\nimport { LifetimeSystem } from './systems/core/lifetime.js';\nimport { InputCursorTranslationSystem } from './systems/core/input-cursor-translation.js';\nimport { MatterSystem } from './systems/physics/matter.js';\nimport { MoveSystem } from './systems/core/move.js';\nimport { WasdControllerSystem } from './systems/game/wasd-controller.js';\nimport { SceneObjectSystem, RootInitSystem } from './systems/core/scene-object.js';\nimport { RenderSystem } from './systems/core/render.js';\nimport { InputSystem } from './systems/core/input.js';\n\n\nexport const setup_systems = (world) => {\n  world.addSystemClass(InputCursorTranslationSystem);\n  world.addSystemClass(InputSystem);\n\n\n  world.addSystemClass(LifetimeSystem);\n  world.addSystemClass(SceneObjectSystem);\n  world.addSystemClass(RootInitSystem);\n\n  world.addSystemClass(PhaseSwitchSystem);\n\n  world.addSystemClass(WasdControllerSystem);\n  world.addSystemClass(TargetPosSystem);\n  world.addSystemClass(MoveSystem);\n  world.addSystemClass(MatterSystem);\n  world.addSystemClass(OnCollisionSystem);\n\n  world.addSystemClass(ReceivedDamageSystem);\n  world.addSystemClass(DeathSystem);\n\n  world.addSystemClass(RenderSystem);\n\n  world.addSystemClass(CollisionCleanupSystem);\n  world.addSystemClass(CasterAiSystem);\n  world.addSystemClass(InitializationSystem);\n  world.addSystemClass(MagicSystem);\n  world.addSystemClass(PhaseToColorSystem);\n  world.addSystemClass(MaxHpSystem);\n  world.addSystemClass(HpRenderSystem);\n  world.addSystemClass(PerfCollectionSystem);\n  world.addSystemClass(DirToFlipSystem);\n  world.addSystemClass(AudioSystem);\n};\n", "export const loop = (cb) => {\n  let last_update = Date.now();\n\n  requestAnimationFrame(function frame () {\n    const dt = Date.now() - last_update;\n    last_update = Date.now();\n\n    cb(dt);\n\n    requestAnimationFrame(frame);\n  });\n};\n\n\n", "\n/**\n * @param world {LDEngine}\n */\nexport const initDebug = world => {\n  const g  = window;\n\n\n  g.world = g.engine = world;\n\n\n  g.f = new Proxy({}, {\n    get (target, component) {\n      const r = [];\n      for (const entity of world.entities) {\n        if (component in entity) {\n          r.push(entity);\n        }\n      }\n\n      if (!r.length) {\n        return null;\n      }\n\n      if (r.length === 1) {\n        return r[0];\n      }\n      return r;\n    },\n  });\n\n\n  g.fs = new Proxy({}, {\n    get (target, query) {\n      query = query.toLowerCase();\n      const r =  world._systems.filter(system => {\n        return system.constructor.name.toLowerCase().includes(query);\n      });\n\n      if (!r.length) {\n        return null;\n      }\n\n      if (r.length === 1) {\n        return r[0];\n      }\n      return r;\n    },\n  });\n\n  g.fm = g.fmap = new Proxy({}, {\n    get (target, query) {\n      const r = g.f[query];\n      if (!r) return r;\n\n      if (r instanceof Array) {\n        return r.map(x => x[query]);\n      }\n\n      return r[query];\n    },\n  });\n  \n  g.fwatch = new Proxy({}, {\n    get (target, prop, receiver) {\n      const map = new WeakMap;\n      const o = world.isWatchedProperty;\n      let last_prop;\n      world.isWatchedProperty = function (key) {\n        last_prop = key;\n        if (key === prop) {\n          return true;\n        }\n        return o.call(this, prop);\n      };\n\n      const eb = world._markEntityChanged;\n      world._markEntityChanged = function (e, b) {\n        if (last_prop === prop) {\n          if (!map.has(e) || map.get(e) !== e[prop]) {\n            console.log(`[${prop}] changed to`, e[prop], 'on', e);\n            map.set(e, e[prop]);\n          }\n        }\n        return eb.call(this, e, b);\n      };\n\n      return 'OK';\n    },\n  });\n\n\n  return world;\n};\n\n\nconst container = document.createElement('div');\nObject.assign(container.style, {\n  'pointer-events': 'none',\n  'user-select': 'none',\n  'color': 'white',\n  position: 'absolute',\n  font: 'caption',\n  bottom: '0',\n  left: '0',\n});\n\ncontainer.addEventListener('contextmenu', e => e.preventDefault());\n\nconst rows = {};\nconst ensure_element = name => {\n  if (!rows[name]) {\n    const el = document.createElement('div');\n    el.innerHTML = name + ' <a><a/>';\n    container.appendChild(el);\n    rows[name] = el.firstElementChild;\n\n    rows[name].style.color = '#3391ff';\n  }\n  return rows[name];\n};\nconst set_val = (name, val) => {\n  ensure_element(name).innerText = val;\n};\n\nwindow.debug_values = new Proxy({}, {\n  set (target, prop, value, receiver) {\n    if (typeof value === 'number') {\n      value = value.toFixed(2);\n    }\n    set_val(prop, value);\n    return true;\n  },\n});\n\n\ndocument.body.appendChild(container);\n\nlet t = 0;\nObject.defineProperty(window, 'frameTime', {\n  set (v) {\n    if (t !== v) set_val('frame time', t = v);\n  },\n});\n", "import { LDEngine } from './ld-engine.js';\nimport { createLvl1 } from './levels/lvl1.js';\nimport { setup_systems } from './setup-systems.js';\nimport { loop } from './utils/update-loop.js';\nimport { initDebug } from './utils/debug.js';\n\n\nconst world = new LDEngine();\ninitDebug(world);\n\nsetup_systems(world);\n\n\ncreateLvl1(world);\n\n\n\nloop((dt) => world.update(dt / 1000));\n\n\n\n"],
  "mappings": "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",
  "names": []
}
